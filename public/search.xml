<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>bom</title>
      <link href="/2022/01/03/bom/"/>
      <url>/2022/01/03/bom/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器窗口大小"><a href="#浏览器窗口大小" class="headerlink" title="浏览器窗口大小"></a>浏览器窗口大小</h2><table><thead><tr><th>元素</th><th>描述</th><th>使用</th></tr></thead><tbody><tr><td><code>innerWidth</code>,<code>innerHeight</code>:</td><td>返回浏览器窗口中页面<strong>可见视口</strong>的大小<span style="color:red">(不包含边框,工具栏)</span></td><td><code>window.innerWidth</code></td></tr><tr><td><code>outerWidth</code>,<code>outerHeight</code>:</td><td>返回浏览器窗口自身的大小(整个浏览器,包含边框,工具栏)</td><td><code>window.outerWidth</code></td></tr><tr><td><code>clientWidth</code>,<code>clientHeight</code>:</td><td>返回<strong>布局视口</strong>的大小</td><td><code>document.documentElement.clientWidth</code></td></tr></tbody></table><blockquote><p>注意:布局视口相对于可见视口的概念.可见视口只能显示页面的一小部分.</p></blockquote><ul><li><strong>移动窗口</strong>(moveTo,moveBy)和<strong>缩放窗口</strong>(resizeTo,resizeBy)方法一般浏览器会禁用</li></ul><h2 id="window-open"><a href="#window-open" class="headerlink" title="window.open()"></a>window.open()</h2><blockquote><p>用于导航指定到url,也可以打开新的浏览器窗口(接收以下四个参数)</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 以下功能相同 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function">oprn</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>要加载的url</li><li>目标窗口(会弹出一个新的窗口):<span style="color:red">自己决定名字</span></li><li>特性字符串</li><li>新窗口在浏览器历史记录中是否替代当前加载页面的<strong>布尔值</strong></li></ol><ul><li>例如:<code>window.open(&quot;https://www.baidu.com&quot;,&quot;wro&quot;,&quot;height=400,width=400,resizable=true&quot;)</code></li><li>打开一个400*400大小可拖动改变的<code>wro</code>窗口</li></ul><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><ol><li><code>setTimeout()</code>:指定时间后执行代码.<ul><li>返回一个超时排期的ID,可用于取消该任务</li><li><span style="color:red">设置循环任务推荐,因为他在满足条件时自动停止</span>.</li></ul></li><li><code>setInterval()</code>:指定每隔一段事件后执行某些代码.<ul><li>也会返回一个循环定时ID</li></ul></li></ol><ul><li>注意:<code>clearTimeout(ID)</code>用于取消定时器</li></ul><h2 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h2><ol><li><code>alert()</code>:警告框,只有确认选项</li><li><code>confirm()</code>:确认框,有<strong>确认</strong>和<strong>取消</strong>按钮,分别返回<code>true</code>和<code>false</code></li><li><code>prompt</code>:文本提示框.<ul><li>接收两个参数,第一个是提示消息,第二个是输入框输入信息.</li><li>用户按确认按钮,返回输入框输入信息</li></ul></li></ol><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><blockquote><p><code>window.location</code>和<code>document.location</code>指向同一个对象</p></blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Location.href</td><td>包含整个URL,location的toString()方法返回</td></tr><tr><td>Location.protocol</td><td>页面使用的协议.通常包括<code>http:</code>或<code>https:</code></td></tr><tr><td>Location.host</td><td>服务器名和端口号</td></tr><tr><td>Location.hostname</td><td>服务器名</td></tr><tr><td>Location.port</td><td>端口号</td></tr><tr><td>Location.pathname</td><td>url的路径</td></tr><tr><td>Location.search</td><td>查询字符串.以?开头</td></tr><tr><td>Location.hash</td><td>哈希散列值,开头有一个“#”</td></tr><tr><td>Location.username</td><td>域名前指定的用户名</td></tr><tr><td>Location.password</td><td>域名前指定的密码</td></tr><tr><td>Location.origin</td><td>url的源地址</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>validateNPN</title>
      <link href="/2022/01/02/validatenpn/"/>
      <url>/2022/01/02/validatenpn/</url>
      
        <content type="html"><![CDATA[<h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><h3 id="关于部分检测工具"><a href="#关于部分检测工具" class="headerlink" title="关于部分检测工具"></a>关于部分检测工具</h3><blockquote><p><a href="https://juejin.cn/post/6977183707148845070#refetch">关于测试工具的一点了解</a></p></blockquote><ol><li><code>ava</code>:开源的Node.js测试运行器</li><li><code>xo</code>:强大的刷新工具.通过简单的命令xo –fix ，自动修复了许多问题</li><li><code>node-tap</code>:<a href="https://node-tap.org/docs/getting-started/">nodejs一款测试工具</a></li></ol><h3 id="TravisCI"><a href="#TravisCI" class="headerlink" title="TravisCI"></a>TravisCI</h3><blockquote><p><code>Travis CI</code>可以设置github托管的项目在push或者pull等时机触发构建与测试，进行持续集成</p></blockquote><ul><li>可以自动进行构建,自动运行测试,部署,随时发现问题,随时修复.</li><li>例如<code>hexo-deployer-git</code>也是一种持续集成的工具</li><li>参考:<a href="https://www.liaoxuefeng.com/article/1083103562955136">https://www.liaoxuefeng.com/article/1083103562955136</a></li></ul><h3 id="Dependabot"><a href="#Dependabot" class="headerlink" title="Dependabot"></a>Dependabot</h3><blockquote><p><code>Dependabot</code>会自动创建拉取请求以响应安全建议.每天它都会下载你的依赖文件,解析它们并检查任何过时或不安全的依赖关系</p><blockquote><p>并且提供了有关执行特定更新的所有项目的持续集成 (CI)</p></blockquote></blockquote><ul><li>参考:<a href="https://docs.github.com/en/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/configuring-dependabot-security-updates">https://docs.github.com/en/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/configuring-dependabot-security-updates</a></li></ul><h2 id="validate-npm-package-name"><a href="#validate-npm-package-name" class="headerlink" title="validate-npm-package-name"></a>validate-npm-package-name</h2><blockquote><p>检验该字符串是否是一个有效的包命名</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> validate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"validate-npm-package-name"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token string">" leading-space:and:weirdchars"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//&#123;</span><span class="token comment">//  validForNewPackages: false,</span><span class="token comment">//  validForOldPackages: false,</span><span class="token comment">//  errors: [</span><span class="token comment">//    'name cannot contain leading or trailing spaces',</span><span class="token comment">//    'name can only contain URL-friendly characters'</span><span class="token comment">//  ]</span><span class="token comment">//&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>builtins</code>:列出了 node 所有的内置模块</p></blockquote><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><ol><li>不能是<code>null</code>或者<code>undefined</code>这种关键字</li><li>必须是字符串</li><li>不能是空的包</li><li>不能以<code>.</code>,<code>_</code>开头</li><li>包名两头不能有空格</li><li>不能大于214个字母</li><li>必须全是小写</li><li>不能包含<code>[~&#39;!()*]</code></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">name<span class="token operator">===</span><span class="token keyword">null</span>name<span class="token operator">===</span><span class="token keyword">undefined</span><span class="token keyword">typeof</span> name <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token operator">!</span>name<span class="token punctuation">.</span>lengthname<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>name<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^_</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>name<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> namename<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">214</span>name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> name<span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">~</span><span class="token string">'!()*]/.test(name.split('</span><span class="token operator">/</span>'<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>(?:...)</code>:匹配括号中的内容,但是不捕获</li><li>参考:<a href="https://regex101.com/">https://regex101.com/</a></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> scopedPackagePattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'^(?:@([^/]+?)[/])?([^/]+?)$'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">!==</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Maybe it's a scoped package name, like @user/package</span>    <span class="token keyword">var</span> nameMatch <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>scopedPackagePattern<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nameMatch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> user <span class="token operator">=</span> nameMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token keyword">var</span> pkg <span class="token operator">=</span> nameMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">===</span> user <span class="token operator">&amp;&amp;</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span> <span class="token operator">===</span> pkg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span>warnings<span class="token punctuation">,</span> errors<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'name can only contain URL-friendly characters'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span>warnings<span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>encodeURIComponent()</code>:原字串作为URI组成部分被编码后的新字符串<ol><li>转义除了如下所示的所有文字<code>A-Z a-z 0-9 - _ . ! ~ * &#39; ( )</code></li><li>例如<code>console.log(encodeURIComponent(&quot;#&quot;))//%23</code></li></ol></li></ul><blockquote><p>不能含有nodejs等核心模块</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">builtins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">builtin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> builtin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      warnings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>builtin <span class="token operator">+</span> <span class="token string">' is a core module name'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结与感受"><a href="#总结与感受" class="headerlink" title="总结与感受"></a>总结与感受</h2><ul><li>正则匹配构思巧妙,想不出来</li><li>学到一点关于测试方面的东西,弥补一直不知道的东西</li><li>项目虽小,逻辑清晰,值得学习</li></ul><blockquote><p>参考:<a href="https://juejin.cn/post/7012047954995314701">https://juejin.cn/post/7012047954995314701</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>remoteGitTags</title>
      <link href="/2021/12/31/remotegittags/"/>
      <url>/2021/12/31/remotegittags/</url>
      
        <content type="html"><![CDATA[<h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><h3 id="gitattributes"><a href="#gitattributes" class="headerlink" title=".gitattributes"></a>.gitattributes</h3><ul><li>文本换行的方式:<ol><li><code>CRLF</code>:对应<code>\r\n</code>两个字符(Windows 系统)</li><li><code>LF</code>:对应<code>\n</code>,Uninx(Linux,MacOS)</li></ol></li></ul><blockquote><p><code>.gitattributes</code>文件:文件中的一行定义一个路径的若干个属性,主要用于定义每种文件的属性,以方便<code>git</code>帮我们统一管理</p></blockquote><ol><li><strong>text</strong>控制行尾的规范性,其行尾将在存储库中转换为<code>LF</code></li><li><strong>eol</strong>设定行末规范<ul><li><code>eol=lf</code>,检入时将行尾规范为<code>LF</code>,检出时将行尾转换为<code>LF</code></li><li><code>eol=crlf</code>,检入时将行尾规范为<code>LF</code>,检出时将行尾转换为<code>CRLF</code></li></ul></li><li>关于<code>eol=lf</code>和<code>text</code>的区别<a href="https://stackoverflow.com/questions/32854978/what-is-the-difference-between-eol-lf-and-text-in-a-gitattributes-file">https://stackoverflow.com/questions/32854978/what-is-the-difference-between-eol-lf-and-text-in-a-gitattributes-file</a></li><li><strong>diff</strong>:<a href="https://cloud.tencent.com/developer/section/1138630">https://cloud.tencent.com/developer/section/1138630</a></li></ol><table><thead><tr><th>案例</th><th>描述</th></tr></thead><tbody><tr><td>*  text=auto</td><td>文件自动换行.如果是文件,则在文件入Git库时,行尾自动转换为LF如果已经在入Git库中的文件的行尾为CRLF,则该文件在入Git库时,不再转换为LF</td></tr><tr><td>*.txt  text</td><td>只有<code>txt</code>文件会进行行尾规范化</td></tr><tr><td>*.jpg  -text</td><td><code>jpg</code>文件不会进行任何行尾规范化.</td></tr><tr><td>*.vcproj  text eol=crlf</td><td>只有<code>vcproj</code>文件见如是行尾为<code>LF</code>,检出是自动转换为<code>CRLF</code></td></tr><tr><td>*.sh  text eol=lf</td><td>只有sh文件检入时行尾为<code>LF</code>,检出时行尾不会转换为<code>CRLF</code></td></tr><tr><td>*.py  eol=lf</td><td>只针对工作目录中的文件</td></tr></tbody></table><h3 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h3><blockquote><p>npm 从命令行、环境变量和npmrc文件中获取其配置设置该npm config命令可用于更新和编辑用户和全局<code>npmrc</code>文件的内容</p></blockquote><ol><li>每个项目的配置文件(/path/to/my/project/.npmrc)</li><li>每个用户的配置文件(~/.npmrc)</li><li>全局配置文件($PREFIX/etc/npmrc)</li><li>npm 内置配置文件(/path/to/npm/npmrc)</li></ol><h2 id="remote-git-tags"><a href="#remote-git-tags" class="headerlink" title="remote-git-tags"></a>remote-git-tags</h2><blockquote><p>关于<code>node:</code>前缀</p><blockquote><p>核心模块也可以使用 node: 前缀来标识,在这种情况下,它会绕过 require 缓存例如, <code>require(&#39;node:http&#39;)</code> 将始终返回内置的 HTTP 模块,即使该名称存在 <code>require.cache</code> 条目</p></blockquote></blockquote><ul><li>本质:<code>git ls-remote --tags repoUrl</code>,获取远程仓库的标签</li></ul><h3 id="promisify"><a href="#promisify" class="headerlink" title="promisify"></a>promisify</h3><ul><li>将回调函数转换成<code>promise</code>的形式</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> execFile <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"node:child_process"</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> fn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> execFile1 <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span>execFile<span class="token punctuation">)</span><span class="token function">execFile1</span><span class="token punctuation">(</span><span class="token string">"git"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'ls-remote'</span><span class="token punctuation">,</span> <span class="token string">'--tags'</span><span class="token punctuation">,</span> <span class="token string">"git@github.com:vuejs/create-vue.git"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>难点:<ol><li><code>Reflect.apply</code>:this是没有必要的,可以改成null</li><li>关于使用<code>apply</code>绑定<code>execFile</code>执行此函数</li><li>还需将<code>execFile</code>所需的回调函数push进入args</li></ol></li></ul><h3 id="execFile"><a href="#execFile" class="headerlink" title="execFile"></a>execFile</h3><ul><li>在子进程中生成shell命令,并执行</li><li>参考:<a href="https://www.nodeapp.cn/child_process.html">https://www.nodeapp.cn/child_process.html</a></li></ul><blockquote><ul><li><code>execFile</code>:在<code>child_process</code>模块中,可以直接衍生命令,而无需像<code>exec</code>一样先生成shell(<strong>解码输出为UTF-8,并将字符串传给回调</strong>)</li><li><code>child_process.execFile(file[, args][, options][, callback])</code></li><li>返回一个<code>childProcess</code></li></ul></blockquote><ul><li>参考:<a href="https://juejin.cn/post/7028731182216904740">https://juejin.cn/post/7028731182216904740</a></li></ul><h2 id="总结与感受"><a href="#总结与感受" class="headerlink" title="总结与感受"></a>总结与感受</h2><ol><li>对于源码里很多文件不够了解,接触的太少</li><li>实现<code>promisify</code>发现自己对promise的操作还是不熟</li><li>对于node很多模块也不是很熟,还需要多练习</li><li>基础还不是很扎实,还需要加强练习</li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>githubPages</title>
      <link href="/2021/12/15/githubpages/"/>
      <url>/2021/12/15/githubpages/</url>
      
        <content type="html"><![CDATA[<h2 id="使用github部署网站"><a href="#使用github部署网站" class="headerlink" title="使用github部署网站"></a>使用github部署网站</h2><blockquote><p>可以直接通过master分支直接来馈送网站.而不需要另行创建分支(容易导致冲突)</p></blockquote><ol><li>创建一个<code>docs</code>文件夹</li><li>需要含有<code>index.html</code>入口文件</li><li>需要先把项目推到仓库中,然后在设置中进行设置</li></ol><p><img src="createPages.png" alt="创建"></p><h2 id="使用webhook自动化部署"><a href="#使用webhook自动化部署" class="headerlink" title="使用webhook自动化部署"></a>使用webhook自动化部署</h2><blockquote><p>强烈建议使用ssh,而不是https</p></blockquote><h3 id="设置node环境"><a href="#设置node环境" class="headerlink" title="设置node环境"></a>设置node环境</h3><ul><li>在官网下载最新版的node:<code>https://nodejs.org/en/download/</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v16.13.1&#x2F;node-v16.13.1-linux-x64.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>解压</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">xz -d node-v9.3.0-linux-x64.tar.xztar -xf node-v9.3.0-linux-x64.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>配置环境:在<code>/etc/profile</code>最后一行加入</li><li>注意:<span style="color:red">是node所在的路径</span>,我这里就是在<code>/</code>目录下</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export PATH&#x3D;$PATH:&#x2F;node-v16.13.1-linux-x64&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm -vnode -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="构建服务"><a href="#构建服务" class="headerlink" title="构建服务"></a>构建服务</h3><blockquote><p>安装插件(按照自己的想法动手配置)</p></blockquote><ol><li>在目录<code>\opt</code>下创建文件夹<code>webhook</code>,初始化插件</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm init -ynpm i -S github-webhook-handlernpm i pm2 -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>构建webhook服务</li></ol><blockquote><ul><li><code>secret</code>设置必须何github后台的一致</li><li>端口也必须和github的后台一致</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">var</span> createHandler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'github-webhook-handler'</span><span class="token punctuation">)</span><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token function">createHandler</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> secret<span class="token operator">:</span> <span class="token string">'secret'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 上面的 secret 保持和 GitHub 后台设置的一致文章后面会提到。</span><span class="token keyword">function</span> <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token parameter">cmd<span class="token punctuation">,</span> args<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spawn<span class="token punctuation">;</span>  <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> resp <span class="token operator">+=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">callback</span> <span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">handler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'gggggggggg'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'push'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Received a push event for %s to %s'</span><span class="token punctuation">,</span>    event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>name<span class="token punctuation">,</span>    event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'./deploy.sh'</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="github设置"><a href="#github设置" class="headerlink" title="github设置"></a>github设置</h3><ol><li>在设置中打开开发者设置<code>Developer settings</code></li><li>打开个人访问令牌<code>Personal access tokens</code>,生成令牌</li><li>打开存储库的设置中的网络钩子<code>webhooks</code><ul><li><code>secret</code>:就是个人访问令牌<code>Personal access tokens</code></li><li><code>url</code>:端口一定要在安全组开放</li><li>可以先看阮一峰的<code>github actions</code>:<a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a></li></ul></li><li>会出现连接不到主机的状况(等待做完以下步骤)</li></ol><p><img src="webhooks.png" alt="webhooks"></p><h3 id="执行shell脚本"><a href="#执行shell脚本" class="headerlink" title="执行shell脚本"></a>执行shell脚本</h3><ol><li>在服务器端生成ssh密钥(ssh存在于<code>/root/.ssh</code>文件夹),将公钥<code>pub</code>存入<code>github</code>中</li><li><code>ssh-keygen -t rsa -C &quot;zyj17715640603@gmail.com&quot;</code>(自己的账号)</li><li>配置<code>git</code>:</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --gloabl user.name&#x3D;&quot;jack&quot;git config --gloabl user.email&#x3D;1553198027@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>使用<code>git clone git@...</code>克隆仓库</li></ol><blockquote><p>在<code>webhook</code>目录下创建<code>deploy.sh</code>写入以下内容</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bash# 网站的根目录,用自己的目录。WEB_PATH&#x3D;&#39;&#x2F;opt&#x2F;web&#x2F;Jack-Zhang-1314.github.io.git&#39;echo “start deployment”cd $WEB_PATHecho “fetching from remote…”git fetch –allgit reset –hard origin&#x2F;masterecho “done”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于linux权限问题,建议先执行<code>chmod 777 ./deploy.sh</code></p></blockquote><ul><li>然后运行<code>webhook.js</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pm2 start webhook.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><blockquote><p>nginx代理开启网页:<a href="http://mail.zyjcould.ltd/2021/10/30/fu-wu-qi-bu-shu/#toc-heading-8">http://mail.zyjcould.ltd/2021/10/30/fu-wu-qi-bu-shu/#toc-heading-8</a></p></blockquote><ul><li>参考:<a href="http://mail.zyjcould.ltd/2021/10/30/fu-wu-qi-bu-shu/#toc-heading-8">http://mail.zyjcould.ltd/2021/10/30/fu-wu-qi-bu-shu/#toc-heading-8</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setPrototypeOf的区别</title>
      <link href="/2021/12/10/setprototypeof-de-qu-bie/"/>
      <url>/2021/12/10/setprototypeof-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>初始化两个函数对象</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>sound <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">shout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sound<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sound</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>sound <span class="token operator">=</span> sound<span class="token punctuation">&#125;</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">shout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sound <span class="token operator">+</span> <span class="token string">'我会喵喵'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">behavior</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'我会跑'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="理解原型链"><a href="#理解原型链" class="headerlink" title="理解原型链"></a>理解原型链</h2><blockquote><ul><li>当我们创建一个函数就会有一个<code>prototype</code>属性指向原型对象.通过该函数创建的实例对象会共享原型对象上的属性和方法</li><li>默认情况下原型对象会自动获得一个<code>constructor</code>属性.这个属性指向构造函数本身</li><li>使用函数创建一个实例后,该实例包含一个<strong>隐式原型</strong>(<code>__proto__</code>),指向构造函数的原型对象.</li><li>对象原型之间的嵌套组成了原型链，原型链的作用是维护访问对象属性的查询，确定访问权限</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Cat<span class="token punctuation">)</span><span class="token comment">//见图</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> cat<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.png" alt="原型对象"></p><ul><li>从图中可以看出实例的<code>隐式原型</code>和函数的显示原型指向同一个对象</li></ul><h3 id="关于继承的问题"><a href="#关于继承的问题" class="headerlink" title="关于继承的问题"></a>关于继承的问题</h3><blockquote><p>使用猫类继承动物类,<code>使用猫的原型指向动物的实例</code></p></blockquote><ol><li>关于<code>Cat.prototype.constructor</code>的指向问题</li><li>关于<code>Cat.prototype</code>的指向问题</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> a<span class="token comment">//Animal</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token comment">//将指向改成Cat</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Cat<span class="token comment">//创建Cat实例</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'mimi'</span><span class="token punctuation">,</span> <span class="token string">'miao~miao~'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"shout"</span> <span class="token keyword">in</span> cat<span class="token punctuation">)</span><span class="token comment">//true</span>cat<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//mimimiao~miao~</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"behavior"</span> <span class="token keyword">in</span> cat<span class="token punctuation">)</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> a<span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>Cat.prototype.constructor</code>的指向会指向<code>Animal</code>构造函数,此时最好手动更改</li><li><code>Cat</code>的原型对象会被更改为<code>Animal</code>的实例对象,旧原型上的任何属性都会被更改(指向变换了)</li><li><code>Cat.prototype</code>的指向为<code>Animal</code>的一个实例对象a</li><li>那么同时可以在继承后的原型加方法</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">behavior</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'我会跑'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="Cat.prototype.png" alt="Cat.prototype的原型指向"></p><h2 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'mimi'</span><span class="token punctuation">,</span> <span class="token string">'miao~miao~'</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">behavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><img src="setPrototypeOf.png" alt="使用setPrototypeOf"></li><li>给<code>Cat</code>的原型设置了一个名为<code>Animal</code>的原型,所以Cat的<strong>原有的原型</strong>的原型就是Animal的原型<code>Cat.prototype.__proto__ === Animal.prototype</code></li><li>所以<code>setPrototypeOf</code>会优先访问<code>Cat</code>原有的原型然后再访问原型的原型</li></ol><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><img src="create.png" alt="create"></li><li>使用<code>Object.create()</code>会将<code>Cat.prototype</code>先将此原型清成空的原型,这个空的原型会指向Animal的原型<code>Cat.prototype.__proto__ === Animal.prototype</code></li><li>所以<code>Object.create()</code>会将<code>Cat.prototype</code>清空为干净的原型,然后去继承</li></ol>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode集成go</title>
      <link href="/2021/12/08/vscode-ji-cheng-go/"/>
      <url>/2021/12/08/vscode-ji-cheng-go/</url>
      
        <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ol><li><img src="GO%E6%8F%92%E4%BB%B6.png" alt="安装go插件"></li><li>在控制台配置<code>go proxy</code><ul><li><code>go env -w GOPROXY=https://goproxy.cn,direct</code></li></ul></li><li><img src="env%E9%85%8D%E7%BD%AE.png" alt="配置环境"><ul><li><strong>GO111MODULE</strong>:<ol><li>当为on时则使用<code>Go Modules</code>,go会忽略<code>$GOPATH</code>和<code>vendor</code>文件夹,只根据<code>go.mod</code>下载依赖</li><li>当为off时则不适用新特性Go Modules支持,它会查找 vendor目录和 $GOPATH来查找依赖关系,也就是继续使用“GOPATH模式”</li><li>当为auto时或未设置时则根据当前项目目录下是否存在 <code>go.mod</code>文件或<code>$GOPATH/src之</code>外并且其本身包含<code>go.mod</code>文件时才会使用新特性<code>Go Modules</code>模式(默认值)</li></ol></li><li><strong>GOPATH</strong>:可以这么理解为GO源码目录,在这个目录进行编译,链接最后生成所需要的库,可执行文件</li><li><strong>GOROOT</strong>:go语言编译,工具,标准库等的安装路径</li><li><strong>GOPROXY</strong>:下载go模块镜像(如果国外的被墙<a href="https://proxy.golang.org/">https://proxy.golang.org/</a>),<ul><li>参考:<a href="https://goproxy.cn/">https://goproxy.cn/</a></li></ul></li></ul></li></ol><h2 id="开始下载工具"><a href="#开始下载工具" class="headerlink" title="开始下载工具"></a>开始下载工具</h2><blockquote><p>此操作会将所有下载的镜像和缓存保存到<code>GOPATH</code>的路径下</p><p>在setting.json中配置<code>gopath</code>和<code>goroot</code></p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"go.autocompleteUnimportedPackages"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"go.buildOnSave"</span><span class="token operator">:</span> <span class="token string">"workspace"</span><span class="token punctuation">,</span><span class="token property">"go.lintOnSave"</span><span class="token operator">:</span> <span class="token string">"package"</span><span class="token punctuation">,</span><span class="token property">"go.vetOnSave"</span><span class="token operator">:</span> <span class="token string">"package"</span><span class="token punctuation">,</span><span class="token property">"go.buildTags"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"go.buildFlags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"go.lintFlags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"go.vetFlags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"go.coverOnSave"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"go.useCodeSnippetsOnFunctionSuggest"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"go.goroot"</span><span class="token operator">:</span> <span class="token string">"F:\\go"</span><span class="token punctuation">,</span><span class="token property">"go.gopath"</span><span class="token operator">:</span> <span class="token string">"D:\\GoPath"</span><span class="token punctuation">,</span><span class="token property">"go.gocodeAutoBuild"</span><span class="token operator">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><code>ctrl+shift+p</code>打开命令面板</p></li><li><p>搜索<code>go:install/update tools</code>并且点击后全选</p></li><li><p>每完成一项就会返回一个成功</p></li></ol><p><img src="goTools.png" alt="gotools"></p><p><img src="goTools2.png" alt="gotools"></p><h2 id="启用自动调试"><a href="#启用自动调试" class="headerlink" title="启用自动调试"></a>启用自动调试</h2><blockquote><p>下载<code>GO Autotest</code>插件开启自动调试,不需要配置<code>launch.json</code>文件</p><p><code>GO111MODULE</code>一定要是<code>auto</code></p></blockquote><p><img src="%E8%B0%83%E8%AF%95.png" alt="调试"></p>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> GO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reflect</title>
      <link href="/2021/12/04/reflect/"/>
      <url>/2021/12/04/reflect/</url>
      
        <content type="html"><![CDATA[<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><ol><li>Reflect并非一个构造函数,不能通过new运算符对其进行调用,或者将Reflect对象作为一个函数来调用(将原本Object命令式改为函数行为)<ul><li><code>&#39;assign&#39; in Object</code></li><li><code>Reflect.has(Object, &#39;assign&#39;)</code></li></ul></li><li>Reflect的所有属性和方法都是静态的</li><li>Reflect提供了以下静态方法与proxy handler methods(en-US)的命名相同</li><li>其中的一些方法Object相同, 尽管二者之间存在某些细微上的差别.即Reflect对象上可以拿到语言内部的方法</li></ol><h3 id="Reflect-apply"><a href="#Reflect-apply" class="headerlink" title="Reflect.apply()"></a>Reflect.apply()</h3><blockquote><p>过指定的参数列表发起对<span style="color:red">目标(target)函数</span>的调用</p></blockquote><ul><li><span style="color:red">注意:如果 target 对象不可调用,抛出 TypeError</span></li><li>调用完带着指定参数和 this 值的给定的函数后返回的结果</li></ul><ol><li><code>target</code>:目标函数</li><li><code>thisArgument</code>:target函数调用时绑定的this对象</li><li><code>argumentsList</code>:target函数调用时传入的实参列表l,该参数应该是一个类数组的对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RegExp</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>test<span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"confabulation"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reflect-construct"><a href="#Reflect-construct" class="headerlink" title="Reflect.construct()"></a>Reflect.construct()</h3><blockquote><p>类似于new操作符构造函数,相当于运行<code>new target(...args)</code></p></blockquote><ul><li><span style="color:red">如果target不是构造函数,抛出TypeError</span></li><li>以target(如果newTarget存在,则为newTarget)函数为构造函数,argumentList为其初始化参数的对象实例</li></ul><ol><li><code>target</code>:被运行的目标<strong>构造函数</strong></li><li><code>argumentsList</code>:类数组,目标构造函数调用时的参数</li><li><code>newTarget</code>(可选):作为新创建对象的原型对象的constructor属性,参考<code>new.target</code>操作符,默认值为target</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">OneClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'one'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">OtherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'other'</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建一个对象:</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>OneClass<span class="token punctuation">,</span> args<span class="token punctuation">,</span> OtherClass<span class="token punctuation">)</span><span class="token comment">// 与上述方法等效:</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">OtherClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token function">OneClass</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>当使用<code>Object.create()</code>和<code>Function.prototype.apply()</code>时,如果不使用new操作符调用构造函数,构造函数内部的new.target值会指向undefined</p></li><li><p>当调用<code>Reflect.construct()</code>来创建对象,new.target值会自动指定到target(或者newTarget,前提是newTarget指定了)</p></li></ol><h3 id="Reflect-defineProperty"><a href="#Reflect-defineProperty" class="headerlink" title="Reflect.defineProperty()"></a>Reflect.defineProperty()</h3><blockquote><p>基本等同于<code>Object.defineProperty()</code>方法唯一不同是返回Boolean值</p></blockquote><ul><li><span style="color:red">注意:如果target不是 Object,抛出一个 TypeError</span></li><li>Boolean 值指示了属性是否被成功定义</li></ul><ol><li><code>target</code>:目标对象</li><li><code>propertyKey</code>:要定义或修改的属性的名称</li><li><code>attributes</code>:要定义或修改的属性的描述</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"x"</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span>Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment">//&#123;x: 2, y: 7&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Reflect-deleteProperty"><a href="#Reflect-deleteProperty" class="headerlink" title="Reflect.deleteProperty()"></a>Reflect.deleteProperty()</h3><blockquote><p>用于删除属性.类似<code>delete operator</code>但它是一个函数</p></blockquote><ul><li><span style="color:red">如果target不是Object,抛出一个 TypeError</span></li><li>返回<code>Boolean</code>值表明该属性是否被成功删除</li></ul><ol><li><code>target</code>:删除属性的目标对象</li><li><code>propertyKey</code>:需要删除的属性的名称</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span>Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>obj <span class="token comment">// &#123; y: 2 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>如果是数组:数组对象和下标</li><li>如果是一个空对象,删除属性,返回<code>true</code></li><li>如果属性不可配置<code>Object.freeze(&#123;foo: 1&#125;)</code>,则返回false</li></ol><h3 id="Reflect-has"><a href="#Reflect-has" class="headerlink" title="Reflect.has()"></a>Reflect.has()</h3><blockquote><p><code>Reflect.has(target, propertyKey)</code>作用与in操作符相同</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>返回一个boolean类型</li></ul><ol><li><code>target</code>:目标对象</li><li><code>propertyKey</code>:属性名,需要检查目标对象是否存在此属</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//如果该属性存在于原型链中,返回true</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token comment">// Proxy 对象的 .has() 句柄方法</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> k<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"door"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"doorbell"</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Reflect-get"><a href="#Reflect-get" class="headerlink" title="Reflect.get()"></a>Reflect.get()</h3><blockquote><p>该方法与从对象<code>(target[propertyKey])</code>中读取属性类似,但它是通过一个函数执行来操作的</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>返回属性的值</li></ul><ol><li><code>target</code>:需要取值的目标对象</li><li><code>propertyKey</code>:需要获取的值的键值</li><li><code>receiver</code>:如果target对象中指定了getter,receiver则为getter调用时的this值</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span>p<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> k<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> k <span class="token operator">+</span> <span class="token string">"bar"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"foo"</span><span class="token punctuation">)</span> <span class="token comment">// "foobar"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Reflect-set"><a href="#Reflect-set" class="headerlink" title="Reflect.set()"></a>Reflect.set()</h3><blockquote><p>在一个对象上设置一个属性</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>返回一个布尔值表示是否设置成功</li></ul><ol><li><code>target</code>:设置属性的目标对象</li><li><code>propertyKey</code>:设置的属性的名称</li><li><code>value</code>:设置的值</li><li><code>receiver</code>:如果遇到setter,receiver则为setter调用时的this值</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"prop"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>obj<span class="token punctuation">.</span>prop <span class="token comment">// "value"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Reflect-getOwnPropertyDescriptor"><a href="#Reflect-getOwnPropertyDescriptor" class="headerlink" title="Reflect.getOwnPropertyDescriptor()"></a>Reflect.getOwnPropertyDescriptor()</h3><blockquote><p>如果属性在对象中存在,则返回给定的属性的属性描述符.否则返回<code>undefined</code></p></blockquote><ul><li><span style="color:red">注意:如果目标不是<code>Object</code>,抛出一个 TypeError</span>而<code>Object.getOwnPropertyDescriptor</code>会将非对象强制转换成对象</li><li>如果在给定的目标对象中,则返回属性.如果存在,则返回 undefined</li></ul><ol><li>target:需要寻找属性的目标对象</li><li>propertyKey:获取自己的属性描述符的属性的名称</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">Reflect<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;value: "hello", writable: true, enumerable: true, configurable: true&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reflect-getPrototypeOf"><a href="#Reflect-getPrototypeOf" class="headerlink" title="Reflect.getPrototypeOf()"></a>Reflect.getPrototypeOf()</h3><blockquote><p>返回指定对象的原型</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>如果属性存在于给定的目标对象中，则返回属性描述符；否则，返回 undefined</li></ul><ol><li>target:需要寻找属性的目标对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// Object.prototype</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reflect-setPrototypeOf"><a href="#Reflect-setPrototypeOf" class="headerlink" title="Reflect.setPrototypeOf()"></a>Reflect.setPrototypeOf()</h3><blockquote><p>它可设置对象的原型(即内部的<code>[[Prototype]]</code>属性)为另一个对象或 null,如果操作成功返回true,否则返回 false</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>返回一个Boolean值证明已经初步成功设置</li></ul><ol><li><code>target</code>:设置目的的目标对象。</li><li><code>prototype</code>:对象的新原型(一个对象或null)</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">Reflect<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reflect-isExtensible"><a href="#Reflect-isExtensible" class="headerlink" title="Reflect.isExtensible()"></a>Reflect.isExtensible()</h3><blockquote><p>判断一个对象是否可扩展(即是否能够添加新的属性)</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>返回一个 Boolean 值表明该对象是否可扩展</li></ul><ol><li><code>target</code>:检查是否可扩展的目标对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> frozen <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Reflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>frozen<span class="token punctuation">)</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys()"></a>Reflect.ownKeys()</h3><blockquote><p>返回一个由目标对象自身的属性键组成的数组</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>由目标对象的自身属性键组成的 Array</li></ul><ol><li><code>target</code>:检查是否可扩展的目标对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>z<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// [ "z", "y", "x" ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reflect-preventExtensions"><a href="#Reflect-preventExtensions" class="headerlink" title="Reflect.preventExtensions()"></a>Reflect.preventExtensions()</h3><blockquote><p>阻止新属性添加到对象(例如:防止将来对对象的扩展被添加到对象中)</p></blockquote><ul><li><span style="color:red">注意:如果目标对象不是Object类型,则抛出TypeError</span></li><li>返回一个价值保证Boolean目标对象是否成功被设置为不可扩展</li></ul><ol><li><code>target</code>:阻止扩展的目标对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> empty <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Reflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token comment">//true</span>Reflect<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span>Reflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>proxy</title>
      <link href="/2021/12/03/proxy/"/>
      <url>/2021/12/03/proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><blockquote><ul><li>Proxy 对象用于创建一个对象的代理,从而实现基本操作的拦截和自定义(如属性查找,赋值,枚举,函数调用等)</li><li>目标对象既可以直接被操作,也可以通过代理来操作,<span style="color:red">但直接操作会绕过代理实施的行为</span></li><li>proxy在目标对象的外层搭建了一层拦截,<strong>外界对目标对象的某些操作,必须通过这层拦截</strong></li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>参数:<ol><li><code>target</code>:要使用Proxy包装的目标对象(可以是任何类型的对象,包括原生数组,函数,甚至另一个代理)</li><li><code>handler</code>:一个通常以函数作为属性的对象,各属性中的函数分别定义了在执行各种操作时代理p的行为</li></ol></li></ul><h3 id="traps-捕获器"><a href="#traps-捕获器" class="headerlink" title="traps(捕获器)"></a>traps(捕获器)</h3><blockquote><p>提供属性访问的方法:每个捕获器都对应一种基本操作,可以直接或者间接在代理对象上使用</p><p>每次代理对象上调用这些基本操作是,代理可以在这些操作传播到目标对象之前<strong>先调用捕获器函数,从而拦截并修改相应的行为</strong></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 被读取</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 被设置为 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>proxy<span class="token punctuation">.</span>name<span class="token comment">//name 被读取</span>proxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token comment">//name 被设置为 lisi</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//lisi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>proxy</code>读取属性的值时,实际执行的是<code>handler.get</code>:读取被代理对象的<code>target</code>属性</li><li><code>proxy</code>设置属性值时,实际上执行的是<code>handler.set</code>:读取被代理对象<code>target</code>属性</li><li>目标对象也会改变</li></ol><h3 id="Proxy-revocable"><a href="#Proxy-revocable" class="headerlink" title="Proxy.revocable()"></a>Proxy.revocable()</h3><blockquote><p><code>Proxy.revocable()</code>方法可以用来创建一个可撤销的代理对象</p></blockquote><ul><li>返回值:<ol><li>返回一个包含了代理对象本身和它的撤销方法的可撤销<code>Proxy</code>对象</li><li>返回值是一个对象,其结构为<code>&#123;&quot;proxy&quot;:proxy, &quot;revoke&quot;:revoke&#125;</code><ol><li><code>proxy</code>:表示新生成的代理对象本身</li><li><code>revole</code>:撤销方法,调用的时候不需要加任何参数</li></ol></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> revocable <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">revocable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"[["</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]]"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> revocable<span class="token punctuation">.</span>proxyproxy<span class="token punctuation">.</span>foo             <span class="token comment">// "[[foo]]"</span>revocable<span class="token punctuation">.</span><span class="token function">revoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment">// 抛出 TypeError</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="handler的代理范围"><a href="#handler的代理范围" class="headerlink" title="handler的代理范围"></a>handler的代理范围</h3><h4 id="handler-has"><a href="#handler-has" class="headerlink" title="handler.has()"></a><strong>handler.has()</strong></h4><ul><li>在判断代理对象是否拥有某个属性时触发该操作</li></ul><blockquote><p>返回一个布尔值</p></blockquote><ul><li><p>拦截:</p><ol><li>属性查询:<code>&quot;foo&quot; in proxy</code></li><li>继承属性查询: <code>foo in Object.create(proxy)</code></li><li><code>Reflect.has()</code></li></ol></li><li><p>TypeError</p><ol><li>如果目标对象的<strong>某一属性本身不可被配置</strong></li><li>如果目标对象为<strong>不可扩展对象</strong></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> handler1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'_'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> key <span class="token keyword">in</span> target  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> monster1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  _secret<span class="token operator">:</span> <span class="token string">'easily scared'</span><span class="token punctuation">,</span>  eyeCount<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> proxy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>monster1<span class="token punctuation">,</span> handler1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'eyeCount'</span> <span class="token keyword">in</span> proxy1<span class="token punctuation">)</span><span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'_secret'</span> <span class="token keyword">in</span> proxy1<span class="token punctuation">)</span><span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'_secret'</span> <span class="token keyword">in</span> monster1<span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:目标对象</li><li><code>prop</code>:需要检查是否存在的属性</li></ol><h4 id="handler-get"><a href="#handler-get" class="headerlink" title="handler.get()"></a><strong>handler.get()</strong></h4><ul><li>在读取代理对象的某个属性时触发该操作</li></ul><blockquote><p>可以返回任意值</p></blockquote><ul><li><p>拦截:</p><ol><li>访问属性:<code>proxy.bar</code></li><li>访问原型链上的属性:<code>Object.create(proxy)[foo]</code></li><li><code>Reflect.get()</code></li></ol></li><li><p>TypeError</p><ol><li>如果目标对象的<strong>某一属性本身不可被配置</strong></li><li>如果要访问的目标属性没有配置访问方法,即get方法是undefined的,则返回值必须为undefined</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:目标对象</li><li><code>property</code>:被获取的属性名</li><li><code>receiver</code>:Proxy或者继承Proxy的对象</li></ol><h4 id="handler-set"><a href="#handler-set" class="headerlink" title="handler.set()"></a><strong>handler.set()</strong></h4><ul><li>在给代理对象的某个属性赋值时触发该操作</li></ul><blockquote><p>默认返回true</p></blockquote><ul><li><p>拦截</p><ul><li>指定属性值:<code>proxy.foo = bar</code></li><li>指定继承者的属性值:<code>Object.create(proxy)[foo] = bar</code></li><li><code>Reflect.set()</code>  </li></ul></li><li><p>TypeError</p><ol><li>如果目标对象的<strong>某一属性本身不可被配置</strong></li><li>如果目标属性没有配置存储方法,即set方法是undefined的,则不能设置他的值</li><li>严格模式下,如果 set() 方法返回 false,那么也会抛出一个 TypeError 异常</li></ol></li></ul><ol><li><code>target</code>目标对象</li><li><code>property</code>将被设置的属性名或 Symbol</li><li><code>value</code>新属性值</li><li><code>receiver</code>最初被调用的对象.通常是proxy本身,但handler的set方法也有可能在原型链上,或以其他方式被间接地调用(因此不一定是proxy本身)</li></ol><h4 id="handler-getPrototypeOf"><a href="#handler-getPrototypeOf" class="headerlink" title="handler.getPrototypeOf()"></a><strong>handler.getPrototypeOf()</strong></h4><ul><li>在读取代理对象的原型时触发该操作</li></ul><blockquote><p>返回值必须是一个对象或者null</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.getPrototypeOf()</code></li><li><code>Reflect.getPrototypeOf()</code></li><li><code>\_\_proto\_\_</code></li><li><code>Object.prototype.isPrototypeOf()</code></li><li><code>instanceof</code></li></ul></li><li><p>TypeError:</p><ul><li><code>getPrototypeOf()</code>方法返回的不是对象也不是 null</li><li>目标对象是不可扩展的,且<code>getPrototypeOf()</code>方法返回的原型不是目标对象的原型</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target <span class="token operator">===</span> obj<span class="token punctuation">)</span>   <span class="token comment">// true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> handler<span class="token punctuation">)</span> <span class="token comment">// true</span>        <span class="token keyword">return</span> proto    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">===</span> proto<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:被代理的目标对象</li></ol><h4 id="handler-setPrototypeOf"><a href="#handler-setPrototypeOf" class="headerlink" title="handler.setPrototypeOf()"></a><strong>handler.setPrototypeOf()</strong></h4><ul><li>在设置代理对象的原型时触发该操作</li></ul><blockquote><p>成功修改了<code>[[Prototype]]</code>,<code>setPrototypeOf</code>方法返回true,否则返回 false或者抛出异常</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.setPrototypeOf()</code></li><li><code>Reflect.setPrototypeOf()</code></li></ul></li><li><p>TypeError</p><ul><li>如果 target 不可扩展, 原型参数必须与<code>Object.getPrototypeOf(target)</code>的值相同</li></ul></li></ul><ol><li><code>target</code>目标对象</li><li><code>prototype</code>对象新原型或为null</li></ol><h4 id="handler-isExtensible"><a href="#handler-isExtensible" class="headerlink" title="handler.isExtensible()"></a><strong>handler.isExtensible()</strong></h4><ul><li>在判断一个代理对象是否是可扩展时触发该操作</li></ul><blockquote><p>必须返回一个Boolean值或可转换成Boolean的值</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.isExtensible()</code></li><li><code>Reflect.isExtensible()</code></li></ul></li><li><p>TypeError:</p><ul><li>必须返回true或者为true的值,返回false和为false的值都会报错</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">isExtensible</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'called'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token comment">//也可以return 1;等表示为true的值</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="handler-preventExtensions"><a href="#handler-preventExtensions" class="headerlink" title="handler.preventExtensions()"></a><strong>handler.preventExtensions()</strong></h4><ul><li>在让一个代理对象不可扩展时触发该操作</li></ul><blockquote><p>返回一个布尔值</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.preventExtensions()</code>:将一个对象变为不可扩展,返回一个不可扩展的对象</li><li><code>Reflect.preventExtensions()</code></li></ul></li><li><p>TypeError</p><ul><li>如果目标对象是可扩展的,那么只能返回 false</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">preventExtensions</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'called'</span><span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:所要拦截的目标对象</li></ol><h4 id="handler-getOwnPropertyDescriptor"><a href="#handler-getOwnPropertyDescriptor" class="headerlink" title="handler.getOwnPropertyDescriptor()"></a><strong>handler.getOwnPropertyDescriptor()</strong></h4><ul><li>在获取代理对象某个属性的属性描述时触发该操作</li></ul><blockquote><p>必须返回一个对象或undefined</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.getOwnPropertyDescriptor()</code></li><li><code>Reflect.getOwnPropertyDescriptor()</code></li></ul></li><li><p>TypeError</p><ol><li>必须返回一个 object 或 undefined,否则TypeError</li><li>如果属性作为目标对象的不可配置的属性存在</li><li>如果<strong>属性不存在</strong>或者<strong>作为目标对象的属性存在</strong>,并且目标对象不可扩展</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'called: '</span> <span class="token operator">+</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// "called: a"</span><span class="token comment">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>目标对象</li><li><code>prop</code>返回属性名称的描述</li></ol><h4 id="handler-defineProperty"><a href="#handler-defineProperty" class="headerlink" title="handler.defineProperty()"></a><strong>handler.defineProperty()</strong></h4><ul><li>在定义代理对象某个属性时的属性描述时触发该操作</li></ul><blockquote><p>必须以一个Boolean返回,表示定义该属性的操作成功与否</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.defineProperty()</code></li><li><code>Reflect.defineProperty()</code></li><li><code>proxy.property=&#39;value&#39;</code></li></ul></li><li><p>TypeError</p><ol><li>目标对象不可扩展</li><li>不能添加或者修改一个属性为不可配置的</li><li>严格模式下, false 作为 handler.defineProperty 方法的返回值的话将会抛出 TypeError 异常</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">defineProperty</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'called: '</span> <span class="token operator">+</span> prop<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> desc <span class="token operator">=</span> <span class="token punctuation">&#123;</span> configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span> <span class="token comment">// "called: a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:目标对象</li><li><code>property</code>待检索其描述的属性名。</li><li><code>descriptor</code>定义或修改的属性的可能性</li></ol><h4 id="handler-deleteProperty"><a href="#handler-deleteProperty" class="headerlink" title="handler.deleteProperty()"></a><strong>handler.deleteProperty()</strong></h4><ul><li>在删除代理对象的某个属性时触发该操作</li></ul><blockquote><p>必须返回一个Boolean类型的值,表示该属性是否被成功删除</p></blockquote><ul><li><p>拦截:</p><ul><li>删除属性:<code>delete proxy.foo</code></li><li><code>Reflect.deleteProperty()</code></li></ul></li><li><p>TypeError</p><ul><li>如果目标对象的属性是不可配置的,那么该属性不能被删除</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">deleteProperty</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'called: '</span> <span class="token operator">+</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">delete</span> p<span class="token punctuation">.</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>目标对象</li><li><code>property</code>待删除的属性名</li></ol><h4 id="handler-ownKeys"><a href="#handler-ownKeys" class="headerlink" title="handler.ownKeys()"></a><strong>handler.ownKeys()</strong></h4><ul><li>在获取代理对象的所有属性键时触发该操作</li></ul><blockquote><p>ownKeys 方法必须返回一个可枚举对象</p></blockquote><ul><li><p>拦截</p><ul><li><code>Object.getOwnPropertyNames()</code></li><li><code>Object.getOwnPropertySymbols()</code></li><li><code>Object.keys()</code></li><li><code>Reflect.ownKeys()</code></li></ul></li><li><p>TypeError</p><ol><li>ownKeys 的结果必须是一个数组</li><li>数组的元素类型要么是一个 String ，要么是一个 Symbol</li><li>结果列表必须包含目标对象的所有不可配置(non-configurable),自有(own)属性的key</li><li>如果目标对象不可扩展,那么结果列表必须包含目标对象的所有自有(own)属性的key,不能有其它值</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">ownKeys</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// [ 'a', 'b', 'c' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:目标对象</li></ol><h4 id="handler-apply"><a href="#handler-apply" class="headerlink" title="handler.apply()"></a><strong>handler.apply()</strong></h4><ul><li>在调用一个<span style='color:red'>目标对象为函数</span>的代理对象时触发该操作</li></ul><blockquote><p>可以返回任何值</p></blockquote><ul><li><p>拦截</p><ul><li><code>proxy(...args)</code></li><li><code>Function.prototype.apply()</code> 和 <code>Function.prototype.call()</code></li><li><code>Reflect.apply()</code></li></ul></li><li><p>TypeError</p><ul><li>必须是一个函数</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> thisArg<span class="token punctuation">,</span> argumentsList</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>thisArg</code>被调用时的上下文对象</li><li><code>argumentsList</code>被调用时的参数数组</li></ol><h4 id="handler-construct"><a href="#handler-construct" class="headerlink" title="handler.construct()"></a><strong>handler.construct()</strong></h4><ul><li>在给一个目标对象为<span style='color:red'>构造函数</span>的代理对象构造实例时触发该操作,<span style='color:red'>用于初始化代理的目标对象自身必须具有[[构造]]内部方法</span></li></ul><blockquote><p>construct 方法必须返回一个对象</p></blockquote><ul><li>拦截以下操作<ul><li><strong>new proxy(…args)</strong></li><li><strong>Reflect.construct()</strong></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">construct</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> argumentsList<span class="token punctuation">,</span> newTarget</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>target</code>:目标对象</li><li><code>argumentsList</code>:constructor的参数列表</li><li><code>newTarget</code>:最初被调用的构造函数,就上面的例子而言是p</li></ol>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cheerio</title>
      <link href="/2021/11/30/cheerio/"/>
      <url>/2021/11/30/cheerio/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Cheerio包括了JQuery核心的子集.Cheerio从jQuery库中去除了所有DOM不一致性和浏览器尴尬的部分,揭示了它真正优雅的API.</p><p>Cheerio几乎能够解析任何的HTML和XMLdocument</p></blockquote><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> load <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cheerio"</span><span class="token punctuation">)</span><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul id="fruits">              &lt;li class="pear">pear111&lt;/li>              &lt;li id="apple">apple111                &lt;div class="redapple">redapple111&lt;div>              &lt;/li>            &lt;/ul></span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><blockquote><p><code>$(selector,[context],[root])</code></p></blockquote><ol><li><code>selector</code>会在<code>Context</code>范围内搜索,<code>Context</code>会在<code>Root</code>的范围内搜索</li><li><code>context</code>,<code>root</code>:<strong>字符串表达式</strong>,<strong>DOM元素</strong>,<strong>DOM元素的数组</strong>或者<strong>cheerio对象</strong></li><li>返回一个<code>cheerio</code>节点对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul .pear'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>text(textString)</code>:获得元素的text内容，包括子元素.</p><p>如果指定了<code>textString</code>会替换所有内容(包括dom节点)</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.redapple'</span><span class="token punctuation">,</span> <span class="token string">'#fruits'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//app</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>html(htmlString)</code>:获得元素的HTML字符串</p><p>如果<code>htmlString</code>有内容的话,将会<span style="color:red">替代原来的HTML</span></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;li class="mango">Mango&lt;/li>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//'&lt;li class="mango">Mango&lt;/li>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>$.root()</code>:拿到最上层的根节点(root)</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"fruits"</span><span class="token operator">></span>shuiguo      <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pear"</span><span class="token operator">></span>pear111<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"apple"</span><span class="token operator">></span>apple111        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"redapple"</span><span class="token operator">></span>app<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>attr(name,value)</code>:获得或者修改属性</p></blockquote><ol><li>在匹配的元素中只能获得第一元素的属性.</li><li>如果设置一个属性的值为null,则移除这个属性</li><li>可以传递<code>键值</code>或者<code>函数</code></li><li>不指定值则返回一个对象</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//查找属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul .pear'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//pear</span><span class="token comment">//增加一个属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'attr'</span><span class="token punctuation">,</span> <span class="token string">"laji"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//&#123; id: 'fruits', attr: 'laji' &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> config </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>puppeteer</title>
      <link href="/2021/11/30/puppeteer/"/>
      <url>/2021/11/30/puppeteer/</url>
      
        <content type="html"><![CDATA[<h2 id="爬取页面或者接口数据"><a href="#爬取页面或者接口数据" class="headerlink" title="爬取页面或者接口数据"></a>爬取页面或者接口数据</h2><blockquote><p>页面得是ssr(服务器渲染)<code>post</code>,<code>get</code>等请求都可以</p><p>使用<code>axios</code>库</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"axios"</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs/promises"</span><span class="token punctuation">)</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"https://music.163.com/#/song?id=30431367"</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"./bilibili.html"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Puppeteer简介"><a href="#Puppeteer简介" class="headerlink" title="Puppeteer简介"></a>Puppeteer简介</h2><blockquote><p><code>Puppeteer</code>是一个<code>Node</code>库,它提供了一个高级API来通过DevTools协议控制<code>Chrome</code>或<code>Chromium</code>.<code>Puppeteer</code>默认无头运行,但可以配置为运行完整(非无头)<code>Chrome</code>或<code>Chromium</code>.</p></blockquote><h3 id="使用特点"><a href="#使用特点" class="headerlink" title="使用特点"></a>使用特点</h3><ol><li>生成页面的屏幕截图和PDF</li><li>抓取SPA(单页应用程序)并生成预渲染内容(即<code>SSR</code>(服务器端渲染))</li><li>自动化表单提交,UI测试,键盘输入等</li><li>创建最新的自动化测试环境使用最新的JavaScript和浏览器功能,直接在最新版本的Chrome中运行您的测试</li><li>捕获站点的时间线跟踪以帮助诊断性能问题</li><li>测试Chrome扩展</li></ol><h3 id="puppeteer-core"><a href="#puppeteer-core" class="headerlink" title="puppeteer-core"></a>puppeteer-core</h3><ul><li>当您安装<code>Puppeteer</code>时,它会下载保证与API一起使用的最新版本的 <code>Chromium</code></li><li><code>puppeteer-core</code>包,一个默认不下载任何浏览器的<code>Puppeteer</code>版本</li></ul><blockquote><p>使用<code>puppeteer-core</code>需要传<code>google</code>所在的浏览器的绝对地址,属性<code>executablePath</code></p></blockquote><ul><li>使用<strong>绝对地址</strong>或者使用插件库<code>carlo</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"puppeteer-core"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> findChrome <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./node_modules/carlo/lib/find_chrome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> findChromePath <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findChrome</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> executablePath <span class="token operator">=</span> <span class="token keyword">await</span> findChromePath<span class="token punctuation">.</span>executablePath  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">//executablePath: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",</span>    executablePath<span class="token punctuation">,</span>    headless<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    defaultViewport<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"--start-fullscreen"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    ignoreHTTPSErrors<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"https://www.bilibili.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">screenshot</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"./bilibili.png"</span><span class="token punctuation">,</span>    type<span class="token operator">:</span> <span class="token string">"png"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="puppeteer概述"><a href="#puppeteer概述" class="headerlink" title="puppeteer概述"></a>puppeteer概述</h3><blockquote><p><code>Puppeteer</code>API是分层的,并反映了浏览器结构</p></blockquote><p><img src="puppeteer%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84.png" alt="puppeteer分层结构"></p><ol><li><code>Puppeteer</code>:使用DevTools协议与浏览器通信.</li><li><code>Browser</code>实例可以拥有多个浏览器上下文.</li><li><code>BrowserContext</code>实例定义了一个浏览会话并且可以拥有多个页面.</li><li><code>Page</code>至少有一个框架主框架.可能还有其他框架由iframe或框架标签创建.</li><li><code>Frame</code>至少有一个执行上下文——默认执行上下文——框架的JavaScript在这里执行.Frame可能具有与扩展相关联的附加执行上下文.</li><li><code>Worker</code>有一个单一的执行上下文并促进与WebWorkers的交互.</li></ol><blockquote><p>参考:<a href="https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#puppeteer-vs-puppeteer-core">https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#puppeteer-vs-puppeteer-core</a></p></blockquote><h2 id="关于使用"><a href="#关于使用" class="headerlink" title="关于使用"></a>关于使用</h2><h3 id="使用connect连接"><a href="#使用connect连接" class="headerlink" title="使用connect连接"></a>使用connect连接</h3><blockquote><p>启动带有所有插件和账号的chrome</p></blockquote><ol><li>首先打开chrome的快捷方式,在目标后输入<code>--remote-debugging-port=9222</code>.大概是下面这样</li></ol><blockquote><p><code>&quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot; --remote-debugging-port=9222</code></p><p>切记exe后面一定要有空格,这种方式也有缺点,可能会有连接不上的时候</p><p>他的url在:<code>http://localhost:9222/json/version</code>,可能打开浏览器两三次才会有连接</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer-core'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"axios"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9222/json/version"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> webSocketDebuggerUrl <span class="token punctuation">&#125;</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>data  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    browserWSEndpoint<span class="token operator">:</span> webSocketDebuggerUrl<span class="token punctuation">,</span>    defaultViewport<span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">...</span>  <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> config </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的工具函数</title>
      <link href="/2021/11/26/vue-zhong-de-gong-ju-han-shu/"/>
      <url>/2021/11/26/vue-zhong-de-gong-ju-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="vue中的工具函数"><a href="#vue中的工具函数" class="headerlink" title="vue中的工具函数"></a>vue中的工具函数</h2><h3 id="EMPTY-OBJ"><a href="#EMPTY-OBJ" class="headerlink" title="EMPTY_OBJ"></a>EMPTY_OBJ</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const EMPTY_OBJ: &#123; readonly [key: string]: any &#125; &#x3D; __DEV__  ? Object.freeze(&#123;&#125;)  : &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>Object.freeze(&#123;&#125;)</code>冻结最外面的对象,不能修改,<strong>被包裹的对象可以被修改</strong></li><li><code>EMPTY_OBJ</code>对象如果在开发环境会返回一个不可修改的空对象,如果修改就会报错</li></ul><h3 id="EMPTY-ARR"><a href="#EMPTY-ARR" class="headerlink" title="EMPTY_ARR"></a>EMPTY_ARR</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const EMPTY_ARR &#x3D; __DEV__ ? Object.freeze([]) : []<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>同上(有一个问题就是,使用<code>push</code>等方法时不能修改,所以<code>[]</code>用的还是多一点)</p></blockquote><h3 id="NOOP"><a href="#NOOP" class="headerlink" title="NOOP"></a>NOOP</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const NOOP &#x3D; () &#x3D;&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>方便压缩代码</li><li>可以方便判断(<code>component.ts</code>例子)</li></ol><h3 id="NO"><a href="#NO" class="headerlink" title="NO"></a>NO</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const NO &#x3D; () &#x3D;&gt; false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>永远返回一个<code>false</code>,方便压缩代码</p></blockquote><h3 id="isOn"><a href="#isOn" class="headerlink" title="isOn"></a>isOn</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const onRE &#x3D; &#x2F;^on[^a-z]&#x2F;export const isOn &#x3D; (key: string) &#x3D;&gt; onRE.test(key)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><code>onRE</code>:匹配一个开头是<code>on</code>第三个位置不是小写字母的字符</li><li><code>isOn</code>检查是否匹配</li></ol><ul><li>例如:<code>onClick</code>匹配,<code>onclick</code>不匹配</li></ul><h3 id="isModelListener"><a href="#isModelListener" class="headerlink" title="isModelListener"></a>isModelListener</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isModelListener &#x3D; (key: string) &#x3D;&gt; key.startsWith(&#39;onUpdate:&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>startsWith</strong>:匹配开头字符串是否与传入的字符串相同,第二个传一个从哪里开始的索引.</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">startsWith(searchString: string, position?: number): boolean;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>用于检查是不是以**onUpdate:**开头</p></blockquote><h3 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const extend &#x3D; Object.assign<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>用于合并对象,可以参考一下我之前写的<a href="https://zyjcould.ltd/2021/10/20/js-kao-bei-fang-shi/">https://zyjcould.ltd/2021/10/20/js-kao-bei-fang-shi/</a></p></blockquote><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const remove &#x3D; &lt;T&gt;(arr: T[], el: T) &#x3D;&gt; &#123;  const i &#x3D; arr.indexOf(el)  if (i &gt; -1) &#123;    arr.splice(i, 1)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>删除指定的元素</p></blockquote><ul><li><strong>indexOf</strong>:只会返回第一个匹配到的元素索引</li><li><strong>splice</strong>:第一个参数为删除元素下标,第二个为删除个数</li></ul><h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const hasOwnProperty &#x3D; Object.prototype.hasOwnPropertyexport const hasOwn &#x3D; (  val: object,  key: string | symbol): key is keyof typeof val &#x3D;&gt; hasOwnProperty.call(val, key)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>hasOwnProperty用来检测一个对象是否有特定的自身属性</p><blockquote><p>hasOwn是类型守卫函数,类型守卫函数是指在函数返回值类型中使用类型谓词的函数<br>该函数返回一个布尔类型</p></blockquote></blockquote><ol><li>is是类型谓词相当于<strong>boolean</strong>类型,表示一种类型判定,例如<code>x is T</code>即判定x类型是否为T(此时就能明白只有x类型是T的时候才返回true)</li><li>使用<code>keyof typeof val</code>,拿到所有对象的键的联合类型</li><li>使用<code>call</code>显示绑定第一个参数</li></ol><h3 id="对象转字符串"><a href="#对象转字符串" class="headerlink" title="对象转字符串"></a>对象转字符串</h3><blockquote><p>使用<code>toTypeString</code>,返回一个<code>[object object]</code>第二个<code>object</code>是动态的</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const objectToString &#x3D; Object.prototype.toStringexport const toTypeString &#x3D; (value: unknown): string &#x3D;&gt;  objectToString.call(value)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>截取字符,例如<code>[object RawType]</code>,会截取到<code>RawType</code></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const toRawType &#x3D; (value: unknown): string &#x3D;&gt; &#123;  &#x2F;&#x2F; extract &quot;RawType&quot; from strings like &quot;[object RawType]&quot;  return toTypeString(value).slice(8, -1)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="判断函数"><a href="#判断函数" class="headerlink" title="判断函数"></a>判断函数</h3><blockquote><p><strong>isArray</strong>使用数组自带的判断函数</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isArray &#x3D; Array.isArray<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>isMap</strong>,<strong>isSet</strong>重写了<code>toString</code>方法</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isMap &#x3D; (val: unknown): val is Map&lt;any, any&gt; &#x3D;&gt;  toTypeString(val) &#x3D;&#x3D;&#x3D; &#39;[object Map]&#39;export const isSet &#x3D; (val: unknown): val is Set&lt;any&gt; &#x3D;&gt;  toTypeString(val) &#x3D;&#x3D;&#x3D; &#39;[object Set]&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>isDate</strong>,<strong>isFunction</strong>对象类型使用<code>instanceof</code>,function也可以使用<code>val instanceof Function</code></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isDate &#x3D; (val: unknown): val is Date &#x3D;&gt; val instanceof Dateexport const isFunction &#x3D; (val: unknown): val is Function &#x3D;&gt;  typeof val &#x3D;&#x3D;&#x3D; &#39;function&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>isString</strong>,<strong>isSymbol</strong>基本数据类型使用<code>typeof</code></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isString &#x3D; (val: unknown): val is string &#x3D;&gt; typeof val &#x3D;&#x3D;&#x3D; &#39;string&#39;export const isSymbol &#x3D; (val: unknown): val is symbol &#x3D;&gt; typeof val &#x3D;&#x3D;&#x3D; &#39;symbol&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>isObject</strong>对象类型,排除<code>null</code>,null也是object类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isObject &#x3D; (val: unknown): val is Record&lt;any, any&gt; &#x3D;&gt;  val !&#x3D;&#x3D; null &amp;&amp; typeof val &#x3D;&#x3D;&#x3D; &#39;object&#39;&#x2F;&#x2F;用一组 T 类型的属性 K 构造一个类型type Record&lt;K extends keyof any, T&gt; &#x3D; &#123;  [P in K]: T;&#125;;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>isPromise</strong>判断是不是一个promise类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isPromise &#x3D; &lt;T &#x3D; any&gt;(val: unknown): val is Promise&lt;T&gt; &#x3D;&gt; &#123;  return isObject(val) &amp;&amp; isFunction(val.then) &amp;&amp; isFunction(val.catch)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>isPlainObject</strong>判断是不是一个纯碎的对象</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isPlainObject &#x3D; (val: unknown): val is object &#x3D;&gt;  toTypeString(val) &#x3D;&#x3D;&#x3D; &#39;[object Object]&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>因为<code>isObject([])</code>返回的也是true,但是<code>isPlainObject([])</code>是false</li><li>只有参数为对象<code>&#123;&#125;</code>时才会返回<code>true</code></li></ul><blockquote><p><strong>isIntegerKey</strong>:判断是不是数字型的字符串key值</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isIntegerKey &#x3D; (key: unknown) &#x3D;&gt;  isString(key) &amp;&amp;  key !&#x3D;&#x3D; &#39;NaN&#39; &amp;&amp;  key[0] !&#x3D;&#x3D; &#39;-&#39; &amp;&amp;  &#39;&#39; + parseInt(key, 10) &#x3D;&#x3D;&#x3D; key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>必须是字符串,不能是<code>NaN</code>第一个字符不能是<code>-</code>,<code>parseInt(key, 10)</code>返回该值的十进制数</li></ul><h3 id="makeMap-amp-amp-isReservedProp"><a href="#makeMap-amp-amp-isReservedProp" class="headerlink" title="makeMap&amp;&amp;isReservedProp"></a>makeMap&amp;&amp;isReservedProp</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export function makeMap(  str: string,  expectsLowerCase?: boolean): (key: string) &#x3D;&gt; boolean &#123;  &#x2F;&#x2F;创建一个没有值的空对象  const map: Record&lt;string, boolean&gt; &#x3D; Object.create(null)  const list: Array&lt;string&gt; &#x3D; str.split(&#39;,&#39;)  for (let i &#x3D; 0; i &lt; list.length; i++) &#123;    map[list[i]] &#x3D; true  &#125;  return expectsLowerCase ? val &#x3D;&gt; !!map[val.toLowerCase()] : val &#x3D;&gt; !!map[val]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>makeMap</code>将一组值保存在map对象中,根据<code>expectsLowerCase</code>返回一个函数</p></blockquote><ul><li>具体实现</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const isReservedProp &#x3D; &#x2F;*#__PURE__*&#x2F; makeMap(  &#x2F;&#x2F; the leading comma is intentional so empty string &quot;&quot; is also included  &#39;,key,ref,&#39; +    &#39;onVnodeBeforeMount,onVnodeMounted,&#39; +    &#39;onVnodeBeforeUpdate,onVnodeUpdated,&#39; +    &#39;onVnodeBeforeUnmount,onVnodeUnmounted&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cacheStringFunction"><a href="#cacheStringFunction" class="headerlink" title="cacheStringFunction"></a>cacheStringFunction</h3><blockquote><p>将字符串计算结果保存在闭包中的函数,为了避免相同值的重复计算</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const cacheStringFunction &#x3D; &lt;T extends (str: string) &#x3D;&gt; string&gt;(fn: T): T &#x3D;&gt; &#123;  const cache: Record&lt;string, string&gt; &#x3D; Object.create(null)  return ((str: string) &#x3D;&gt; &#123;    const hit &#x3D; cache[str]    return hit || (cache[str] &#x3D; fn(str))  &#125;) as any&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用<code>cacheStringFunction</code>的示例(可以使用debugger打断点)</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let count &#x3D; 0const reverse &#x3D; (str: string) &#x3D;&gt; &#123;  console.log(++count) &#x2F;&#x2F; reverse 只计算一次  return str.split(&#39;&#39;).reverse().join(&#39;&#39;)&#125;const stringReverse &#x3D; cacheStringFunction(reverse)stringReverse(&#39;abc&#39;)stringReverse(&#39;abc&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一次调用<code>fn(str)</code>时会将键值保存到<code>cache[str]</code>中,由于是一个闭包,执行之后内存并不会自己释放,如果下次处理相同的<strong>字符串</strong>,会直接调用缓存,而不是<strong>fn(str)</strong></li></ul><blockquote><p>参考:<a href="https://zhuanlan.zhihu.com/p/422499151">https://zhuanlan.zhihu.com/p/422499151</a></p></blockquote><h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><ul><li>如果理解了<strong>cacheStringFunction</strong>就会很容易理解</li></ul><blockquote><p><strong>camelize</strong>连字符命名转换成驼峰命名</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const camelizeRE &#x3D; &#x2F;-(\w)&#x2F;gexport const camelize &#x3D; cacheStringFunction((str: string): string &#x3D;&gt; &#123;  return str.replace(camelizeRE, (_, c) &#x3D;&gt; (c ? c.toUpperCase() : &#39;&#39;))&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用<code>()</code>分组捕获,<code>-</code>对应的捕获就是<code>_</code>,<code>(\w)</code>对应的捕获就是<code>c</code></li></ul><blockquote><p><strong>hyphenate</strong>驼峰命名转换成连字符命名</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const hyphenateRE &#x3D; &#x2F;\B([A-Z])&#x2F;gexport const hyphenate &#x3D; cacheStringFunction((str: string) &#x3D;&gt;  str.replace(hyphenateRE, &#39;-$1&#39;).toLowerCase())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>\B</code>是非单词边界,不匹配开头</li></ul><blockquote><p><strong>capitalize</strong>:首字母转大写</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const capitalize &#x3D; cacheStringFunction(  (str: string) &#x3D;&gt; str.charAt(0).toUpperCase() + str.slice(1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>toHandlerKey</strong>,小写字母转驼峰</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const toHandlerKey &#x3D; cacheStringFunction((str: string) &#x3D;&gt;  str ? &#96;on$&#123;capitalize(str)&#125;&#96; : &#96;&#96;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="hasChanged"><a href="#hasChanged" class="headerlink" title="hasChanged"></a>hasChanged</h3><blockquote><p>检验两个值是否发生变化</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const hasChanged &#x3D; (value: any, oldValue: any): boolean &#x3D;&gt;  !Object.is(value, oldValue)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>和<code>===</code>的区别,除了以下,别的都一样</li></ul><table><thead><tr><th>比较值</th><th>===</th><th>Object.is</th></tr></thead><tbody><tr><td>+0,-0</td><td>true</td><td>false</td></tr><tr><td>NaN,NaN</td><td>false</td><td>true</td></tr></tbody></table><h3 id="invokeArrayFns"><a href="#invokeArrayFns" class="headerlink" title="invokeArrayFns"></a>invokeArrayFns</h3><blockquote><p>依次调用数组中的函数,方便统一执行</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const invokeArrayFns &#x3D; (fns: Function[], arg?: any) &#x3D;&gt; &#123;  for (let i &#x3D; 0; i &lt; fns.length; i++) &#123;    fns[i](arg)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="def"><a href="#def" class="headerlink" title="def"></a>def</h3><blockquote><p>定义对象属性</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const def &#x3D; (obj: object, key: string | symbol, value: any) &#x3D;&gt; &#123;  Object.defineProperty(obj, key, &#123;    configurable: true,    enumerable: false,    value  &#125;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性描述符</li></ul><table><thead><tr><th>属性</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>value</td><td>当试图获取属性时所返回的值</td><td>undefined</td></tr><tr><td>writable</td><td>该属性是否可写</td><td>false</td></tr><tr><td>enumerable</td><td>该属性在for in循环中是否会被枚举</td><td>false</td></tr><tr><td>configurable 该属性是否可被删除</td><td>false</td><td></td></tr><tr><td>set()</td><td>属性的更新操作所调用的函数</td><td>false</td></tr><tr><td>get()</td><td>获取属性值时所调用的函数</td><td>false</td></tr></tbody></table><ol><li>数据描述符:enumerable,configurable,value,writable</li><li>存取描述符:enumerable,configurable,set(),get()</li><li>如果定义了set(),get()之后,再定义value,writable会<span style="color:red">报错</span></li></ol><h3 id="toNumber"><a href="#toNumber" class="headerlink" title="toNumber"></a>toNumber</h3><blockquote><p>将字符串型数字转换成<code>number</code>类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export const toNumber &#x3D; (val: any): any &#x3D;&gt; &#123;  const n &#x3D; parseFloat(val)  return isNaN(n) ? val : n&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="getGlobalThis"><a href="#getGlobalThis" class="headerlink" title="getGlobalThis"></a>getGlobalThis</h3><blockquote><p>获取全局<code>this</code>指向</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let _globalThis: anyexport const getGlobalThis &#x3D; (): any &#x3D;&gt; &#123;  return (    _globalThis ||    (_globalThis &#x3D;      typeof globalThis !&#x3D;&#x3D; &#39;undefined&#39;        ? globalThis        : typeof self !&#x3D;&#x3D; &#39;undefined&#39;        ? self        : typeof window !&#x3D;&#x3D; &#39;undefined&#39;        ? window        : typeof global !&#x3D;&#x3D; &#39;undefined&#39;        ? global        : &#123;&#125;)  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>第一次一定是<code>undefined</code></li><li>如果存在<code>gloablThis</code>,<code>self</code>,<code>window</code>,<code>global</code>中任意一个,就返回对应的this指向,没有则返回空对象(微信小程序)</li><li>第二次不需要再使用this判断</li></ol><h2 id="总结与感悟"><a href="#总结与感悟" class="headerlink" title="总结与感悟"></a>总结与感悟</h2><ol><li>参考:以上都是参考若川大佬以及自己的理解:<a href="https://juejin.cn/post/6994976281053888519#heading-7">https://juejin.cn/post/6994976281053888519#heading-7</a></li><li>关于开发环境和生产环境的区别</li><li>关于使用闭包达到缓存的目的让我觉得很神奇.(我太菜了)</li><li>关于ts中is谓词的使用,我的理解是布尔类型的加强</li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts类型和泛型的思考</title>
      <link href="/2021/11/25/ts-lei-xing-he-fan-xing-de-si-kao/"/>
      <url>/2021/11/25/ts-lei-xing-he-fan-xing-de-si-kao/</url>
      
        <content type="html"><![CDATA[<h2 id="联合类型-和交叉类型-amp"><a href="#联合类型-和交叉类型-amp" class="headerlink" title="联合类型(|)和交叉类型(&amp;)"></a>联合类型(|)和交叉类型(&amp;)</h2><blockquote><p>在基本数据类型中和对象中用<code>或和且</code>表示出的集合类型不同</p></blockquote><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><blockquote><p>我的理解:</p></blockquote><ul><li>在基本数据类型中,联合类型(|)表示<span style="color:red">或</span></li><li>交叉类型(&amp;)表示<span style="color:red">且</span>(<strong>其实就是never</strong>)</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type unionType &#x3D; number | string &#x2F;&#x2F;可以是number或者string类型的值type crossType &#x3D; number &amp; string &#x2F;&#x2F;不能赋任何值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><blockquote><p>对象是相对于属性来思考的</p><blockquote><p>交叉类型(&amp;)是是各个对象属性的<strong>且</strong><br>联合类型(|)是各个对象属性的<strong>或</strong></p></blockquote></blockquote><ul><li>首先定义两个接口:</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface A &#123;  x: number;  y: number;&#125;interface B &#123;  y: number;  z: number;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>交叉类型(&amp;):是A且B产生的新类型<code>crosstype</code>,实现了A,B中的所有属性</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type crossType &#x3D; A &amp; B&#x2F;&#x2F;交叉类型必须实现所有属性const obj:crossType&#x3D;&#123;  x: 1,  y: 2,  z: 3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>联合类型(|):<ul><li>可以理解为定义的类型是A类型或者B类型</li><li>联合类型可以是两个对象属性的交集(要实现所有属性,且只能访问公共属性)<ul><li>这种实现交集的方式我觉得没有意义</li></ul></li><li>也可以是单独一个对象(子集)</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type unionType &#x3D; A | Bconst obj1: Union &#x3D; &#123;  x: 1,  y: 2,  z: 3,&#125;&#x2F;&#x2F;交集:只能访问y.访问其它属性报错obj1.yconst obj2: Union &#x3D; &#123;  x: 1,  y: 2,&#125;&#x2F;&#x2F;可以访问所有属性obj2.xobj2.yconst obj3: Union &#x3D; &#123;  y: 2,  z: 3,&#125;&#x2F;&#x2F;同上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h2><blockquote><p><code>A extends B</code>可以理解为A是B的子集(一直都对)</p></blockquote><h3 id="作为约束泛型使用"><a href="#作为约束泛型使用" class="headerlink" title="作为约束泛型使用"></a>作为约束泛型使用</h3><blockquote><p>首先理解一点:<strong>是属性之间的比较</strong>.前者是后者的子集</p><blockquote><p>泛型T中的<code>length</code>的值必须是<code>string</code>的一个子集,<code>string</code>是所有字符串的集合</p></blockquote></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface point &#123;  length: string;&#125;function a&lt;T extends point&gt;(args: T) &#123;  console.log(args.length);&#125;&#x2F;&#x2F;可以使用多个不同的属性(相对于属性)&#x2F;&#x2F;但是必须实现所有约束的属性a(&#123;length:&quot;abc&quot;,joint:8&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>point</code>是一个对象,使用<code>extends</code>就是约束泛型的类型</li></ul><h3 id="extends-用作条件泛型"><a href="#extends-用作条件泛型" class="headerlink" title="extends 用作条件泛型"></a>extends 用作条件泛型</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Point &#123;  x: number  y: number&#125;type IsPointSubset&lt;T&gt; &#x3D; T extends Point ? Point : nevertype Result1 &#x3D; IsPointSubset&lt;&#123; x: 1; y: 2 &#125;&gt; &#x2F;&#x2F;Pointtype Result2 &#x3D; IsPointSubset&lt;&#123; x: 1; z: 2 &#125;&gt; &#x2F;&#x2F;never<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>像三元运算符一样,有这样的属性就返回前一个,没有返回后一个</p></blockquote><ul><li>参考:<a href="https://juejin.cn/post/6997266181082054664">https://juejin.cn/post/6997266181082054664</a></li></ul><h2 id="泛型中的工具类"><a href="#泛型中的工具类" class="headerlink" title="泛型中的工具类"></a>泛型中的工具类</h2><blockquote><p>是 TypeScript 内置的工具类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IPerson&#123;  name:string,  age:number&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于<strong>keyof</strong>:对象里面的键值对里的键<strong>key</strong>给罗列取出来,并把它们联合起来形成一种联合类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type personkeys&#x3D;keyof IPerson&#x2F;&#x2F;&quot;name&quot; | &quot;age&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h3><blockquote><p><code>Partial</code><strong>通过泛型让目标类型中的所有属性变为可选</strong></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IWhitePeople&#123;  face: &quot;white&quot;|&quot;black&quot;|&quot;yellow&quot;&#125;type People &#x3D; Partial&lt;IWhitePeople&gt;&amp;IPersonconst people:People&#x3D;&#123;  name:&quot;zhagnsan&quot;,  age:12&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Partial</code>的具体实现</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Partial&lt;T&gt; &#x3D; &#123;    [P in keyof T]?: T[P];&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>使用<code>keyof</code>拿到<code>T</code>所有的键组成联合类型</li><li>使用in遍历所有的联合类型拿到键<code>P</code>,赋一个可选符</li></ol><blockquote><p>衍生:也可以将可选类型转换为必选类型<strong>Required</strong>,只读类型也是如此</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Required&lt;T&gt; &#x3D; &#123;    [P in keyof T]-?: T[P];&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h3><blockquote><p><code>Pick</code><strong>通过泛型选择指定属性形成新的类型</strong></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type whitPeople &#x3D; IPerson&amp;Pick&lt;IWhitePeople,&quot;face&quot;&gt;const wPeople:whitPeople&#x3D;&#123;  name:&quot;jack&quot;,  age:19,  face:&quot;white&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Pick的具体实现</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Pick&lt;T, K extends keyof T&gt; &#x3D; &#123;    [P in K]: T[P]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><code>keyof T</code>:将T所有的键值联合成一个新的类型,用于检查K是否是T的键</li><li><code>K</code>是对<code>T</code>的一个约束:用<code>in</code>遍历<code>K</code>,遍历的结果P就是要保留的键,形成新的字面量</li></ol><h3 id="Omit"><a href="#Omit" class="headerlink" title="Omit"></a>Omit</h3><blockquote><p><code>Omit</code>:<strong>通过泛型删除指定属性</strong></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type chinese&#x3D; Omit&lt;IWhitePeople,&quot;face&quot;&gt;&amp;IPersonconst person1:chinese&#x3D;&#123;  name:&quot;zhangsan&quot;,  age:18,  language:&quot;Chinese&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Omit的具体实现</p></blockquote><ul><li>首先理解<code>Exclude</code>:如果<code>U</code>是<code>T</code>的一个约束,则返回<code>never</code>,否则返回本身</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Exclude&lt;T, U&gt; &#x3D; T extends U ? never : T;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Omit&lt;T, K extends keyof any&gt; &#x3D; Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>Exclude&lt;keyof T, K&gt;</code>只有本身为<code>K</code>才会返回never,其它元素都返回本身</li><li><code>Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;</code>使用<code>Pick</code>将所有的键值联合成一个新的字面量</li></ol><h2 id="typeof和infer"><a href="#typeof和infer" class="headerlink" title="typeof和infer"></a>typeof和infer</h2><blockquote><p>ts中的<code>typeof</code>和js中的<code>typeof</code>是有区别的</p></blockquote><ol><li>写运行代码的地方:<strong>返回出一个变量的类型字符串</strong></li><li>类型的判断:<strong>返回的是TS里的类型</strong></li></ol><blockquote><p>例如,我们可以这样写一个类型判断</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const people: People &#x3D; &#123;  name: &quot;zhagnsan&quot;,  age: 12,&#125;;type tpeople &#x3D; Pick&lt;typeof people,&quot;age&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>infer</strong>:推导作用的关键字,指待推导泛型</p></blockquote><ul><li>把<code>V</code>给标记了,等下你们给我推出这个<code>V</code>的类型然后让我用</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IPerson &#123;  name: string;  age: number;&#125;type person&lt;T&gt;&#x3D; T extends infer v ? v : neverconst Person:person&lt;IPerson&gt;&#x3D;&#123;  name:&quot;string&quot;,  age:12&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里看<code>T</code>和待推导泛型<code>v</code>是否是类型符合,如果符合,就返回v,否则<code>never</code></li><li>简单来说就是,泛型T和待推导v元素是不是都是相同的类型写法</li><li>这里将T和v进行对比,T符合v的位置,返回待推导v即T</li><li>再举一个例子:<code>&lt;T[]&gt;</code>和<code>(infer v)[]</code>类型也是符合</li></ul><blockquote><p>参考:<a href="https://zhuanlan.zhihu.com/p/361968852">https://zhuanlan.zhihu.com/p/361968852</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校园网通信</title>
      <link href="/2021/11/22/xiao-yuan-wang-tong-xin/"/>
      <url>/2021/11/22/xiao-yuan-wang-tong-xin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天和孟哥试了使用校园网进行互传文件,他说他在家一直这么用.我信了,因为他是孟哥.</p></blockquote><ul><li>总结一下问题<ol><li>在同一个校园网之间可以相互ping通,是没有问题的</li><li>登录校园网后,不同的运行商之间是ping不通的</li></ol></li></ul><h2 id="网络共享的设置"><a href="#网络共享的设置" class="headerlink" title="网络共享的设置"></a>网络共享的设置</h2><blockquote><p>打开wifi设置其属性为专用网络</p></blockquote><p><img src="wifi%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AE%BE%E7%BD%AE.png" alt="wifi属性的设置"></p><blockquote><p>打开网络共享中心</p></blockquote><p><img src="%E7%BD%91%E7%BB%9C%E5%92%8C%E5%85%B1%E4%BA%AB%E4%B8%AD%E5%BF%83%E7%9A%84%E8%AE%BE%E7%BD%AE.png" alt="网络和共享中心的设置"></p><ul><li>设置专用网络都为启用</li><li>还有所有网络设置,和专用网络很像</li></ul><blockquote><p>开启之后,如果ping通则可以互相通信</p></blockquote><h2 id="关于共享文件夹"><a href="#关于共享文件夹" class="headerlink" title="关于共享文件夹"></a>关于共享文件夹</h2><p><img src="%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.jpg" alt="共享文件夹"></p><ul><li>关于共享文件夹的<strong>共享</strong>设置,<span style="color:red">一定要设置成<code>everyone</code>才行</span></li></ul><h2 id="接收别人的共享文件"><a href="#接收别人的共享文件" class="headerlink" title="接收别人的共享文件"></a>接收别人的共享文件</h2><ul><li>在<strong>我的电脑</strong>菜单中右击选择<strong>添加一个网络位置</strong></li><li>然后一直下一页</li></ul><p><img src="%E6%8E%A5%E6%94%B6%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="接收共享文件夹"></p><blockquote><p>在输入框内输入对方的分享地址,即可.关于使用公网开一个端口,对方也能访问到</p></blockquote><ul><li>关于将阿里云盘映射到我的电脑(参考)<ul><li><a href="https://www.52pojie.cn/thread-1490131-1-1.html">https://www.52pojie.cn/thread-1490131-1-1.html</a></li><li><a href="https://www.aliyundrive.com/s/wLQfjyVMUq3">https://www.aliyundrive.com/s/wLQfjyVMUq3</a></li><li><img src="%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E6%98%A0%E5%B0%84.png" alt="阿里云盘的映射"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的正则表达式</title>
      <link href="/2021/11/18/js-zhong-de-zheng-ze-biao-da-shi/"/>
      <url>/2021/11/18/js-zhong-de-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">正则表达式</a></h2><blockquote><p>js正则语法</p></blockquote><ul><li>语法:</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>flags<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>语法糖:<code>/pattern/flags</code></li></ul><blockquote><p>关于flags参数:</p></blockquote><table><thead><tr><th>选项</th><th>参数</th></tr></thead><tbody><tr><td>g</td><td>全局匹配.找到所有匹配,而不是再第一个匹配结束</td></tr><tr><td>i</td><td>忽略字母大小写</td></tr><tr><td>m</td><td>多行,将(^和$)视为多行工作,不只是匹配整个输入字符串最开始和结束</td></tr><tr><td>s</td><td>dotAll模式,匹配任何字符串,例如<code>\n</code></td></tr><tr><td>u</td><td>uniCode,将模式视为Unicode序列点的序列</td></tr><tr><td>y</td><td>粘性匹配.从上次匹配成功的下个位置开始后续匹配.若下个相符内容不紧接在后,则不继续匹配</td></tr></tbody></table><blockquote><p>元字符的表达方式</p></blockquote><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>句号匹配任意单个字符除了换行符</td></tr><tr><td>[]</td><td>匹配方括号内的任意字符</td></tr><tr><td>[^]</td><td>匹配除了方括号里的任意字符</td></tr><tr><td>*</td><td>匹配&gt;=0个重复的再*号之前的字符</td></tr><tr><td>+</td><td>匹配&gt;0个重复的再+号之前的字符</td></tr><tr><td>?</td><td>标记?之间的字符为可选</td></tr><tr><td>(xyz)</td><td>匹配与xyz完全相等的字符</td></tr><tr><td>|</td><td>或,匹配符号前或后的任意字符</td></tr><tr><td>\</td><td>转义字符,用于匹配保留一些字符</td></tr><tr><td>^</td><td>从开始行开始匹配</td></tr><tr><td>$</td><td>从末端开始匹配</td></tr><tr><td>{n}</td><td>指定出现的次数,<code>/8&#123;n&#125;5/g</code>,指定8出现的次数</td></tr><tr><td>{n,}</td><td>指定至少出现的次数,<code>/8&#123;n,&#125;5/g</code>,指定8至少出现n次</td></tr><tr><td>{n,m}</td><td>指定至少出现n次,至多出现m次</td></tr><tr><td>\w</td><td>任意的本义字符,[0-9a-zA-Z_]的简写形式</td></tr><tr><td>\W</td><td>任意的非本义字符,除了[0-9a-zA-Z_]的字符</td></tr><tr><td>\d</td><td>等价于[0-9]</td></tr><tr><td>\D</td><td>等价于[^0-9]</td></tr><tr><td>\s</td><td>任意空白</td></tr><tr><td>\S</td><td>任意非空白</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>制表</td></tr><tr><td>(…)</td><td>代表一个捕获组,捕获括号中的匹配项</td></tr></tbody></table><h2 id="常用正则表示"><a href="#常用正则表示" class="headerlink" title="常用正则表示"></a><a href="#%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E7%A4%BA">常用正则表示</a></h2><blockquote><p>[ ]表示区间</p></blockquote><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>单个a或b或c</td></tr><tr><td>[^abc]</td><td>非a或b或c</td></tr><tr><td>[a-Z]</td><td>相当于[a-zA-Z],匹配任意的大小写字母</td></tr></tbody></table><blockquote><p>关于文件中的正则匹配</p></blockquote><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>.(css|less)$</code></td><td>以css或less结尾的文件</td></tr><tr><td><code>*.ts</code></td><td>所有以ts结尾的文件</td></tr><tr><td><code>**/index.html</code></td><td>所有文件下的index.html</td></tr></tbody></table><ul><li>一个*代表文件,两个**代表文件夹</li></ul><h2 id="使用正则匹配位置"><a href="#使用正则匹配位置" class="headerlink" title="使用正则匹配位置"></a>使用正则匹配位置</h2><blockquote><p><code>^ $ \b \B (?=p) (?!p)</code> 六个锚字符</p></blockquote><ul><li><p>把位置理解空字符,是对位置非常有效的理解方式</p></li><li><p>例如hello字符等价于:</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"hello"</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"h"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"e"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"l"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"l"</span> <span class="token operator">+</span> <span class="token string">"o"</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token string">"hello"</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"hello"</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^^hello?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="和"><a href="#和" class="headerlink" title="^和$"></a>^和$</h3><ul><li>^匹配开头</li><li>$匹配结尾</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> result<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//"#hello#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="b和-B"><a href="#b和-B" class="headerlink" title="\b和\B"></a>\b和\B</h3><p>\b是单词边界,具体就是\w和\W之间的位置,也包括\w和^之间的位置,也包括\w和$之间的位置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">"[JS] Lesson_01.mp4"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//"[#JS#] #Lesson_01#.#mp4#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="p-和-p"><a href="#p-和-p" class="headerlink" title="(?=p)和(?!p)"></a>(?=p)和(?!p)</h3><blockquote><p><code>?=p</code>p前面的位置,<code>?&lt;=p</code>:p后面的位置</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">"petter"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=p)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//#petter</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">"petter"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=p)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//p#etter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>?!p</code>:除了p前面的位置,匹配其它所有位置.<code>?!&lt;p</code>:除了p后面的位置,匹配其它所有位置</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">"petter"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;!p)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//#pe#t#t#e#r#</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">"petter"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!p)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//p#e#t#t#e#r#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则中-的作用"><a href="#正则中-的作用" class="headerlink" title="正则中()的作用"></a>正则中()的作用</h2><ol><li>分组:匹配连续出现的<code>ab</code>时<code>/(ab)+/</code></li><li>分支:多选分支结构<code>(p1|p2)</code></li></ol><blockquote><p>引用分组:使用相应API来引用分组</p></blockquote><ol><li>关于正则匹配的构造函数的全局属性:<code>$1,$2...$99</code>分别代表分组匹配到的参数</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"2021-12-12"</span><span class="token keyword">const</span> result1 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$<span class="token number">3</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//"12/12/2021"</span><span class="token comment">//等价</span><span class="token keyword">const</span> result2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> month <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token comment">//"12/12/2021"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>反向引用:在正则本身里引用分组,但只能引用之前出现的分组</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;\1\d&#123;2&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> stringArr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">"2017-06-12"</span><span class="token punctuation">,</span>   <span class="token string">"2017/06/12"</span><span class="token punctuation">,</span>   <span class="token string">"2017.06.12"</span><span class="token punctuation">,</span>   <span class="token string">"2017/06.12"</span><span class="token punctuation">]</span><span class="token keyword">const</span> result <span class="token operator">=</span> stringArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>例如<code>\1,\2...\99</code>,分别代表1-99的分组</li><li><span style="color:red">反向引用保证前后的分割符前后一致</span></li><li>引用不存在的分组,正则不会报错,匹配到反向引用的字符本身,例如<code>\2</code>表示对2进行了转义</li><li>括号嵌套:以<span style="color:red">左括号</span>为准</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((\d)(\d(\d)))</span><span class="token regex-delimiter">/</span></span><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"1231231233"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span> <span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">3</span> <span class="token punctuation">)</span> <span class="token comment">// 23</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">4</span> <span class="token punctuation">)</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>$1</code>匹配的是<code>((\d)(\d(\d)))</code></li><li><code>$2</code>匹配的是<code>(\d)</code></li><li><code>$3</code>匹配的是<code>(\d(\d))</code></li><li><code>$4</code>匹配的是<code>(\d)</code></li></ol><blockquote><p>非捕获分组<code>(?:)</code>:只想要括号最原始的功能,但不会引用它,即不在API里引用,也不在正则里反向引用</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:ab)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"ababa abbb ababab"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment">//["abab", "ab", "ababab"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><ol><li>没有回溯的匹配:<ul><li>例如:<code>/ab&#123;1,3&#125;c/</code>,匹配字符串<code>abbbc</code></li></ul></li><li>有回溯的匹配:<ul><li>例如:<code>/ab&#123;1,3&#125;c/</code>,匹配字符串<code>abbc</code></li><li>当匹配到第三个b时,发现接下来的字符串时”c”,就会回到之前的状态</li></ul></li><li>常见回溯的形式:贪婪量词,惰性量词,分支结构</li></ol><blockquote><p>本质:<span style="color:red">深度优先搜索算法</span>.倒退到之前的某一部着一过程,称之为<code>回溯</code></p></blockquote><h3 id="贪婪量词"><a href="#贪婪量词" class="headerlink" title="贪婪量词"></a>贪婪量词</h3><blockquote><p>例如<code>b&#123;1,3&#125;</code>:多个贪婪量词挨着,会按顺序优先匹配</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;1,3&#125;)(\d&#123;1,3&#125;)</span><span class="token regex-delimiter">/</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//["12345","123","45"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="惰性量词"><a href="#惰性量词" class="headerlink" title="惰性量词"></a>惰性量词</h3><blockquote><p>惰性量词就是在贪婪量词后面加个问号:<span style="color:red">尽可能少的匹配</span></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;1,3&#125;?)(\d&#123;1,3&#125;)</span><span class="token regex-delimiter">/</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// ["12345","1","345"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><blockquote><p>分支结构也是惰性的:<code>/can|candy/</code>,去匹配字符串”candy”,得到的结果是<code>&quot;can&quot;</code>.分支会一个一个尝试,如果前面的满足了,后面就不会再试验</p></blockquote><h2 id="正则相关的api"><a href="#正则相关的api" class="headerlink" title="正则相关的api"></a>正则相关的api</h2><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><blockquote><p>检测一个字符串是否匹配某个模式</p></blockquote><ul><li>返回值<ol><li>成功:true</li><li>失败:false</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"abc12345"</span><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\w+\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><blockquote><p>该方法再指定一个字符串中执行一个搜索匹配.匹配返回一个数组或者null</p><p>设置<code>g</code>或者<code>y</code>,<code>exec()</code>可对当字符串的多次匹配结果<strong>进行逐条遍历</strong>,(通过更新<code>lastIndex</code>).然而<code>match</code>只会匹配到返回的结果</p><p>只会返回第一个成功的匹配</p></blockquote><ul><li>返回值:<ol><li>成功:返回一个数组(包括index何input),并更新<code>lastIndex</code>属性<ul><li><code>index</code>:匹配到的字符位于原始字符串的基于0的索引值</li><li><code>input</code>:原始字符串</li><li><code>lastIndex</code>:下一次匹配开始的位置</li></ul></li><li>失败:返回null</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;).?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26,2018-09-12,2018-09-12"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//['2017-06-26,', '2017', '06', '26', index: 0, input: '2017-06-26,2018-09-12,2018-09-12', groups: undefined]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//['2018-09-12,', '2018', '09', '12', index: 11, input: '2017-06-26,2018-09-12,2018-09-12', groups: undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><blockquote><p>在字符串内检索指定的值,或找到一个或多个正则表达式的匹配.</p></blockquote><ul><li>返回值:<ol><li>存放匹配结果的数组.该数组内容很大程度依赖于<code>g</code></li><li>如果没找到匹配结果返回null</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"2017-06-262018-09-12"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//['2017-06-26', '2018-09-12']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><blockquote><p>用于检索字符串中指定的子字符串,或检索与正则表达式相匹配的子字符串</p></blockquote><ul><li>返回值<ol><li>成功:返回到匹配到子串的起始位置</li><li>失败:返回-1</li></ol></li></ul><blockquote><p>注意:不执行全局匹配,他将忽略<code>g</code></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"abc12345"</span><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><blockquote><p>方法使用指定的分隔符字符串将一个String对象分割成子字符串数组,以一个指定的分割字串来决定每个拆分的位置</p></blockquote><ul><li>参数:<ol><li><code>separator</code>:指定表示每个拆分应发生的点的字符串.separator 可以是一个字符串或正则表达式</li><li><code>limit</code>:限定返回的分割片段数量</li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\,</span><span class="token regex-delimiter">/</span></span><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26,2018-09-12,2018-09-12"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//['2017-06-26', '2018-09-12']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="replace和replaceAll"><a href="#replace和replaceAll" class="headerlink" title="replace和replaceAll"></a>replace和replaceAll</h3><blockquote><p>参数:</p></blockquote><ol><li>regexp|substr:正则表达式或者匹配的字符</li><li>newSubstr|function:要替换的字符或者函数</li></ol><table><thead><tr><th>function参数</th><th>解释</th></tr></thead><tbody><tr><td>match</td><td>匹配的子串</td></tr><tr><td>p1, p2, …</td><td>括号中的捕获组找到的第n个字符串</td></tr><tr><td>offset</td><td>被检查的整个字符串中匹配子字符串的偏移量</td></tr><tr><td>string</td><td>正在检查的整个字符串</td></tr></tbody></table><ul><li>不同:<ol><li>replace只会匹配第一个匹配到的字符,replaceAll会匹配所有字符</li><li>如果是正则,replaceAll必须加上全局修饰符<code>g</code></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//.xx</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"123xxx8add444"</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d+).+([a-z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span>   <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> str</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//123xxx8add</span><span class="token comment">//123</span><span class="token comment">//d</span><span class="token comment">//0</span><span class="token comment">//123xxx8add444  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><blockquote><p>可以将任意的字符串类型正则转换成正则对象</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://juejin.cn/post/6844903487155732494#heading-24">https://juejin.cn/post/6844903487155732494#heading-24</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调试</title>
      <link href="/2021/11/17/diao-shi/"/>
      <url>/2021/11/17/diao-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="开启自动调试"><a href="#开启自动调试" class="headerlink" title="开启自动调试"></a>开启自动调试</h2><blockquote><p>按下<strong>ctrl+shift+p</strong>打开命名面板,也可以在设置中打开</p></blockquote><ul><li>输入auto Attach,开启智能自动附加调试按钮</li><li>如果node_modukes中没有调试工具,会自动附加</li><li>参考:<a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging">https://code.visualstudio.com/docs/nodejs/nodejs-debugging</a></li></ul><blockquote><p>request,必填项,有两种类型,分别是<code>launch</code>和<code>attach</code></p><p><code>launch</code>:VSCode会启动一个独立的debug进入调试.如果是chrome,会打开一个全新不带任何插件的chrome</p><p><code>attach</code>:是你已经打开了程序,然后接通<code>Node.js</code>的内部调试协议进行调试</p></blockquote><ul><li>建议使用attach进行vscode调试</li></ul><h2 id="使用vscode调式js"><a href="#使用vscode调式js" class="headerlink" title="使用vscode调式js"></a>使用vscode调式js</h2><blockquote><p>调试js时先打入端点,进入到debug中会有调试方式进行选择</p></blockquote><ul><li>启用node调试时<code>node packageName</code>会在debug中生出设置的图标</li><li><img src="js%E8%B0%83%E8%AF%95.png" alt="js调试"></li><li>选择相应的调试方式会有相应的<strong>launch.json</strong>文件生成</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Attach"</span><span class="token punctuation">,</span>  <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">9229</span><span class="token punctuation">,</span>  <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"attach"</span><span class="token punctuation">,</span>  <span class="token property">"skipFiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"&lt;node_internals>/**"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"pwa-node"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>node13之后已经有了对<code>ES6</code>模块的支持,使用扩展名区分不同模块</p></blockquote><ol><li><code>.mjs</code>结尾的文件,node会将它作为ES6模块加载.</li><li><code>.cjs</code>结尾的文件,node会将他作为CommonJs的模块加载</li><li><code>.js</code>默认为CommonJs</li></ol><ul><li>写上对应的后缀就可以对对应的语法进行调节</li></ul><h2 id="使用vscode调试ts"><a href="#使用vscode调试ts" class="headerlink" title="使用vscode调试ts"></a><a href="#%E4%BD%BF%E7%94%A8vscode%E8%B0%83%E8%AF%95ts">使用vscode调试ts</a></h2><blockquote><p>首先是<code>@types/node</code>,<code>ts-node</code>,<code>typescript</code>三个包的下载,然后后有<code>TypeScript Debugger</code>插件的下载,用于生成<strong>launch.json</strong>文件</p></blockquote><ul><li>同样也是先打断点,在进行生成文件,选择就是选择TS debugger</li><li><img src="js%E8%B0%83%E8%AF%95.png" alt="ts调试"></li></ul><h2 id="使用chrome调试html文件"><a href="#使用chrome调试html文件" class="headerlink" title="使用chrome调试html文件"></a>使用chrome调试html文件</h2><ul><li>注意:如果不先选择调试文件,而是直接选择一个工作目录创建<code>launch.json</code>文件需要对文件选项进行配置</li></ul><blockquote><p>这里直接讲述打选择单独文件进行调试</p></blockquote><ul><li>在debug中运行下有创建<code>launch.json</code>,在工作区中弹出选项框,然后选择Chrome选项</li></ul><p><img src="chrom%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E8%B0%83%E8%AF%95.png" alt="chrom选择文件调试"></p><blockquote><p>chrom关于工作区配置调试文件</p></blockquote><p><img src="chrom%E8%B0%83%E8%AF%95html%E6%96%87%E4%BB%B6.png" alt="使用变量"></p><ul><li>打开chrom浏览器,在source选项卡上打上端点,刷新后会自动附加到vscode上</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>${wekspaceFolder}</td><td>当前工作区根目录</td></tr><tr><td>${file}</td><td>当前打开要进行调试的文件</td></tr><tr><td>sourceMaps</td><td>当前文件的映射</td></tr><tr><td>type</td><td>必填项,调试类型,例如<code>pwa-chrome</code></td></tr><tr><td>program</td><td>程序的启动入口</td></tr></tbody></table><blockquote><p>注意:<strong>debugger chrome</strong>已经弃用,vscode自带的<code>pwa-chrome</code></p></blockquote><ul><li>参考:<a href="https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes">https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes</a></li></ul><h3 id="关于ES6代码的调试"><a href="#关于ES6代码的调试" class="headerlink" title="关于ES6代码的调试"></a>关于ES6代码的调试</h3><blockquote><p>需要在<code>script</code>脚本中启用:&lt;script type=”module”&gt;</p><blockquote><p><span style="color:red">需要开启一个本地服务</span>支持ES6语法的import导入.不然会出现跨域错误</p></blockquote></blockquote><p><img src="LiveServer.png" alt="LiveServer"></p><ul><li>首先需要下载<code>LiveServe</code>插件,在插件中更改两个配置</li></ul><ol><li>将客户端浏览器改成chrome</li><li>自动附加改成true</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"liveServer.settings.ChromeDebuggingAttachment"</span><span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在调试文件时需要先将<code>Live Serve</code>服务开启,然后进行调试</p></blockquote><p><img src="%E9%85%8D%E5%90%88LiveServer.png" alt="配合LiveServe进行调试"></p><ul><li>注意开启服务的端口号要和LiveServer端口号一样</li><li>file选项并不会启动一个服务,而是用浏览器打开文件.</li></ul>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于webpack</title>
      <link href="/2021/11/14/guan-yu-webpack/"/>
      <url>/2021/11/14/guan-yu-webpack/</url>
      
        <content type="html"><![CDATA[<h2 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h2><blockquote><p>使用<code>npx ~</code>运行局部的脚本命令</p></blockquote><ul><li>在<code>scripts</code>配置脚本命令</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token property">"build"</span><span class="token operator">:</span><span class="token string">"webpack"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用<code>pnpm run build</code>可以构建</li><li>脚本会直接在<strong>bin</strong>目录下寻找脚本的命令</li></ul><blockquote><p>Webpack的依赖图</p></blockquote><ol><li>webpack在处理应用程序时,它会根据命令或者配置文件找到入口文件</li><li>从入口开始,会生成一个<span style="color:red">依赖关系图</span>,这个依赖关系图会包含应用程序中所需的所有模块</li><li>然后遍历图结构,打包一个个模块(根据文件的不同使用不同的loader来解析)</li></ol><h2 id="webpack构建"><a href="#webpack构建" class="headerlink" title="webpack构建"></a>webpack构建</h2><blockquote><p>首先webpack依赖于node,要想运行webpack一定要在node环境下运行</p></blockquote><ul><li>下载<code>webpack</code>和<code>webpack-cli</code></li><li>在文件<code>webpack.config.js</code>中构建项目</li></ul><h2 id="webpack配置项"><a href="#webpack配置项" class="headerlink" title="webpack配置项"></a><a href="#webpack%E9%85%8D%E7%BD%AE%E9%A1%B9">webpack配置项</a></h2><blockquote><p>导入和导出文件的选项</p></blockquote><ul><li><strong>entry</strong>:入口文件</li><li><strong>output</strong>:出口文件<ul><li><strong>path</strong>:打包后的文件夹(path是一个绝对路径)</li><li><strong>filename</strong>:打包后的文件名</li></ul></li><li><strong>target</strong>:目标选项(可以是<code>web</code>或者<code>node</code>),什么环境打包</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">"boundle.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>五个核心概念</p></blockquote><ul><li><strong>Entry</strong>:入口(Entry)指示 Webpack以哪个文件为入口起点开始打包,分析构建内部依赖图</li><li><strong>Output</strong>:输出（Output）指示Webpack打包后的资源bundles输出到那里去,以及如何命名</li><li><strong>Loader</strong>:loader让Webpack能够去处理那些非JavaScript文件（Webpack自身只理解javascript）</li><li><strong>plugins</strong>:插件（plugins）可以使用于执行范围更广的任务。插件的范围包括,从打包优化和压缩,一直到重新定义环境中的变量</li><li><strong>Mode</strong>:模式（Mode）指示Webpack使用相应模式的配置</li></ul><h3 id="model和devtool配置"><a href="#model和devtool配置" class="headerlink" title="model和devtool配置"></a>model和devtool配置</h3><blockquote><p>model默认值是<code>production</code>,可选:<code>&#39;none&#39; | &#39;development&#39; | &#39;production&#39;</code></p></blockquote><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>development</td><td>会将<code>DefinePlugin</code>中的<code>process.env.NODE_ENV</code>设置为<code>development</code>,为模块和chunk启用有效的名</td></tr><tr><td>production</td><td>会将<code>DefinePlugin</code>中的<code>process.env.NODE_ENV</code>设置为<code>production</code>,为模块和chunk启用确定性的混淆名,<code>FlagDependencyUsagePlugin</code>…</td></tr><tr><td>none</td><td>不适用任何默认优化</td></tr></tbody></table><ul><li>不同选项会开启不同的配置</li></ul><blockquote><p><code>devtool: &quot;source-map&quot;</code>,建立js映射文件,方便代码调试</p></blockquote><h2 id="module模块"><a href="#module模块" class="headerlink" title="module模块"></a>module模块</h2><blockquote><p>相关module模块中rules的配置,使用数组的形式</p></blockquote><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a><a href="#loader">loader</a></h3><blockquote><p>用于加载模块,例如<code>css</code>,<code>less</code>或者<code>png</code>等文件模块</p></blockquote><ul><li><strong>rules</strong>属性对应的值是一个数组<ul><li>数组中存放的是一个个的<code>Rule</code>,<code>Rule</code>是一个对象,对象中可以设置多个属性</li><li><strong>test</strong>:用于对resource进行匹配,对象中可以设置多个属性</li><li><strong>use</strong>:对应的属性:一般情况下是一个数组<ul><li><strong>loader</strong>:必须有一个 loader属性,对应的值是一个字符串</li><li><strong>options</strong>:可选的属性,值是一个字符串或者对象,值会被传入到loader中</li></ul></li><li><strong>include</strong>(匹配文件)和<strong>exclude</strong>(排除文件):字符串数组的形式</li></ul></li></ul><blockquote><p><code>css-loader</code>的使用</p></blockquote><ul><li><code>loader</code>可以用对<span style="color:red">模块的源代码</span>进行转换</li><li>我们可以<span style="color:red">将css文件也看成是一个模块</span>,我们是<span style="color:red">通过import来加载这个模块的</span></li><li>在加载这个模块时,<span style="color:red">webpack其实并不知道如何对其进行加载</span>,我们必须制定对应的loader来完成这个功能</li></ul><blockquote><p><code>style-loader</code>的使用</p></blockquote><ul><li><strong>css-loader</strong>只是负责将<code>.css</code>文件进行解析,并不会将解析之后的css插入到页面中</li><li><strong>style-loader</strong>完成解析后插入&lt;style&gt;的操作</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token comment">//1.loader的写法(语法糖)</span>        <span class="token comment">//loader:'css-loader'</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"style-loader"</span><span class="token punctuation">,</span>          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>          <span class="token string">"postcss-loader"</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>loader的两种写法<ol><li>直接使用<code>loader:&quot;css-loader&quot;</code></li><li>使用<code>use:[]</code>数组的形式可以传入配置</li></ol><ul><li>第一种:use的简写,传入多个<code>loader</code></li><li>第二种:use对象的写法,可以配置多个属性 </li></ul></li></ul><h3 id="css预处理"><a href="#css预处理" class="headerlink" title="css预处理"></a><a href="#css%E9%A2%84%E5%A4%84%E7%90%86">css预处理</a></h3><ol><li>首先下载<code>less</code>编译工具</li><li>下载<code>less-loader</code>工具转换<code>less</code>到<code>css</code></li></ol><blockquote><p>关于use中loader的顺序问题,是从最后一个解析到第一个,顺序不能错</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">rules<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    use<span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>loader<span class="token operator">:</span><span class="token string">"style-loader"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>loader<span class="token operator">:</span><span class="token string">"css-loader"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>loader<span class="token operator">:</span><span class="token string">"less-loader"</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="postCSS工具"><a href="#postCSS工具" class="headerlink" title="postCSS工具"></a><a href="#postcss%E5%B7%A5%E5%85%B7">postCSS工具</a></h3><blockquote><p>借助于js来转换css的适配,例如浏览器前缀等</p></blockquote><ul><li><p>构建PostCSS(导入其中需要的插件)</p><ol><li>查找<code>webpack</code>中的<strong>postcss-loader</strong></li><li>在项目中查找<code>postcss.config.js</code>文件</li></ol></li><li><p>下载工具<code>postcss、postcss-cli</code></p><ul><li><code>pnpm add postcss postcss-cli -D</code></li></ul></li></ul><blockquote><p>使用<code>postcss-loader</code>来进行处理</p></blockquote><ul><li>直接在<code>webpack.config.js</code>配置文件中处理</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">use<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token string">"style-loader"</span><span class="token punctuation">,</span>  <span class="token string">"css-loader"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    loader<span class="token operator">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>    options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      postcssOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        plugins<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"postcss-preset-env"</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用单独的配置文件<code>postcss.config.js</code>来配置</p></blockquote><ul><li><code>webpack</code>中只需要提供预处理,并不需要导入操作,webpack会自动查找并导入</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"postcss-preset-env"</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a><a href="#file-loader">file-loader</a></h3><blockquote><p>图片的导入</p></blockquote><ul><li>webpack中rules的配置</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|jpeg|gif|svg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>  use<span class="token operator">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意:<ol><li>使用<code>url()</code>可以直接引入图片</li><li>如果是<code>src</code>引入,<span style="color:red">切记要用import引入图片</span></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> mvc <span class="token keyword">from</span> <span class="token string">"../img/mvc封装式开发.png"</span><span class="token comment">//设置img元素的src</span><span class="token keyword">const</span> imgEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span>imgEl<span class="token punctuation">.</span>src <span class="token operator">=</span> mvcdocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>imgEl<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用<strong>options</strong>处理文件名称按照一定的规则进行显示:</p></blockquote><ul><li><p>使用<strong>PlaceHolders</strong>来完成,webpack提供了大量的<strong>PlaceHolders</strong>来显示不同的内容:</p><ul><li><p><a href="https://webpack.js.org/loaders/file-loader/#placeholders">https://webpack.js.org/loaders/file-loader/#placeholders</a></p></li><li><p><strong>[ext]</strong>: 处理文件的扩展名</p></li><li><p><strong>[name]</strong>: 处理文件的名称</p></li><li><p><strong>[hash]</strong>: 文件的内容,使用MD4的散列函数处理,生成的一个128位的hash值（32个十六进制）</p></li><li><p><strong>[contentHash]</strong>: 在file-loader中和[hash]结果是一致的（在webpack的一些其他地方不一样,后面会讲到）</p></li><li><p><strong>[hash:&lt;length&gt;]</strong>: 截图hash的长度,默认32个字符太长了</p></li><li><p><strong>[path]</strong>: 文件相对于webpack配置文件的路径</p></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  loader<span class="token operator">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>  options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    outputPath<span class="token operator">:</span> <span class="token string">"img"</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"[name]_[hash:6].[ext]"</span><span class="token punctuation">,</span>    <span class="token comment">//可以直接将包名和文件名分开</span>    <span class="token comment">//name: "img/[name]_[hash:6].[ext]"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><blockquote><p>可以将较小的文件,转成<strong>base64的URI</strong>(与<code>file-loader</code>相似)</p></blockquote><ul><li><p>使用base64转码可以减少http请求,小的图片转换base64之后可以和页面一起被请求</p><ul><li>注意:<code>大的图片也进行转换,反而会影响页面的请求速度</code></li></ul></li><li><p>但是在dist文件夹中,我们会看不到图片文件</p><ul><li>这是因为我的两张图片的大小分别是38kb和295kb</li><li>默认情况下<strong>url-loader</strong>会将所有的图片文件转成base64编码</li></ul></li></ul><blockquote><p>在<code>url-loader</code>中<code>options</code>属性<code>limit</code></p></blockquote><ul><li>下面的代码38kb的图片会进行base64编码,而295kb的不会</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|jpeg|gif|svg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>  use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  loader<span class="token operator">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>  options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    outputPath<span class="token operator">:</span> <span class="token string">"img"</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"[name]_[hash:6].[ext]"</span><span class="token punctuation">,</span>    <span class="token comment">//可以直接将包名和文件名分开</span>    <span class="token comment">//name: "img/[name]_[hash:6].[ext]"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack5新特性"><a href="#webpack5新特性" class="headerlink" title="webpack5新特性"></a>webpack5新特性</h2><blockquote><p><span style="color:red">资源模块类型(asset module type)</span>,来替代加载某些资源我们需要使用一些loader,比如<code>raw-loader</code> ,<code>url-loader</code>,<code>file-loader</code></p></blockquote><ul><li>四种新的资源模块类型<ul><li><strong>asset/resource</strong>:替代file-loader:发送一个单独的文件并导出URL</li><li><strong>asset/inline</strong>:替代url-loader:导出一个资源的 data URI</li><li><strong>asset/source</strong>:替代raw-loader:导出资源的源代码,之前通过使用实现</li><li><strong>asset</strong>:替代url-loader,并且配置资源体积限制实现:在导出一个data URI和发送一个单独的文件之间自动选择</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|jpeg|gif|svg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>  type<span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>  generator<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">"img/[name]_[hash:6][ext]"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  parser<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    dataUrlCondition<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      maxSize<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1024</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字体的打包-file-loader"><a href="#字体的打包-file-loader" class="headerlink" title="字体的打包(file-loader)"></a>字体的打包(file-loader)</h3><blockquote><p>这里使用webpack5新特性</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(eot|ttf|woff2?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  type<span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span>  generator<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">"font/[name]_[hash:6][ext]"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="plugin模块"><a href="#plugin模块" class="headerlink" title="plugin模块"></a>plugin模块</h2><blockquote><p>plugin贯穿webpack的生命周期</p></blockquote><ul><li>Loader是用于特定的模块类型进行转换；</li><li>Plugin可以用于执行更加广泛的任务,比如打包优化、资源管理、环境变量注入等</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">plugins<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CleanWebpackPlugin"><a href="#CleanWebpackPlugin" class="headerlink" title="CleanWebpackPlugin"></a>CleanWebpackPlugin</h3><blockquote><p>自动清除每次打包之后的文件,例如<code>dist</code></p></blockquote><h3 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h3><blockquote><p>在进行项目部署的时,生成对应的入口文件<code>index.html</code></p></blockquote><ul><li>默认情况下是根据<code>ejs的一个模块</code>来生成的</li><li>根据<code>html-webpack-plugin</code>中<code>default_index.ejs</code>模块来生成</li></ul><h4 id="自定义HTML模块"><a href="#自定义HTML模块" class="headerlink" title="自定义HTML模块"></a>自定义HTML模块</h4><ul><li>添加一个noscript标签,在用户的JavaScript被关闭时,给予响应的提示</li><li>开发vue或者react项目时,使用一个可以挂载后续组件的根标签 &lt;div id=”app”&gt;</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= BASE_URL %>favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&lt;%= htmlWebpackPlugin.options.title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>We're sorry but &lt;%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- built files will be auto injected --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>EJS模块填充数据</strong>:语法&lt;% 变量 %&gt;</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token string">"./public/index.html"</span><span class="token punctuation">,</span>  title<span class="token operator">:</span> <span class="token string">"webpack项目"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>template：指定我们要使用的模块所在的路径</li><li>title：在进行<code>htmlWebpackPlugin.options.title</code>读取时,就会读到该信息</li></ul><blockquote><p>使用<strong>DefinePlugin</strong>:在编译时创建配置的全局常量(<code>BASE_URL</code>),是一个webpack内置的插件</p></blockquote><ul><li>&lt;link rel=”icon” href=”&lt;%= BASE_URL %&gt;favicon.ico”&gt;</li><li>如果没有设置过这个常量值,会出现没有定义的错误</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token constant">BASE_URL</span><span class="token operator">:</span> <span class="token string">"'./'"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CopyWebpackPlugin"><a href="#CopyWebpackPlugin" class="headerlink" title="CopyWebpackPlugin"></a>CopyWebpackPlugin</h4><blockquote><p>在vue的打包过程中,将一些文件从public的目录下复制到dist文件夹中</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  patterns<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      from<span class="token operator">:</span> <span class="token string">"public"</span><span class="token punctuation">,</span>      to<span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>      globOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        ignore<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"**/index.html"</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>patterns</code>:复制的规则<ul><li>from:设置从哪一个源中开始复制</li><li>to:复制到打包的目录下(dist)的位置(可以省略)</li><li>globOptions:设置一些额外的选项,其中可以编写需要忽略的文件<ul><li>ignore:忽略的文件</li></ul></li></ul></li></ul><h2 id="babel工具的使用"><a href="#babel工具的使用" class="headerlink" title="babel工具的使用"></a>babel工具的使用</h2><blockquote><p>在编译间段(loader)中使用,babel可以将ES6以上的语法转换为ES5</p></blockquote><ul><li><p>将我们的<strong>源代码</strong>,转换成浏览器可以直接识别的<strong>另外一段源代码</strong>(可以看作一个编译器)</p><ul><li>Babel的工作流程:<ul><li>解析阶段</li><li>转换阶段</li><li>生成阶段</li></ul></li><li>具体的工作流程是经过<code>词法分析</code>生成<code>tokens数组</code>然后<code>语法分析AST(抽象语法树)</code>,遍历所有的AST,使用<code>插件(plugins)</code>生成新的<code>AST(抽象语法树)</code></li></ul></li><li><p>vue,react项目都是使用babel转换向后兼容的版本(vite是使用ESBuild)</p></li></ul><blockquote><p>babel本身和postcss一样可以作为一个独立的工具,不需要和webpack构建工具搭配起来使用(不过命令行中要写很多命令,麻烦)</p></blockquote><ul><li>babel的两个核心库:<code>@babel/cli</code>(命令行工具) <code>@babel/core</code>(核心代码)</li><li>有<code>@babel/core</code>核心代码库之后可以使用插件(可以自己写相关的插件)<ul><li><code>@babel/plugin-transform-arrow-functions</code>:转换箭头函数</li><li><code>@babel/plugin-transform-block-scoping</code>:转换const或let这样的词法作用域</li></ul></li></ul><blockquote><p>使用预设<code>@babel/preset-env</code>来加载插件,而不需要特定的指定加载插件,避免加载内容过多</p><blockquote><p>常见的预设有,<strong>env</strong>,<strong>react</strong>,<strong>TypeScript</strong></p></blockquote></blockquote><ul><li>使用<code>babel-loader</code>在webpack中进行构建</li></ul><blockquote><p>直接在webpack中配置所有选项</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span>  use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>    options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      presets<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"@babel/preset-env"</span>        <span class="token comment">//如果想传入其他参数</span>        <span class="token comment">//["@babel/preset-env",&#123;&#125;]</span>      <span class="token punctuation">]</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>另写一个<code>babel.config.js</code>文件,webpack会根据预设自动加载</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//webpack</span><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">&#125;</span><span class="token comment">//babel</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  presets<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"@babel/preset-env"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于webpack打包vue源码"><a href="#关于webpack打包vue源码" class="headerlink" title="关于webpack打包vue源码"></a>关于webpack打包vue源码</h2><h3 id="关于vue打包不同版本的解析"><a href="#关于vue打包不同版本的解析" class="headerlink" title="关于vue打包不同版本的解析"></a>关于vue打包不同版本的解析</h3><ul><li><code>production</code>是生产版本下的模式</li><li><code>runtime</code>是运行时</li></ul><blockquote><p><strong>vue(.runtime).global(.prod).js</strong></p></blockquote><ul><li>通过浏览器中的 &lt;script src=“…”&gt; 直接使用</li><li>我们之前通过CDN引入和下载的Vue版本就是这个版本</li><li>会暴露一个全局的Vue来使用</li></ul><blockquote><p><strong>vue(.runtime).esm-browser(.prod).js</strong></p></blockquote><ul><li>用于通过原生 ES 模块导入使用 (在浏览器中通过 &lt;script type=”module”&gt; 来使用)</li></ul><blockquote><p><strong>vue(.runtime).esm-bundler.js</strong></p></blockquote><ul><li>用于 webpack,rollup 和 parcel 等构建工具</li><li>构建工具中默认是vue.runtime.esm-bundler.js</li><li>如果我们需要解析模板template,那么需要手动指定vue.esm-bundler.js</li></ul><blockquote><p><strong>vue.cjs(.prod).js</strong></p></blockquote><ul><li>服务器端渲染使用</li><li>通过<code>require()</code>在<code>Node.js</code>中使用</li></ul><h3 id="vue中关于DOM元素的编写"><a href="#vue中关于DOM元素的编写" class="headerlink" title="vue中关于DOM元素的编写"></a>vue中关于DOM元素的编写</h3><ol><li><code>template</code>模板的方式:<ul><li>template: <code>&lt;h2&gt;傻瓜&lt;/h2&gt;</code></li><li>渲染:手动指定<strong>vue.esm-bundler.js</strong></li></ul></li><li>render函数方式渲染<ul><li>h函数可以直接返回一个虚拟节点,也就是Vnode节点</li></ul></li><li>通过<code>.vue</code>文件中的<code>template</code>来编写模板<ul><li><code>.vue</code>文件中的template</li><li>通过在<code>vue-loader</code>对其进行编译和处理</li></ul></li></ol><blockquote><p>Vue选择版本:<strong>运行时+编译器</strong>和<strong>仅运行时</strong></p></blockquote><ul><li><strong>运行时+编译器</strong>包含了对template模板的编译代码,更加完整,但是也更大一些</li><li><strong>仅运行时</strong>没有包含对template版本的编译代码,相对更小一些</li></ul><h4 id="关于App-vue的打包过程"><a href="#关于App-vue的打包过程" class="headerlink" title="关于App.vue的打包过程"></a>关于App.vue的打包过程</h4><blockquote><p>关于SFC(单文件组件),真是开发中大多数情况下都是使用这个</p></blockquote><ul><li>使用<code>vue-loader</code>编译<code>.vue文件</code>,<code>vue-loader</code>会调用<code>@vue/compiler-sfc</code>来对<code>template</code>进行解析</li><li>下载:<code>npm i vue-loader @vue/compiler-sfc -D</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  loader<span class="token operator">:</span><span class="token string">"vue-loader"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置Vue的插件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>VueLoaderPlugin<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vue-loader/dist/index"</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>以上配置可以支持<code>App.vue</code>的写法</li></ul><blockquote><p>关于编译时会出现的警告:<br><img src="https://www.zyjcould.ltd/img/markdownVueBuildError.png" alt="vue构建出现的警告"></p></blockquote><ul><li><p><span style="color:red">建议正确配置它们以便在最终包中获得适当的 tree-shaking</span></p></li><li><p><strong>VUE_OPTIONS_API</strong>:（启用/禁用选项API的支持,默认:true）</p></li><li><p><strong>VUE_PROD_DEVTOOLS</strong>:（启用/禁用devtools生产支持,缺省false）</p></li><li><p>在<code>DefinePlugin</code>插件中配置这两个属性,属于wenpack自带的插件</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token constant">BASE_URL</span><span class="token operator">:</span> <span class="token string">"'./'"</span><span class="token punctuation">,</span>  __VUE_OPTIONS_API__<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  __VUE_PROD__DEVTOOLS<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="devServe模块"><a href="#devServe模块" class="headerlink" title="devServe模块"></a>devServe模块</h2><blockquote><p><strong>contentBase</strong>属性:<code>contentBase:&quot;./public&quot;</code></p></blockquote><ul><li>在开发阶段不需要使用<code>copy-webpack-plugin</code>打包文件,而是直接以contentBase为相对位置查找资源位置.</li></ul><blockquote><p>设置host主机地址</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">devServer<span class="token operator">:</span><span class="token punctuation">&#123;</span>  host<span class="token operator">:</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>localhost</code>和<code>0.0.0.0</code>的区别</p></blockquote><ul><li>localhost本质是一个域名,通过DNS解析成127.0.0.1<ul><li>其实就是一个<strong>回环地址</strong>,不需要经过数据链路层,物理层,直接在网络层就能获取数据</li><li>例如监听127.0.0.1,在同一网段下的主机中,通过ip地址是不能访问的</li></ul></li><li>0.0.0.0:监听所有IPV4上所有的地址,根据端口找到不同的程序<ul><li>监听0.0.0.0时,同一个网段下的主句,可以通过ip地址访问</li></ul></li></ul><blockquote><p>port,open,compress</p></blockquote><ul><li><strong>port</strong>设置监听的端口,默认是8080</li><li><strong>open</strong>设置是否打开浏览器,默认false</li><li><strong>compress</strong>是否为静态文件开启<code>gzip compression</code><ul><li>默认是false.</li><li>在响应头中<code>Content-Encoding:gzip</code></li></ul></li></ul><h3 id="HMR-热模块替换"><a href="#HMR-热模块替换" class="headerlink" title="HMR(热模块替换)"></a>HMR(热模块替换)</h3><blockquote><p>不刷新整个页面,替换,添加,删除模块.而立即在浏览器更新</p></blockquote><ul><li><code>webpack-dev-server</code>已经支持HMR,(只要开启即可)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">devServer<span class="token operator">:</span><span class="token punctuation">&#123;</span>  hot<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>由于没有指定哪一个模块热更新,需要手动实现<code>module.hot.accpet</code></p></blockquote><ul><li>不过在大型框架中已经有包替我们实现好,例如<code>vue-loader</code></li></ul><blockquote><p>关于HMR的原理</p></blockquote><ul><li><code>webpack-dev-server</code>会创建两个服务：提供静态资源的服务<code>express</code>发送http请求和Socket服务<code>net.Socket</code><ul><li><code>express server</code>负责直接提供静态资源的服务<span style="color:red">打包后的资源直接被浏览器请求和解析</span></li><li><code>HMR Socket Server</code>负责监听模块的变化<ul><li>会生成两个文件:<code>.json</code>文件是对js需要更改的文件模块的映射</li><li><code>.js</code>是更新后端文件</li></ul></li></ul></li></ul><p><img src="https://www.zyjcould.ltd/img/markdownHMR.png" alt="HMR"></p><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string">"^/api"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    target<span class="token operator">:</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">,</span>    pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"^/api"</span><span class="token operator">:</span> <span class="token string">""</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    secure<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用代理服务器解决开发中的跨域问题</p></blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>target</td><td>表示的是代理到的目标地址</td></tr><tr><td>pathRewrite</td><td>使用此属性可以删除写入的<code>/api</code></td></tr><tr><td>secure</td><td>默认情况下不接受转发到https服务器上,如果希望支持使用false</td></tr><tr><td>changeOrigin</td><td>是否更新代理后请求的headers中的host地址</td></tr></tbody></table><h2 id="resolve模块"><a href="#resolve模块" class="headerlink" title="resolve模块"></a>resolve模块</h2><blockquote><p>通常是用来解析文件的路径</p></blockquote><ul><li>关于webpack可以解析的路径<ul><li><strong>绝对路径</strong>:可以直接解析</li><li><strong>相对路径</strong>:在 import/require 中给定的相对路径,会拼接此上下文路径,来生成模块的绝对路径</li><li><strong>模块路径</strong>:<ul><li>默认值是<code>[&#39;node_modules&#39;]</code>,默认会在这个包里查找文件</li><li>使用<code>alias</code>配置别名的方式来替换初识模块路径</li></ul></li></ul></li></ul><blockquote><p>extensions和alias配置</p></blockquote><ul><li>extensions是解析到文件时自动添加扩展名：<ul><li>默认值是 <code>[&#39;.wasm&#39;, &#39;.mjs&#39;, &#39;.js&#39;, &#39;.json&#39;]</code></li><li>所以如果我们代码中想要添加加载 .vue 或者 jsx 或者 ts 等文件时,我们必须自己写上扩展名</li></ul></li><li>alias配置别名<ul><li>如果项目结构比较深,可以使用别名简化</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">'@'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化环境配置"><a href="#优化环境配置" class="headerlink" title="优化环境配置"></a>优化环境配置</h2><blockquote><p>开发环境性能优化</p></blockquote><ul><li>优化打包构建速度<ul><li>HMR</li></ul></li><li>优化代码调试<ul><li>source-map</li></ul></li></ul><blockquote><p>生产环境性能优化</p></blockquote><ul><li>优化打包构建速度 <ul><li>oneOf</li><li>babel缓存</li><li>多进程打包<ul><li>externals</li></ul></li><li>dll</li></ul></li><li>优化代码运行的性能<ul><li>缓存(hash-chunkhash-contenthash)</li><li>tree shaking</li><li>code split</li><li>懒加载/预加载</li><li>PWA</li></ul></li></ul><h3 id="devtools配置"><a href="#devtools配置" class="headerlink" title="devtools配置"></a>devtools配置</h3><blockquote><p>[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</p><blockquote><p>内联和外部的区别:外部生成映射的文件,内联没有.内联构建速度更快</p></blockquote></blockquote><ul><li><strong>source-map</strong>:外部<ul><li>错误代码的准确信息和源代码错误位置</li></ul></li><li><strong>inline-source-map</strong>:内联<ul><li>错误代码的准确信息和源代码错误位置</li></ul></li><li><strong>hidden-source-map</strong>:外部<ol><li>错误代码的错误原因,但是但是没有错误位置</li><li>不能追踪源代码的错误,只能提示到构建后的代码的错误位置</li></ol></li><li><strong>eval-source-map</strong>:内联<ol><li>每一个文件都生成对应的source-map,都在eval</li><li>错误代码的准确信息和源代码错误位置</li></ol></li><li><strong>nosources-source-map</strong>:外部<ul><li>错误代码的准确信息,但是没有任何源代码的信息</li></ul></li><li><strong>cheap-source-map</strong>:外部<ol><li>错误代码的准确信息和源代码错误位置</li><li>只能精确到行</li></ol></li><li><strong>cheap-module-source-map</strong>:外部  <ol><li>错误代码的准确信息和源代码错误位置</li><li>module会将loader的source map加入</li></ol></li></ul><blockquote><p>开发环境:速度和友好的调式</p></blockquote><ul><li>速度:<code>eval&gt;inline&gt;cheap&gt;...</code><ul><li>eval-cheap-source-map</li><li>eval-source-map</li></ul></li><li>调试:<ul><li>souce-map</li><li>cheap-module-source-map</li><li>cheap-souce-map</li></ul></li></ul><blockquote><p>生产环境下不使使用内,内联会使代码变的更大</p></blockquote><ul><li>nosources-source-map</li><li>hidden-source-map</li></ul><h3 id="Oneof"><a href="#Oneof" class="headerlink" title="Oneof"></a>Oneof</h3><blockquote><p>使用Oneof加载loader,这里的loader只会匹配一个,不能有两个配置处理同一种文件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//复用loader</span><span class="token keyword">const</span> commonCssloader <span class="token operator">=</span> <span class="token punctuation">[</span>  MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>  <span class="token string">"css-loader"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token comment">//还需再package.json中定义browerslist,</span>  <span class="token comment">//或者.browerslist文件</span>  loader<span class="token operator">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>  options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    indent<span class="token operator">:</span> <span class="token string">"postcss"</span><span class="token punctuation">,</span>    <span class="token function-variable function">plugins</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"postcss-preset-env"</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">oneOf<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>commonCssloader<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>commonCssloader<span class="token punctuation">,</span><span class="token string">"less-loader"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><blockquote><p>babal缓存:<code>cacheDirectory:true</code>.解析js文件时使用</p></blockquote><h4 id="文件名的哈希"><a href="#文件名的哈希" class="headerlink" title="文件名的哈希"></a><a href="#file-loader">文件名的哈希</a></h4><ul><li><strong>hash</strong>:每次webpack构建时会生成一个唯一的hash值<ol><li>问题:因为js和css同时使用一个hash值</li><li>如果重新打包,会导致所有的缓存失效</li></ol></li><li><strong>chunkhash</strong>:根据chunk生成的hash值。如果打包来源于同一个chunk,那么hash值就一样<ol><li>问题：js和css的hash值还是一样的</li><li>因为css是在js中被引入的,所以同属于一个chunk</li></ol></li><li><strong>contenthash</strong>:根据文件的内容生成hash值。不同文件的hash值一定不一样</li></ul><blockquote><p>例如:<code>css/built.[contenthash:10].css</code></p></blockquote><h3 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree-shaking"></a>tree-shaking</h3><blockquote><p><strong>tree shaking</strong>:去除无用代码</p></blockquote><ul><li>前提:<ol><li>必须使用ES6模块化 </li><li>开启production环境</li></ol></li><li>配置:在<code>package.json</code>中配置<code>sideEffects</code>属性<ul><li><code>&quot;sideEffects&quot;:false</code>,所有的代码都沒有副作用(都可以進行tree shaking)<ul><li>但是可能会把<code>css/@babel/polyfil</code>(有副作用)文件干掉</li></ul></li><li><code>&quot;sideEffects&quot;:[&quot;*.css&quot;,&quot;*.less&quot;]</code></li></ul></li></ul><h3 id="code-split-代码分割"><a href="#code-split-代码分割" class="headerlink" title="code split(代码分割)"></a>code split(代码分割)</h3><ul><li>多入口:每有一个入口就会输出一个js入口文件</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  index<span class="token operator">:</span> <span class="token string">"./src/js/index.js"</span><span class="token punctuation">,</span>  test<span class="token operator">:</span><span class="token string">"./src/js/test.js"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以将<code>node_modules</code>中的代码单独打包一个chunk最终输出.自动分析多入口chunk中,有没有公共的文件.如果有会打包成一个公共的文件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">optimization<span class="token operator">:</span><span class="token punctuation">&#123;</span>  splitChunks<span class="token operator">:</span><span class="token punctuation">&#123;</span>    chunks<span class="token operator">:</span><span class="token string">"all"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lazy-loading"><a href="#lazy-loading" class="headerlink" title="lazy loading"></a>lazy loading</h3><ul><li>懒加载(现在es6已经支持):当文件需要用的时候才加载</li><li>预加载prefetch:等其他资源加载完毕,等浏览器空闲,再偷偷加载资源</li><li>正常加载可以认为是并行加载(同一时间可以加载多个文件)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>mul<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><blockquote><p><code>workbox-webpack-plugin</code>:渐进式网络开发应用程序</p></blockquote><ol><li>帮助serviceworker快速启动</li><li>删除旧的serviceworker</li><li>生成一个serviceworker配置文件</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">WorkboxWebpackPlugin<span class="token punctuation">.</span>GenerateSW</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> clientsClaim<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> skipWaiting<span class="token operator">:</span><span class="token boolean">true</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多进程打包"><a href="#多进程打包" class="headerlink" title="多进程打包"></a>多进程打包</h3><blockquote><p>进程启动大概约600ms,进程通信也有开销.只有工作消耗时间比较长,才需要多进程打包</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">use<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    loader<span class="token operator">:</span><span class="token string">"thread-loader"</span><span class="token punctuation">,</span>    options<span class="token operator">:</span><span class="token punctuation">&#123;</span>      workers<span class="token operator">:</span><span class="token number">2</span><span class="token comment">//进程2个</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h3><blockquote><p>拒绝某个包被打包起来</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>  externals<span class="token operator">:</span><span class="token punctuation">&#123;</span>    jQuery<span class="token operator">:</span><span class="token string">"jQuery"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dll"><a href="#dll" class="headerlink" title="dll"></a>dll</h3><blockquote><p>使用dll技术,对某些库(第三方库:jquery、react、vue…)进行单独打包</p></blockquote><ul><li>直接运行webpack时,默认查找 <code>webpack.config.js</code> 配置文件</li><li>需求：需要运行<code>webpack.dll.js</code>文件:<code>webpack --config webpack.dll.js</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> resolve <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 最终打包生成的[name] --> jquery</span>    <span class="token comment">// ['jquery'] --> 要打包的库是jquery</span>    jquery<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'jquery'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dll'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    library<span class="token operator">:</span> <span class="token string">'[name]_[hash]'</span> <span class="token comment">// 打包的库里面向外暴露出去的内容叫什么名字</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 打包生成一个 manifest.json --> 提供和jquery映射</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">'[name]_[hash]'</span><span class="token punctuation">,</span> <span class="token comment">// 映射库的暴露的内容名称</span>      path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dll/manifest.json'</span><span class="token punctuation">)</span> <span class="token comment">// 输出文件路径</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  mode<span class="token operator">:</span> <span class="token string">'production'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不同环境的区分"><a href="#不同环境的区分" class="headerlink" title="不同环境的区分"></a>不同环境的区分</h2><blockquote><p>配置相同的入口文件,配置不同的脚本参数区分他们</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token property">"build"</span><span class="token operator">:</span><span class="token string">"webpack --config ./config/prod.config --env production"</span><span class="token punctuation">,</span>  <span class="token property">"serve"</span><span class="token operator">:</span><span class="token string">"webpack serve --config ./config/dev.config"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>区分环境的配置</p></blockquote><ul><li>将文件的共同部分分离<ul><li><code>webpack.comm.conf.js</code>:开发和生产环境的共同部分</li><li><code>webpack.dev.conf.js</code>:开发环境的配置</li><li><code>webpack.prod.conf.js</code>:生产环境的配置</li></ul></li><li>用到<code>webpack-merge</code>包将代码整合<ul><li>merge函数第一个传入要整合的对象,第二个为自己特有配置编写</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>merge<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.comm.config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>入口文件(<code>entry</code>)的解析规则</p></blockquote><ul><li>如果将webpack写在config目录中,<span style="color:red">并不需要</span>将<code>entry:./src/main.js</code>改成<code>entry:../src/main.js</code></li><li>入口文件与webpack暴露出的一个api<code>context</code>有关</li><li><code>context</code>默认是解析入口和加载器<code>loader</code></li><li>所以入口文件的解析默认是webpack的启动目录</li></ul>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http</title>
      <link href="/2021/11/08/ji-suan-ji-wang-luo-ying-yong-ceng/"/>
      <url>/2021/11/08/ji-suan-ji-wang-luo-ying-yong-ceng/</url>
      
        <content type="html"><![CDATA[<h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><ul><li>应用进程交换的报文类型,如<strong>请求报文</strong>和<strong>响应报文</strong></li><li>各种报文类型的语法,如报文中各个字段极其响应描述</li><li>字段的语义,即包含在字段中的各个字段极其详细描述</li><li>进程何时,如何发送报文,以及对报文进行响应的规则</li></ul><blockquote><p>应用层协议只是网络应用的一部分.应用层的许多协议都是基于客户服务其方式</p></blockquote><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><blockquote><p>DNS-从域名解析出ip地址</p></blockquote><ul><li>把待解析的域名放在DNS请求报文中,以UDP用户数据报方式发给本地域名服务器.<ul><li>本地域名服务器找到域名后,把对应的ip地址放在回答报文中返回</li><li>应用进程获得目的主机的ip地址后即可进行通信</li></ul></li><li>若本地域名服务器不能回答该请求<ul><li>则此服务器端暂时成为DNS的另一个客户,并向其它域名发送查询请求</li></ul></li></ul><blockquote><p>DNS高效率:DNS的大部分名字都在本地进行解析,仅少量的解析需要在互联网上通信.</p></blockquote><ul><li><code>mail.cctv.com</code><ul><li><code>mail</code>是三级域名</li><li><code>cctv</code>是二级域名</li><li><code>com</code>是一级域名</li></ul></li></ul><h3 id="万维网-www"><a href="#万维网-www" class="headerlink" title="万维网(www)"></a>万维网(www)</h3><blockquote><ul><li>万维网是一个大规模的,联机式的信息储藏所,简称Web</li><li>万维网是一个分布式的超媒体系统,他是超文本系统的扩充</li></ul></blockquote><ul><li>万维网以客户服务器的方式工作<ul><li>客户程序向服务程序发出请求,服务程序向客户程序送回客户所要的万维网文档<ul><li><code>超文本文档</code>仅包含文本信息</li><li><code>超媒体文档</code>还包含其它表示方式的信息,如图像,声音,视频等</li></ul></li><li>如何标志分布在整个互联网上的万维网文档<ul><li>统一资源定位符<strong>URI</strong></li></ul></li><li>用什么样的协议实现万维网上的各种链接<ul><li>超文本传输协议(<code>HTTP</code>)</li></ul></li><li>如何使用户能方便找到用户信息<ul><li>使用<strong>超文本标记语言HTML</strong></li></ul></li></ul></li></ul><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><blockquote><p>URI:统一资源标识符,URI包含URL和URN,由于URL过于普及,默认作为URI</p></blockquote><ul><li><p>URL:统一资源定位符</p></li><li><p>URN:统一资源名称</p></li><li><p>例:例如一个文件<code>a.html</code>可以用<code>https://www.baidu.com/a.html</code>  </p><ul><li>也可以用<code>URN</code>:<code>urn:a:1535-3613</code></li></ul></li><li><p><img src="URI.png" alt="URI"></p></li></ul><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>scheme</td><td>协议名,比如http, https</td></tr><tr><td>user:passwd@</td><td>登录主机时的用户信息,不过很不安全,不推荐使用,也不常用</td></tr><tr><td>host:port</td><td>主机名(<strong>域名或者IP地址</strong>)和端口</td></tr><tr><td>path</td><td>请求路径,标记资源所在位置</td></tr><tr><td>query</td><td>查询参数,为<code>key=val</code>这种形式,多个键值对之间用&amp;隔开</td></tr><tr><td>fragment</td><td>URI 所定位的资源内的一个锚点,浏览器可以根据这个锚点跳转到对应的位置</td></tr></tbody></table><blockquote><p>参考:<a href="https://sanyuan0704.top/blogs/net/http/003.html#uri-%E7%9A%84%E7%BB%93%E6%9E%84">https://sanyuan0704.top/blogs/net/http/003.html#uri-%E7%9A%84%E7%BB%93%E6%9E%84</a></p></blockquote><ul><li><code>https</code>就是<code>scheme</code></li><li><code>sanyuan0704.top</code>就是<code>host:port</code>,(http,https)默认端口是80,443可以省略不写</li><li><code>/blogs/net/http/003.html</code>就是<code>path</code></li><li><code>uri-%E7%9A%84%E7%BB%93%E6%9E%84</code>就是<code>fragment</code></li></ul><blockquote><p>关于URI编码</p></blockquote><ul><li>URI只能使用ASCII, ASCII之外的字符是不支持显示的,而且还有一部分符号是界定符,如果不加以处理就会导致解析出错.<ul><li>URI引入了编码机制,将所有非ASCII码字符和界定符转为十六进制字节值,然后在前面加个%.</li><li>空格被转义成了%20,<code>的结构</code>就被转译成<code>%E7%9A%84%E7%BB%93%E6%9E%84</code></li></ul></li></ul><h3 id="HTTP的操作过程-特点"><a href="#HTTP的操作过程-特点" class="headerlink" title="HTTP的操作过程(特点)"></a>HTTP的操作过程(特点)</h3><blockquote><p>每个万维网的网点都有一个服务进程,他不断的监听<code>TCP</code>的端口<code>80</code>,一遍发现浏览器向它发出连接建立请求</p></blockquote><ul><li><p><strong>HTTP的协议本身是无连接的</strong></p><ol><li>HTTP使用了面向连接的TCP作为传输层协议,保证数据的可靠传输</li><li>虽然HTTP使用TCP连接,但通信的双方在交换HTTP报文之前不需要先建立HTTP建立</li></ol></li><li><p><strong>HTTP协议是无状态的</strong>  </p><ol><li>协议对于事务处理没有记忆能力</li><li>同一个客户第二次访问同一个服务器上的页面时,服务器响应与第一次访问时相同</li><li>每次的请求都是独立的,它的执行情况和结果与前面的请求和之后的请求是无直接关系的,它不会受前面的请求应答情况直接影响,也不会直接影响后面的请求应答情况(<code>无直接联系</code>)</li><li>服务器中没有保存客户端的状态,客户端必须每次带上自己的状态去请求服务器</li></ol></li><li><p><strong>明文传输</strong></p><ol><li>即协议里的报文(主要指头部)不使用二进制数据.而是文本形式</li><li>方便调试的同时,HTTP的报文信息暴露给了外界,给攻击者也提供了便利</li></ol></li><li><p><strong>队头阻塞问题</strong></p><ol><li>http开启长连接时,使用同一个TCP连接</li><li>同一时刻只能处理同一个请求,当前请求时间过长,其它请求只能处于阻塞状态</li></ol></li><li><p><strong>HTTP协议首先要和服务器建立TCP连接</strong></p><ol><li>建立TCP连接三次握手的前面两部分完成后(即经过了一个RTT时间后)</li><li>万维网客户就把HTTP请求报文,<strong>作为建立TCP连接的第三个报文</strong>的数据发送给万维网数据</li><li>服务器收到HTTP请求报文后,就把所请求的文档作文响应报文返回给客户</li></ol></li></ul><p><img src="%E8%AF%B7%E6%B1%82%E4%B8%80%E4%B8%AA%E6%96%87%E6%A1%A3%E6%89%80%E9%9C%80%E7%9A%84%E6%97%B6%E9%97%B4.png" alt="请求一个文档所需的时间"></p><ul><li>该文档的传输时间(与文档大小成正比)加上两倍往返时间(RTT)<ul><li>一个RTT用于连接TCP连接</li><li>另一个RTT用于请求和接收万维网文档</li><li>TCP建立的第三个报文段中的数据就是客户端对万维网的请求报文</li></ul></li></ul><h3 id="串行连接、持久连接、管道化持久连接、http-2-0多路复用简介"><a href="#串行连接、持久连接、管道化持久连接、http-2-0多路复用简介" class="headerlink" title="串行连接、持久连接、管道化持久连接、http/2.0多路复用简介"></a>串行连接、持久连接、管道化持久连接、http/2.0多路复用简介</h3><ul><li><p><strong>串行连接</strong>:HTTP有<code>无连接的特性,即每次连接只能处理一个请求,收到响应后立即断开连接</code>.<code>HTTP/1.0</code>版本称为<strong>串行连接或短连接、短轮询</strong>中每次HTTP通信后都要断开TCP连接,所以每个新的HTTP请求都需要建立一个新的连接.但在现在网站动则几十条HTTP请求的情况下,很容易达到浏览器请求上限,并且每次请求都建立新的tcp连接(每次都有三次握手四次挥别)<span style="color:red">极大的增加了通信开销</span>.</p></li><li><p><strong>持久连接</strong>:为解决这个问题,有人提出了<code>持久连接(也叫长连接、长轮询)</code>.一定时间内,同一域名下的HTTP请求,只要两端都没有提出断开连接,则<strong>持久保持TCP连接状态</strong>,其他请求可以<code>复用这个连接通道</code>.<code>HTTP/1.1</code> 实现并<u style="color:red">默认了所有连接都是持久连接</u>,这样客户端发起多个HTTP请求时就减少了TCP握手造成的网络资源和通信时间的浪费.<span style="color:red">但是持久连接采用阻塞模式,下次请求必须等到上次响应返回后才能发起,如果上次的请求还没返回响应内容,下次请求就只能等着</span>(就是常说的线头阻塞)</p></li><li><p><strong>管道化持久连接</strong>:管道化则可以不用等待响应返回而发送下个请求并按顺序返回响应,现代浏览器并未默认开启管道化.</p></li><li><p><strong>HTTP/2.0多路复用</strong>： 每个HTTP请求都有一个<strong>序列标识符</strong>,这样浏览器可以并发多个请求,服务器接收到数据后,再根据序列标识符重新排序成不同的请求报文,而不会导致数据错乱.同样,服务端也可以并发返回多个响应给浏览器,浏览器收到后根据序列标识重新排序并归入各自的请求的响应报文.<span style="color:red">并且同一个域名下的所有请求都复用同一个TCP连接,极大增加了服务器处理并发的上限</span>.</p></li><li><p><strong>WebSocket</strong>： WebSocket是HTML5提出的一种客户端和服务端通讯的全双工协议,由客户端发起请求,<u>建立连接之后不仅客户端可以主动向服务端发送请求,服务端可以主动向客户端推送信息.</u></p></li></ul><p><img src="%E8%BF%9E%E6%8E%A5.jpg" alt="连接"></p><blockquote><p>参考:<a href="https://juejin.cn/post/6844903844216832007#heading-3">https://juejin.cn/post/6844903844216832007#heading-3</a></p></blockquote><h3 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h3><ul><li>代理服务器相当于中间人<ul><li>它既可以当作客户端发送请求,也可以当作服务端响应请求</li></ul></li></ul><p><img src="%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="代理服务器"></p><h3 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h3><blockquote><p>HTTP/2而言性能的提升主要两点:</p></blockquote><ul><li>头部压缩</li><li>多路复用</li></ul><h4 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h4><ul><li>关于请求体压缩的方式<ul><li>使用<code>Content-Encoding</code>可以指定头部字段来指定请求体响应的压缩编码过程</li></ul></li><li>HTTP/2针对头部字段,也采用对应的压缩算法–<strong>HPACK</strong>,对请求头进行压缩</li></ul><blockquote><p>HPACK算法专门为HTTP/2服务</p></blockquote><ul><li>首先是在服务器和客户端之间建立哈希表,将用到的字段存放在这张表中,那么在传输的时候对于之前出现过的值,只需要把索引(比如0,1,2,…)传给对方即可,对方拿到索引查表就行了.</li></ul><p><img src="%E5%A4%B4%E9%83%A8%E5%8E%8B%E7%BC%A9.png" alt="头部压缩"></p><blockquote><p>HTTP/2 当中废除了起始行的概念,将起始行中的请求方法、URI、状态码转换成了头字段,不过这些字段都有一个”:”前缀,用来和其它请求头区分开.</p></blockquote><ul><li>参考:<a href="https://sanyuan0704.top/blogs/net/http/017.html#%E5%A4%B4%E9%83%A8%E5%8E%8B%E7%BC%A9">https://sanyuan0704.top/blogs/net/http/017.html#%E5%A4%B4%E9%83%A8%E5%8E%8B%E7%BC%A9</a></li></ul><h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><blockquote><p>在HTTP/2中,有两个非常重要的概念,分别是帧<code>frame</code>和流<code>stream</code>,理解这两个概念是理解下面多路复用的前提.<strong>帧代表数据传输的最小的单位</strong>,每个帧都有序列标识表明该帧属于哪个流,<strong>流也就是多个帧组成的数据流</strong>,每个流表示一个请求.</p></blockquote><ul><li><p>http队头阻塞:在同一个 TCP 长连接中，前面的请求没有得到响应，后面的请求就会被阻塞</p><ul><li>解决1:使用<strong>并发连接</strong>和<strong>域名分片</strong>的方式来解决,<span style="color:red">只是增加了 TCP 连接,并没有解决HTTP层面的问题</span></li></ul></li><li><p>HTTP/2 便从 HTTP 协议本身解决了队头阻塞问题。</p></li><li><p>注意，这里并不是指的<code>TCP队头阻塞</code>，而是<code>HTTP队头阻塞</code>，两者并不是一回事。<u>TCP的队头阻塞是在数据包层面，单位是数据包</u>，前一个报文没有收到便不会将后面收到的报文上传给 HTTP，而HTTP 的队头阻塞是在 HTTP <strong>请求-响应层面</strong>，前一个请求没处理完，后面的请求就要阻塞住。两者所在的层次不一样。</p></li></ul><blockquote><p>解决对头阻塞的问题(二进制分帧)</p></blockquote><ul><li>首先HTTP/2之前使用的明文传输,不方便计算机的解析.列如回车换行是内容还是分割符,所以HTTP/2就把报文全部转换为二进制<ul><li>将<code>Headers + Body</code>的报文格式如今被拆分成了一个个二进制的帧</li><li>用Headers帧存放头部字段，Data帧存放请求体数据</li><li>分帧之后不再是一个个完整的HTTP请求报文,而是一堆乱序的二进制帧</li><li>二进制帧没有先后关系,也不存在队头阻塞</li></ul></li></ul><blockquote><p>关于通信双方给对方互相发送的二进制帧的双向传输的序列就是<strong>流(stream)</strong>.HTTP/2 </p></blockquote><ul><li><strong>多路复用</strong>:用<strong>流</strong>来在一个 TCP 连接上来进行多个数据帧的通信</li></ul><blockquote><p>参考:<a href="https://sanyuan0704.top/blogs/net/http/017.html#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E5%B8%A7">https://sanyuan0704.top/blogs/net/http/017.html#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E5%B8%A7</a></p></blockquote><h3 id="http报文属性"><a href="#http报文属性" class="headerlink" title="http报文属性"></a>http报文属性</h3><ul><li><a href="https://zyjcould.ltd/2021/09/20/nodejs/#toc-heading-9">https://zyjcould.ltd/2021/09/20/nodejs/#toc-heading-9</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFC布局</title>
      <link href="/2021/11/06/guan-yu-bfc-bu-ju/"/>
      <url>/2021/11/06/guan-yu-bfc-bu-ju/</url>
      
        <content type="html"><![CDATA[<blockquote><p>css中格式化上下文的内容</p></blockquote><ul><li><strong>Block formatting context(BFC)</strong>–块级格式化上下文</li><li><strong>Inline formatting context(IFC)</strong>–内联格式化上下文</li><li><strong>Crid formatting context(GFC)</strong>–网格布局格式化上下文</li><li><strong>Flex formatting context(FFC)</strong>–自适应格式化上下文</li></ul><h2 id="BFC渲染规则"><a href="#BFC渲染规则" class="headerlink" title="BFC渲染规则"></a>BFC渲染规则</h2><ol><li>BFC垂直方向上的举例由margin决定.同一个BFC的两个相邻的Box的margin边距重叠</li><li>BFC的区域不会与浮动元素的<code>float box</code>重叠</li><li>BFC是一个独立的容器,外面的元素不会影响里面的元素</li><li>计算BFC高度的时候浮动元素也会参与计算</li></ol><h2 id="触发BFC"><a href="#触发BFC" class="headerlink" title="触发BFC"></a>触发BFC</h2><table><thead><tr><th>元素或属性</th><th>属性值</th></tr></thead><tbody><tr><td>根元素</td><td>&lt;html&gt;</td></tr><tr><td>浮动元素</td><td>float不能是none</td></tr><tr><td>绝对定位元素</td><td>元素的<code>position</code>为<code>absolute</code>或<code>fixed</code></td></tr><tr><td>行内块元素</td><td>元素的<code>display</code>为<code>inline-block</code></td></tr><tr><td>overflow</td><td>计算值不为<code>visible</code>的块元素</td></tr><tr><td>dispaly</td><td>属性为<code>flow-root</code>:建立新的块级格式化上下文的块级快容器</td></tr><tr><td>弹性元素</td><td>display为<code>flex</code>或者<code>inline-flex</code></td></tr><tr><td>网格元素</td><td>display为<code>grid</code>或者<code>inline-grid</code></td></tr><tr><td>contain</td><td>值为 <code>layout</code>,<code>content</code> 或 <code>paint</code> 的元素</td></tr></tbody></table><blockquote><p>contain属性允许开发者声明当前元素和它的内容尽可能的独立于DOM树的其他部分.这使得浏览器在重新计算布局、样式、绘图、大小或这四项的组合时,<span style="color:red">只影响到有限的DOM区域</span>,而不是整个页面,可以有效改善性能.</p><blockquote><p>这个属性在包含大量独立组件的页面非常实用,它可以防止某个小部件的 CSS 规则改变对页面上的其他东西造成影响.</p></blockquote></blockquote><ul><li>layout:表示元素外部无法影响元素内部的布局,反之亦然.</li><li>content:等价于<code>contain:layout paint</code></li><li>paint:表示这个元素的子孙节点不会在它边缘外显示.如果一个元素在视窗外或因其他原因导致不可见,则同样保证它的子孙节点不会被显示.</li></ul><h2 id="BFC的应用"><a href="#BFC的应用" class="headerlink" title="BFC的应用"></a>BFC的应用</h2><h3 id="浮动元素使父元素高度塌陷"><a href="#浮动元素使父元素高度塌陷" class="headerlink" title="浮动元素使父元素高度塌陷"></a>浮动元素使父元素高度塌陷</h3><ul><li>原理:计算BFC的高度时,浮动子元素也会参与计算</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>      <span class="token property">border</span><span class="token punctuation">:</span> 10px solid red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.pan</span> <span class="token punctuation">&#123;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>解决:给父元素开启BFC</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 10px solid red<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>`<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非浮动元素被浮动元素覆盖"><a href="#非浮动元素被浮动元素覆盖" class="headerlink" title="非浮动元素被浮动元素覆盖"></a>非浮动元素被浮动元素覆盖</h3><ul><li>原理:非BFC的区域会与float box重叠</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.pan</span> <span class="token punctuation">&#123;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.fl</span> <span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>解决:给非浮动元素开启BFC</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.fl</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外边距垂直方向重合的问题"><a href="#外边距垂直方向重合的问题" class="headerlink" title="外边距垂直方向重合的问题"></a>外边距垂直方向重合的问题</h3><ul><li>原理:属于同一个BFC的两个相邻的Box的margin会发生重叠</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box3</span> <span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">margin-top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>chifan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>方法：给上box或者下box任意一个包裹新的box并开启BFC</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box2</span> <span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-传输层</title>
      <link href="/2021/11/04/ji-suan-ji-wang-luo-chuan-shu-ceng/"/>
      <url>/2021/11/04/ji-suan-ji-wang-luo-chuan-shu-ceng/</url>
      
        <content type="html"><![CDATA[<h2 id="关于计算机网络的体系结构"><a href="#关于计算机网络的体系结构" class="headerlink" title="关于计算机网络的体系结构"></a>关于计算机网络的体系结构</h2> <table>    <tr>        <th>OSI的七层协议</th><th>四层协议</th><th>五层协议</th>    </tr>    <tr>        <td>应用层</td><td rowspan="3">应用层(各种应用层协议TELNENT,FTP,SMTP等)</td><td rowspan="3">应用层</td>    </tr>    <tr>        <td>表示层</td>    </tr>    <tr>        <td>会话层</td>    </tr>    <tr>        <td>传输层(TCP/UDP)</td><td>传输层(TCP/UDP)</td><td>传输层(TCP/UDP)</td>    </tr>    <tr>        <td>网络层IP</td><td>网络层IP</td><td>网络层IP</td>    </tr>    <tr>        <td>数据链路层</td><td rowspan="2">数据链路层</td><td>数据链路层</td>    </tr>    <tr>        <td>物理层</td><td>物理层</td>    </tr></table><ul><li>应用层协议:域名系统:<strong>DNS</strong>,支持万维网应用:<strong>HTTP</strong>,支持电子邮件:<strong>SMTP</strong>…我们把应用层交互的数据单元称为<strong>报文</strong></li><li>传输层:负责两台主机中进程之间的通信提供的数据传输服务<ul><li>TCP(传输控制协议):<span style="color:red">提供面向连接的,可靠的数据传输服务</span>,其数据传输的单位是<strong>报文段</strong></li><li>UDP(用户数据报协议):<span style="color:red">提供无连接的,尽最大努力的数据传输服务(不保证数据传输的可靠性)</span>,其数据传输的单位是<strong>用户数据段</strong></li></ul></li><li>网络层:负责为分组交换网上的不同主机提供通信服务<ul><li>互联网的网络层协议是<strong>无连接的网际协议IP</strong>和多种路由选择协议.</li></ul></li></ul><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><ol><li>用户数据报协议(UDP):不需要先建立连接.不提供可靠交付,<strong>但在有些情况下是最有效的</strong></li><li>传输控制协议(TCP):提供面向连接的服务.</li></ol><blockquote><p>举例:使用UDP和TCP协议的某些应用</p></blockquote><table><thead><tr><th>应用</th><th>应用层协议</th><th>运输层协议</th></tr></thead><tbody><tr><td>名字转换</td><td>DNS(域名系统)</td><td>UDP</td></tr><tr><td>文件传送</td><td>TFTP(简单文件传送协议)</td><td>UDP</td></tr><tr><td>IP地址配置</td><td>DHCP(动态主机配置协议)</td><td>UDP</td></tr><tr><td>网络管理</td><td>SNMP(简单网络管理协议)</td><td>UDP</td></tr><tr><td>电子邮件</td><td>SMTP(简单邮件传送协议)</td><td>TCP</td></tr><tr><td>远程终端协议</td><td>TELNET(远程终端协议)</td><td>TCP</td></tr><tr><td>万维网</td><td>HTTP(超文本传输协议)</td><td>TCP</td></tr><tr><td>文件传输</td><td>FTP(文件传输协议)</td><td>TCP</td></tr></tbody></table><blockquote><p>运输层的端口:对于两个计算机相互通信,不仅必须知道对方的IP地址(找到对方的计算机),而且要知道对方的端口号(找到对方计算机中的应用进程)</p></blockquote><ul><li>服务器端使用的端口号<ul><li>熟知端口号或系统端口号,数值:0~1023</li><li>登记端口号:数值1024~49151.这类端口必须在IANA按照规定的手续登记,以防止重复</li></ul></li></ul><table><thead><tr><th>应用程序</th><th>FTP</th><th>HTTP</th><th>DNS</th><th>HTTPS</th><th>…</th></tr></thead><tbody><tr><td>熟知端口号</td><td>21</td><td>80</td><td>53</td><td>443</td><td>…</td></tr></tbody></table><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><ol><li><code>源端口</code>:源端口号.在需要对方回信时选用.不需要课全用0</li><li><code>目的端口</code>:目的端口.在终点交付报文时必须使用</li><li><code>长度</code>:UDP用户数据报的长度.其最小值是8(仅有首部)</li><li><code>检验和</code>:检测UDP用户数据报在传输中是否有错.有错就丢弃</li></ol><p><img src="UDP%E6%8A%A5%E6%96%87%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5.png" alt="UDP报文头部字段"></p><ul><li>UDP传输协议的主要特点<ol><li>UDP是无连接的,发送数据之前是不需要建立连接</li><li>UDP使用尽最大努力交付,不保证可靠交付</li><li>面向报文.即应用层对UDP交付的报文,不管多长,照样发送,即一次发送一个报文</li><li>没有拥塞控制.如(ip电话,实时视屏会议等)要求源主机以恒定的速率发送数据,并且允许在网路拥堵时丢失一些数据</li><li>UDP支持一对一,一对多,多对一,多对多的交互通信</li><li>UDP首部开销小,只有8个字节,比TCP的20个字节的首部要短</li></ol></li></ul><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ol><li><code>面向连接</code>。所谓的连接，指的是客户端和服务器的连接，在双方互相通信之前，TCP 需要三次握手建立连接，而 UDP 没有相应建立连接的过程。</li><li><code>可靠性</code>。TCP 花了非常多的功夫保证连接的可靠，这个可靠性体现在哪些方面呢？一个是有状态，另一个是可控制。<ul><li>TCP 会精准记录哪些数据发送了，哪些数据被对方接收了，哪些没有被接收到，而且保证数据包按序到达，不允许半点差错。这是有状态。</li><li>当意识到丢包了或者网络环境不佳，TCP 会根据具体情况调整自己的行为，控制自己的发送速度或者重发。这是可控制。相应的，UDP 就是无状态, 不可控的。</li></ul></li><li><code>面向字节流</code>。UDP 的数据传输是基于数据报的，这是因为仅仅只是继承了 IP 层的特性，而 TCP 为了维护状态，将一个个 IP 包变成了字节流。</li><li>每一条TCP连接<code>只能有两个端点</code>,每一条TCP连接之间能是点对点的.<ul><li>TCP两端都设有发送缓存和接收缓存,用来临时存放双向通信的数据</li><li>发送数据:应用程序将数据传送给TCP缓存后,就可以做自己的事,tcp会在合适时候发送数据</li><li>接收数据:TCP把收到的数据放入缓存,上层的应用进程在合适的时候读取缓存的数据</li></ul></li><li><code>提供双全工通信</code>.允许通信双方的应用进程在任何时候都能发送数据</li></ol><h3 id="报文头部字段介绍"><a href="#报文头部字段介绍" class="headerlink" title="报文头部字段介绍"></a>报文头部字段介绍</h3><p><img src="tcp%E6%8A%A5%E6%96%87%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5.jpg" alt="tcp报文头部字段"></p><ul><li><p>TCP的序号和确认号</p><ol><li>32位序号seq:<code>Sequence number</code>的缩写是seq,TCP通信过程中某一个传输方向上的字节流的每一个字节的序号,通过这个来通过这个来发送的数据是有序的(序列号是一个长为 4 个字节，也就是 32 位的无符号整数)</li><li>32位确认号 ack:<code>Ackonwledge number</code>缩写ack,TCP对上一次seq序号做出的确认号,用来响应TCP的报文段,给收到的</li></ol></li><li><p>TCP的标志位</p><blockquote><p>每个TCP段都有一个目的,这是借助于TCP标志位选项来确定的,允许发送方或接收方指定哪些标志应该被使用,以便端被另一端正确处理</p></blockquote><ol><li>SYN:简写为<code>S</code>,同步标志位,用于建立会话连接,同步序列号</li><li>ACK:简写为<code>.</code>,确认标志位,对已接收的数据包进行确认</li><li>FIN:简写为<code>F</code>,完成标志位,表示我已经没有数据要发送,即将关闭连接</li><li>PSH:简写为<code>P</code>,推送标志位,表示该数据包被对方接收后应立即交给上层应用,而不在缓冲区排队</li><li>RST:简写为<code>R</code>,紧急标志位,重置标志位,用于连接复位,拒绝错误和非法的数据包</li><li>URG:简写为<code>U</code>,紧急标志位,表示数据包的紧急指针域有效,用来保证连接不被阻断,并督促中间设备尽快处理</li></ol></li></ul><blockquote><p>参考:<a href="https://sanyuan0704.top/blogs/net/tcp/005.html#%E5%BA%8F%E5%88%97%E5%8F%B7">https://sanyuan0704.top/blogs/net/tcp/005.html#%E5%BA%8F%E5%88%97%E5%8F%B7</a></p></blockquote><h3 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h3><blockquote><p>模拟三次握手:TCP 三次握手跟现实生活中的人与人打电话是很类似的</p></blockquote><ul><li>三次握手</li><li>“你好，听到吗”</li><li>“我听得到啊，你听得到吗?”</li><li>“我能听到你，我在…”</li></ul><p><img src="tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.jpg" alt="tcp三次握手"></p><blockquote><p>第一次握手</p></blockquote><ol><li>客户端将TCP报文标志位SYN位置为1,随机产生一个序号值seq=x,并保存在TCP首部的ACK序列号(seq)例,指明客户端打算连接的服务器的端口,并将该数据包发送给服务器端</li><li>发送完毕,客户端进入<code>SYN_SENT</code>状态,等待服务器端确认</li></ol><blockquote><p>第二次握手</p></blockquote><ol><li>服务器端收到数据包后由标志位SYN=1知道客户端请求建立连接，服务器端将TCP报文标志位SYN和ACK都置为1，ack=x+1，随机产生一个序号值seq=y，并将该数据包发送给客户端以确认连接请求，</li><li>服务器端进入<code>SYN_RCVD</code>状态</li></ol><blockquote><p>第三次握手</p></blockquote><ol><li>客户端收到确认后，检查ack是否为x+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=y+1，并将该数据包发送给服务器端，服务器端检查ack是否为y+1，ACK是否为1，</li><li>如果正确则连接建立成功，客户端和服务器端进入<code>ESTABLISHED</code>状态，</li><li>完成三次握手，随后客户端与服务器端之间可以开始传输数据了。</li><li>第三次握手时可以携带数据</li></ol><ul><li>SYN 是需要消耗一个序列号的，下次发送对应的ack(序列号)要加1，为什么呢？只需要记住一个规则:<blockquote><p>凡是需要对端确认的，一定消耗TCP报文的序列号。</p></blockquote></li></ul><blockquote><p>两次握手建立连接的问题:<strong>服务端无法确认客户端的接收能力</strong></p></blockquote><ul><li>第一次握手:服务端确认客户端有发送数据的能力</li><li>第二次握手:客户端确认服务端有接收和发送数据的能力</li><li>第三次握手:服务端端确认客户端有接收数据的能力</li></ul><blockquote><p>参考:<a href="https://sanyuan0704.top/blogs/net/tcp/002.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%AF%E4%B8%A4%E6%AC%A1">https://sanyuan0704.top/blogs/net/tcp/002.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%AF%E4%B8%A4%E6%AC%A1</a></p></blockquote><h3 id="TCP的四次挥手"><a href="#TCP的四次挥手" class="headerlink" title="TCP的四次挥手"></a>TCP的四次挥手</h3><blockquote><p>四次挥手即终止TCP连接，就是指断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认连接的断开</p></blockquote><ul><li>TCP连接是全双工的，因此，每个方向都必须要单独进行关闭</li><li>这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN</li><li>首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭</li></ul><p><img src="tcp%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.jpg" alt="tcp四次挥手"></p><blockquote><p>第一次挥手</p></blockquote><ul><li>客户端发送挥手请求,向服务端发送的标志位是FIN报文段,设置序列号<strong>seq=p</strong></li><li>客户端端进入<code>FIN_WAIT_1</code>状态，这表示客户端端没有数据要发送给服务端</li><li>服务端接收后向客户端确认，变成了<code>CLOSED-WAIT</code>状态</li></ul><blockquote><p>第二次挥手</p></blockquote><ul><li>客户端收到了服务端发送的FIN报文段，向服务端返回一个标志位是<code>ACK</code>的报文段，<strong>ack设为seq加1(ack=p+1)</strong></li><li>客户端进入<code>FIN_WAIT_2</code>状态，客户端告诉服务端，我确认并同意你的关闭请求</li></ul><blockquote><p>第三次挥手</p></blockquote><ul><li>客户端向服务端发送标志位是FIN的报文段，请求关闭连接，</li><li>设服务端的<strong>seq=q</strong>,<strong>ack=p+1</strong>同时服务端进入<code>LAST_ACK</code>状态</li></ul><blockquote><p>第四次挥手</p></blockquote><ul><li>客户端收到服务端发送的FIN报文段，向服务端发送标志位是ACK的报文段，然后客户端进入<code>TIME_WAIT</code>状态。</li><li>服务端收到客户端的ACK报文段以后，就关闭连接。此时，客户端等待2MSL的时间后依然没有收到回复，则证明服务端已正常关闭，</li><li>那客户端也可以关闭连接了</li></ul><blockquote><p>等待2MSL的意义</p></blockquote><ul><li>如果客户端直接跑路，当服务端还有很多数据包要给客户端发，且还在路上的时候，若客户端的端口此时刚好被新的应用占用，那么就接收到了无用数据包，造成数据包混乱。所以，最保险的做法是等服务器发来的数据包都死翘翘再启动新的应用。</li><li>使用2个MSL<ul><li>1个MSL确保四次挥手中主动关闭方最后的<code>ACK</code>报文最终能达到对端</li><li>1个MSL确保对端没有收到ACK重传的<code>FIN</code>报文可以到达</li></ul></li></ul><blockquote><p>参考:<a href="https://sanyuan0704.top/blogs/net/tcp/003.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%80%8C%E4%B8%8D%E6%98%AF%E4%B8%89%E6%AC%A1">https://sanyuan0704.top/blogs/net/tcp/003.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%80%8C%E4%B8%8D%E6%98%AF%E4%B8%89%E6%AC%A1</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5标签应用</title>
      <link href="/2021/10/31/html5-biao-qian-ying-yong/"/>
      <url>/2021/10/31/html5-biao-qian-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="获取标签属性"><a href="#获取标签属性" class="headerlink" title="获取标签属性"></a>获取标签属性</h2><ul><li><code>console.dir</code>:打印标签的属性</li></ul><blockquote><p>获取display:行内元素还是块级元素</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getDisplay</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">&#125;</span><span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getDisplay</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="html5的标记方法"><a href="#html5的标记方法" class="headerlink" title="html5的标记方法"></a>html5的标记方法</h2><ul><li><p>html5的内容类型</p><ul><li><code>ContentType</code>任然为<code>text/html</code></li></ul></li><li><p><code>DOCTYPE</code>声明</p><ul><li>&lt;!DOCTYPE html&gt;:不需要指定版本</li></ul></li><li><p>指定字符编码</p><ul><li>&lt;meta charset=”UTF-8”&gt;,可以直接追加charest属性的方式来指定</li><li>注意:不能将html4中的<code>content</code>元素属性指定和html5中<code>charset</code>指定混写</li></ul></li></ul><h2 id="有关兼容性"><a href="#有关兼容性" class="headerlink" title="有关兼容性"></a>有关兼容性</h2><blockquote><p>HTML5的语法是为了保证之前的HTML语法达到最大的兼容性而设计</p></blockquote><ul><li><p>不允许写结束标记的元素:</p><ul><li>br,hr,img,input,link,meta…</li></ul></li><li><p>可以省略结束标记的元素:</p><ul><li>li,p,option,tr,td,th…</li></ul></li><li><p>可以省略全部标记的元素:</p><ul><li>html,body,head,colgroup,tbody.</li></ul></li><li><p>例:<code>&lt;br&gt;...&lt;/br&gt;</code>是错误的,正确的是</br>,HTML5之前的&lt;br&gt;也是可以的</p></li><li><p>例:可以省略全部标记的元素,如将<code>body</code>元素省略不写,但是<span style="color:red">他在文档结构中还是存在,可以使用<code>document.html</code>访问到</span></p></li></ul><blockquote><p>具有<code>boolean</code>值的属性</p></blockquote><ul><li>设置属性为true:<ul><li>不写属性值:&lt;input type=”checkbox” checked&gt;</li><li>属性值=属性名:&lt;input type=”checkbox” checked=”checked”&gt;</li><li>属性值=空字符串:&lt;input type=”checkbox” checked=””&gt;</li></ul></li><li>设置属性为false:<ul><li>不写属性值:&lt;input type=”checkbox”&gt;</li></ul></li></ul><h2 id="html5结构"><a href="#html5结构" class="headerlink" title="html5结构"></a>html5结构</h2><blockquote><p>关于内容区块的编排,可以分为<strong>显示编排</strong>和<strong>隐式编排</strong></p></blockquote><ul><li>显示编排值明确使用section等元素创建文档结构</li><li>隐式编排值不明确使用section等元素</li></ul><blockquote><p>标题分级</p></blockquote><ul><li>隐式编排的规则<ul><li>如果新出现的标题比上一个标题级别低,生成下级内容区块</li><li>如果新出现的标题比上一个标题级别搞或相等,生成新的内容区块</li></ul></li></ul><blockquote><p>不同内容的区块可以使用相同级别的标题</p></blockquote><ul><li>父内容区块和子内容区块可以使用相同级别的标题,例如h1<ul><li>优点:每个级别的标题都可以单独设计</li></ul></li></ul><h2 id="新增的元素"><a href="#新增的元素" class="headerlink" title="新增的元素"></a>新增的元素</h2><h3 id="新增的结构元素"><a href="#新增的结构元素" class="headerlink" title="新增的结构元素"></a>新增的结构元素</h3><blockquote><p>章节,页眉,页脚或页面中的其它部分,可以与h1,h2,h3,h4,h5,h6</p><blockquote><p>取代的是&lt;div&gt;…</div></p></blockquote></blockquote><ul><li>&lt;section&gt;…</section>:<strong>分段分块</strong><ul><li>对网站或者应用程序中页面上的内容进行分块</li><li>注意:<ul><li>当一个容器需要被直接定义样式或者通过脚本定义行为是,推荐使用div而非section</li><li>不推荐为那些没有标题的内同使用section</li></ul></li></ul></li><li>&lt;article&gt;…</article>:<strong>强调独立性</strong><ul><li>代表文档,页面或者应用程序中独立的,完整的,可以独自被外部引用的内容</li><li>可以为博客或报刊中的文中,独立的帖子,独立的插件或者任意独立的内容</li></ul></li><li>注意:<ol><li>将所有页面从属部分,譬如导航条,菜单,版权说明等包含在一个统一的页面,以便统一使用CSS样式来进行装饰</li><li>不要将section元素用作<span style="color:red">设置样式的页面容器</span>,那是div元素的工作</li><li>如果article,aside或nav更符合使用条件,不要使用section元素</li><li>不要为没有标题的内容区块使用section元素</li></ol></li><li>&lt;nav&gt;…</nav>取代的是:&lt;ul&gt;</ul><ul><li>用作页面导航的链接组</li><li>只需要将主要的,基本的链接组放进nav元素</li><li>一个页面可以使用多个nav</li></ul></li><li>&lt;aside&gt;…</aside><ul><li>表示当前页面的附属信息部分</li><li>可以包含当前页面或主要内容相关的引用,侧边栏,广告等有别于主要内容</li></ul></li><li>&lt;time&gt;</time>,取代的&lt;span&gt;</span><ul><li>表示24小时某个时刻或者某个日期</li></ul></li></ul><h3 id="新增的非主体结构元素"><a href="#新增的非主体结构元素" class="headerlink" title="新增的非主体结构元素"></a>新增的非主体结构元素</h3><ul><li>&lt;header&gt;…</header><ul><li>引导和导航作用的结构元素,通常防止整个页面或页面中的一个内容区块的标题</li><li>例如数据表格,搜索表单或相关的logo</li></ul></li><li>&lt;hgroup&gt;…</hgroup><ul><li>将标题极其子标题进行分组的元素</li></ul></li><li>&lt;footer&gt;…</footer><ul><li>可以作为上层父级内容区块或是一个跟区块的脚注</li><li>通常包括起教官区块的脚注信息,如作者,相关阅读链接等</li></ul></li><li>&lt;address&gt;…</address><ul><li>用来在文档中呈现联系信息,包括文档作者或文档维护者的网站链接,电子邮箱,名字,手机号等</li></ul></li></ul><blockquote><p>figure元素:表示一段独立的流内容,一般表示文档主体流内容中的一个独立单元.使用<code>figcaption</code>元素为figure元素组添加标签</p></blockquote><ul><li>html5中代码示例</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>PRC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>zzzzzzzzz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>html4中代码示例:</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>prc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>zzzzzzzzz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新增的其它元素"><a href="#新增的其它元素" class="headerlink" title="新增的其它元素"></a>新增的其它元素</h3><ul><li>video元素定义视频,比如电影片段或其它视频流:<ul><li>&lt;video src=”moive.ogg” controls=”controls”&gt;video元素</video></li></ul></li><li>audio元素定义音频:<ul><li>&lt;audio src=”someaudio.wav”&gt;audio元素</audio></li></ul></li><li>embed元素用来插入各种多媒体,格式可以是Midi,Wav,AIFF,AU,MP3:<ul><li>&lt;embed src=”horse.wav”&gt;</embed></li></ul></li><li>mark元素主要用来在视觉上向用户呈现那些需要突出显示或高亮显示的文字<ul><li>&lt;mark&gt;</mark>取代&lt;span&gt;</span></li></ul></li><li>progress元素表示JavaScript中耗费时间的函数的进程<ul><li>&lt;progress&gt;</progress>,需要使用js脚本控制</li></ul></li><li>meter元素规定范围内的数值  <ul><li>&lt;meter&gt;</meter></li></ul></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>表示出来的实际值</td></tr><tr><td>min</td><td>规定范围是允许使用的最小值</td></tr><tr><td>max</td><td>规定范围是允许使用的最大值</td></tr><tr><td>low</td><td>规定范围的下限值,必须小于high属性值</td></tr><tr><td>high</td><td>规定范围上限值</td></tr><tr><td>optimum</td><td>最佳值,属性值必须在min与max之间</td></tr></tbody></table><ul><li><p>注意:</p><ul><li>如果low属性值小于min属性值,把min属性值视为low属性的值</li><li>如果high属性大于max属性,把max属性的值视为high属性的值</li></ul></li><li><p>wbr元素表示软换行,</p><ul><li>br是必须换行</li><li>wbr是浏览器窗口或父级元素的宽度足够宽时(没必要换行时),不进行换行,当宽度不够,主动进行换行(对中文没有啥用)</li></ul></li><li><p>canvas:本身没有行为,只提供一块画布,但他把一块绘图api展现给客户端js,使脚本能够把向蕙质的东西绘制这块画布上</p></li><li><p>command元素表示命令暗流,比如单选框,复选框,或者按钮(只有ie支持)</p><ul><li>该元素必须在menu元素中</li></ul></li><li><p>menu指元素表示菜单列表.希望列出表单控件时使用该元素</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>command</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>command<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Save<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Save<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>command</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>datalist元素表示可选数据列表,与input元素配合使用,可以制作输入值的下拉列表<ul><li>&lt;datalist&gt;</datalist></li></ul></li><li>datagrid表示可选数据列表,他以树形列表的形式来显示<ul><li>&lt;datagrid&gt;</datagrid></li></ul></li><li>keygen元素表示生成密钥<ul><li>&lt;keygen&gt;</li></ul></li><li>source元素为媒介元素(如&lt;video&gt;和&lt;audio&gt;)定义媒介资源<ul><li>&lt;source&gt;</li></ul></li></ul><h3 id="新增的input类型"><a href="#新增的input类型" class="headerlink" title="新增的input类型"></a>新增的input类型</h3><blockquote><p>表示必须输入什么样的类型</p></blockquote><table><thead><tr><th>email</th><th>邮件地址</th></tr></thead><tbody><tr><td>url</td><td>URL地址</td></tr><tr><td>number</td><td>数值的文本输入框</td></tr><tr><td>range</td><td>一定范围内数字值的文本输入框</td></tr><tr><td>Date</td><td>日期类…</td></tr><tr><td>file</td><td>上传文件</td></tr></tbody></table><h3 id="新增的属性"><a href="#新增的属性" class="headerlink" title="新增的属性"></a>新增的属性</h3><blockquote><p>表单相关的属性</p></blockquote><table><thead><tr><th>属性</th><th>描述</th><th>适用于标签</th></tr></thead><tbody><tr><td>autofocus</td><td>画面打开自动获取焦点</td><td>input,select,textarea,button</td></tr><tr><td>placeholder</td><td>对用户输入进行提示内容</td><td>input,textarea</td></tr><tr><td>form</td><td>声明它属于哪个表单,可以不放在表单内,属性值为该表单id</td><td>input,select,textarea,button…</td></tr><tr><td>multiple</td><td>允许上传文件一次上传多个</td><td>input</td></tr><tr><td>required</td><td>提交时,检查该元素内一定要有内容</td><td>input,textarea</td></tr><tr><td>…</td><td></td><td></td></tr></tbody></table><ul><li>input与button新增属性:<ul><li><code>formaction</code>重载action:传入一个url</li><li><code>formenctype</code>重载enctype:设置请求头中的<code>content-type</code></li><li><code>formmethod</code>重载method:设置请求方法</li></ul></li></ul><blockquote><p>链接相关的属性</p></blockquote><table><thead><tr><th>属性</th><th>描述</th><th>适用于标签</th></tr></thead><tbody><tr><td>media</td><td>规定目标url时为什么类型的媒介进行优化,只能在href属性存在时使用</td><td>a</td></tr><tr><td>sizes</td><td>与icons元素结合使用(通过rel属性),指定关联(icons元素)的大小</td><td>link</td></tr></tbody></table><blockquote><p>其它属性</p></blockquote><table><thead><tr><th>属性</th><th>描述</th><th>适用于标签</th></tr></thead><tbody><tr><td>reversed</td><td>列表倒序显示</td><td>ol</td></tr><tr><td>charset</td><td>文档的字符编码</td><td>meta</td></tr><tr><td>scoped</td><td>规定样式的作用域范围</td><td>style</td></tr><tr><td>async</td><td>脚本是否异步执行</td><td>script</td></tr><tr><td>sandbox,seamless,srcdoc</td><td>提高页面的安全性</td><td>iframe</td></tr></tbody></table><h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><blockquote><p><strong>hidden</strong>属性:通值浏览器不渲染该元素,使用元素处于不可见状态</p></blockquote><ul><li>允许使用js脚本将该属性取消<ul><li>设置为true:元素处于不可见的状态</li><li>设置为false:元素处于可见的状态</li></ul></li></ul><blockquote><p><strong>spellcheck</strong>:针对<code>input</code>和<code>textarea</code>,对用户输入的文本内容进行拼写和语法检查</p></blockquote><ul><li>必须明确提供true和false<ul><li>正确:&lt;textarea spellcheck=”true”&gt;</li><li>错误:&lt;textarea spellcheck&gt;</li></ul></li><li>注意: 如果元素的<code>readOnly</code>或者<code>disabled</code>属性设为true,则不进行检查  </li></ul><blockquote><p><strong>designMode</strong>和<strong>contentEditable</strong>(略)</p></blockquote><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><blockquote><p><code>required</code>可用在大多数元素上(除了隐藏元素,图片元素按钮上)</p></blockquote><ul><li>如果元素内容为空白,则不允许提交</li></ul><blockquote><p><code>pattern</code>的属性值为一个正则表达式,在提交时会检查是否符合给定格式</p></blockquote><ul><li>适用于input元素中email,number,url等</li></ul><blockquote><p>mix和max属性:数值类型或日期类型的input元素专用属性</p></blockquote><ul><li>限制输入的数值与日期的范围</li></ul><blockquote><p>step属性控制input元素中的值增加或减少的步幅</p></blockquote><h2 id="文件API"><a href="#文件API" class="headerlink" title="文件API"></a>文件API</h2><blockquote><p>添加multiple属性,file控件内允许一次放置多个文件</p></blockquote><h3 id="Blob对象"><a href="#Blob对象" class="headerlink" title="Blob对象"></a>Blob对象</h3><blockquote><p>Blob表示二进制数据,提供一个slice方法,通过该方法可以访问到字节内部的原始数据块</p></blockquote><ul><li>size属性表示一个Blob对象的字节长度</li><li>type属性表示MIME类型,如果是未知类型,返回一个空字符串</li></ul><h3 id="FileReader接口"><a href="#FileReader接口" class="headerlink" title="FileReader接口"></a>FileReader接口</h3><blockquote><p>用于把文件读入内存,并且读取文件中的数据.且提供了一个异步API,使用该API可以在浏览器主线程中异步访问文件系统,读取文件中的数据</p></blockquote><ul><li>在js脚本中<code>new FileReader()</code></li></ul><blockquote><p>接口的方法</p></blockquote><table><thead><tr><th>方法名</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>readAsBinaryString</td><td>file</td><td>将文件读取为二进制码,传送到后端,后端通过这段字符串存储文件</td></tr><tr><td>readAsText</td><td>file,[encoding]</td><td>将文件读取为文本,默认值UTF-8</td></tr><tr><td>readAsDataURL</td><td>file</td><td>将文件读取为DataURL,是将雄安文件以一种特殊格式的URL地址直接读入页面</td></tr><tr><td>abort</td><td>(none)</td><td>终断读取操作</td></tr></tbody></table><blockquote><p>接口的事件</p></blockquote><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>读取数据中断时触发</td></tr><tr><td>onerror</td><td>读取数据出错时触发</td></tr><tr><td>onloadstart</td><td>读取数据开始时触发</td></tr><tr><td>onprogress</td><td>读取数据中</td></tr><tr><td>onload</td><td>读取数据成功完成时触发</td></tr><tr><td>onloadend</td><td>读取数据完成时触发,无论成功或者失败</td></tr></tbody></table><h2 id="拖放API"><a href="#拖放API" class="headerlink" title="拖放API"></a>拖放API</h2><blockquote><p>实现拖放的步骤</p><blockquote><p>想要拖放对象元素的draggable属性设为true<code>(daggable=&quot;true&quot;)</code>.这样才能时该元素进行拖放.另外img与a元素(必须指定href)默认允许拖放 </p></blockquote></blockquote><table><thead><tr><th>事件</th><th>产生事件的元素</th><th>描述</th></tr></thead><tbody><tr><td>dragstart</td><td>被拖放的元素</td><td>开始拖放的操作</td></tr><tr><td>drag</td><td>被拖放的元素</td><td>拖放过程中</td></tr><tr><td>dragenter</td><td>拖放过程中鼠标经过的元素</td><td>被拖放的元素开始进入本元素的范围内</td></tr><tr><td>dragover</td><td>拖放过程中鼠标经过的元素</td><td>被拖放的元素正则本元素的范围内移动</td></tr><tr><td>dragleave</td><td>拖放过程中鼠标经过的元素</td><td>被拖放的元素离开本元素的范围</td></tr><tr><td>drop</td><td>被拖放的元素</td><td>有其他的元素被拖放到本元素中</td></tr><tr><td>dragend</td><td>拖放的对象元素</td><td>拖放操作结束</td></tr></tbody></table><ul><li>拖动处理的MIME类型<ul><li>text/plain:文本文字</li><li>text/html:HTML文字</li><li>text/xml:xml文字</li><li>text/url-list:url列表,每个url为一行</li></ul></li></ul><h3 id="DataTransfer对象的属性和方法"><a href="#DataTransfer对象的属性和方法" class="headerlink" title="DataTransfer对象的属性和方法"></a>DataTransfer对象的属性和方法</h3><table><thead><tr><th>属性/方法</th><th>描述</th></tr></thead><tbody><tr><td>dropEffect</td><td>拖放操作的视觉效果,允许指定的值为none,copy,link,move</td></tr><tr><td>effectAllowed</td><td>用来指定当元素被拖放时的视觉效果,可以指定none,copy,copyLink,copyMove,link,linkMove,all,unintialize</td></tr><tr><td>types</td><td>存入数据的种类,字符串的伪数组</td></tr><tr><td>clearData(DOMString format)</td><td>清楚DataTransfer对象中存放的数据,省略参数format,则清楚全部数据</td></tr><tr><td>setDragImage(Element image,long x,long y)</td><td>用img元素来设置拖放图标</td></tr></tbody></table><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器部署</title>
      <link href="/2021/10/30/fu-wu-qi-bu-shu/"/>
      <url>/2021/10/30/fu-wu-qi-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="关于使用VSCode远程连接服务器"><a href="#关于使用VSCode远程连接服务器" class="headerlink" title="关于使用VSCode远程连接服务器"></a><a href="#%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8">关于使用VSCode远程连接服务器</a></h2><ul><li>首先下载插件<code>Remote-SSH</code><ul><li>打开出现远程资源管理器的图标,按右上角的<code>+</code>,连接服务器</li><li>用ssh连接直接使用ip地址即可(选择user下的.ssh的config配置)</li><li><a href="vscode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5.png">vscode远程连接</a></li><li>…</li></ul></li><li>配置好后,右击服务器,即可连接远程服务器</li></ul><h2 id="项目自动化部署"><a href="#项目自动化部署" class="headerlink" title="项目自动化部署"></a><a href="#%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2">项目自动化部署</a></h2><blockquote><p>传统开发与<code>DevOps</code>开发模式</p></blockquote><ul><li><p><strong>传统开发</strong>的弊病:开发人员在开发阶段，测试和运维人员其实是处于等待的状态</p></li><li><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt2wf9lezj60xc0b40u102.jpg" alt="早期的开发模式" style="zoom:67%;" /></li><li><p><strong>DevOps开发模式</strong>Development和Operations两个词的结合，将开发和运维结合起来的模式:</p></li><li><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt33f78kdj60fk0fkgmc02.jpg" alt="DevOps模式" style="zoom:67%;" /></li></ul><h3 id="持续集成和持续交付"><a href="#持续集成和持续交付" class="headerlink" title="持续集成和持续交付"></a>持续集成和持续交付</h3><ul><li>CI是<code>Continuous Integration</code>(持续集成)</li><li>CD是两种翻译:<code>Continuous Delivery</code>（持续交付）或<code>Continuous Deployment</code>(持续部署)</li></ul><h3 id="自动化部署流程"><a href="#自动化部署流程" class="headerlink" title="自动化部署流程"></a>自动化部署流程</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt5buus2kj60wu0lgq7002.jpg" alt="自动化部署的流程"></p><h2 id="搭建服务器环境"><a href="#搭建服务器环境" class="headerlink" title="搭建服务器环境"></a><a href="#%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83">搭建服务器环境</a></h2><h3 id="linux基本命令"><a href="#linux基本命令" class="headerlink" title="linux基本命令"></a>linux基本命令</h3><table><thead><tr><th>ls</th><th>查看该文件列表</th></tr></thead><tbody><tr><td>cd /fileName</td><td>进入fileName文件夹</td></tr><tr><td>cd ~</td><td>进入主用户目录</td></tr><tr><td>cd ..</td><td>返回上级目录</td></tr><tr><td>cd ~</td><td>进入主用户目录</td></tr><tr><td>mkdir /fileName</td><td>建立名为fileName文件夹</td></tr><tr><td>touch /doc</td><td>创建名为doc的文件</td></tr><tr><td>rm 文件名</td><td>删除这个文件夹/文件</td></tr><tr><td>rm -rf</td><td>强制删除文件或目录,删除时不提示</td></tr></tbody></table><ul><li>mv 文件名  文件名         修改文件名</li><li>mv 文件1路径  文件2路径   移动文件1到文件2的目录中</li></ul><blockquote><p>vim  con.cfg：可带路径，没有则新建，有则修改</p></blockquote><ul><li>使用<code>i</code>进入编辑</li><li><strong>保存退出（ESC+:wq）、正常退出(ESC+q)、不保存退出（ESC+:q!）及强制退出（ESC+:!）</strong></li></ul><h3 id="关于dnf"><a href="#关于dnf" class="headerlink" title="关于dnf"></a>关于dnf</h3><ul><li>dnf是新一代的包版本工具,在<code>CentOS8</code>以上的版本</li><li>dnf使用的<code>rpm</code>,<code>libsolv</code>和<code>hawkey</code>库进行包管理操作</li></ul><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>dnf -version</td><td>查看版本</td></tr><tr><td>dnf repolist all</td><td>查看系统中所有的可用或不可用的<code>dnf</code>软件库</td></tr><tr><td>dnf list</td><td>列出用户系统上所有来自软件库的可用安装包以及已经安装的包</td></tr><tr><td>dnf list install</td><td>列出所有安装了的rpm包</td></tr><tr><td>dnf list available</td><td>列出用户系统上所有来自软件库的可用安装包</td></tr><tr><td>dnf search packagename 搜索软件库的可用安装包,可以传部分名称</td><td></td></tr></tbody></table><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><blockquote><p>下载和启动nginx</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dnf install nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动nginx：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start nginxsystemctl status nginxsystemctl enable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>配置nginx的用户和默认访问目录</p></blockquote><ul><li><p>nginx配置用户:这里改为用户名root</p><ul><li><img src="nginx%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7.jpg" alt="nginx配置用户"></li></ul></li><li><p>通过Linux命令创建文件夹和文件:</p></li><li><p>创建当文件夹和文件</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir &#x2F;root&#x2F;mall_cmscd &#x2F;root&#x2F;mall_cmstouch index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>配置访问目录 <code>vim /etc/nginx/nginx.conf</code></li><li><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt4cka6hgj60n00bwgmc02.jpg" alt="image-20210825163406566" style="zoom:67%;" /></li></ul><h3 id="java环境的配置"><a href="#java环境的配置" class="headerlink" title="java环境的配置"></a>java环境的配置</h3><blockquote><p>由于Jenkins本身是依赖Java的,所以我们需要先安装Java环境:</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dnf search java-11dnf install java-11-openjdk.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装JenKins-默认使用8080端口提供服务"><a href="#安装JenKins-默认使用8080端口提供服务" class="headerlink" title="安装JenKins(默认使用8080端口提供服务)"></a>安装JenKins(默认使用8080端口提供服务)</h3><blockquote><p>Jenkins本身是没有在dnf的软件仓库包中的</p></blockquote><ul><li>使用<code>wget</code>指定的<code>url</code>下载资源,wget支持HTTP,HTTPS和FTP下载<ul><li>-O表示输出到某个文件夹并且命名为什么文件</li><li>将下载内容读写到<code>jenkins.repo</code>文件中</li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget –O &#x2F;etc&#x2F;yum.repos.d&#x2F;jenkins.repo http:&#x2F;&#x2F;pkg.jenkins-ci.org&#x2F;redhat-stable&#x2F;jenkins.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>导入GPG密钥以确保您的软件合法<ul><li><code>rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key</code></li></ul></li></ul><blockquote><p>编辑文件<code>/etc/yum.repos.d/jenkins.repo</code></p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[jenkins]name&#x3D;Jenkins-stablebaseurl&#x3D;http:&#x2F;&#x2F;pkg.jenkins.io&#x2F;redhatgpgcheck&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装Jenkins:<code>dnf install jenkins</code></p></blockquote><ul><li>启动Jenkins服务<ul><li>systemctl start jenkins:启动服务</li><li>systemctl status jenkins:查看状态</li><li>systemctl enable jenkins:每次重新启动,保持服务器状态</li></ul></li></ul><h4 id="修改Jenkins用户"><a href="#修改Jenkins用户" class="headerlink" title="修改Jenkins用户"></a>修改Jenkins用户</h4><blockquote><p>由于Jenkins默认使用的用户是 <code>jenkins</code>,可能没有访问权限</p></blockquote><ul><li>修改文件的路径：<code>/etc/sysconfig/jenkins</code></li><li><img src="jenkins%E4%BF%AE%E6%94%B9user.jpg" alt="jenkins修改user"><ul><li>重启<code>systemctl restart jenkins</code></li></ul></li></ul><h4 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h4><blockquote><p>输入自己的IP地址<code>http://ip:8080</code></p></blockquote><ul><li>获取输入管理员密码<ul><li>在下面的地址中 <code>cat /var/lib/jenkins/secrets/initialAdminPassword</code></li><li>下载安装推荐的插件</li></ul></li></ul><h4 id="使用Jenkins任务"><a href="#使用Jenkins任务" class="headerlink" title="使用Jenkins任务"></a>使用Jenkins任务</h4><blockquote><p>任务创建</p></blockquote><ul><li><img src="%E4%BB%BB%E5%8A%A1%E5%88%9B%E5%BB%BA.jpg" alt="任务创建"></li></ul><h4 id="使用git管理"><a href="#使用git管理" class="headerlink" title="使用git管理"></a>使用git管理</h4><blockquote><p><span style="color:red">不仅本地要有git,云服务器也要有git</span></p></blockquote><ul><li>使用<code>dnf install git</code>下载git</li></ul><h5 id="使用http-用到git的token凭证"><a href="#使用http-用到git的token凭证" class="headerlink" title="使用http,用到git的token凭证"></a>使用http,用到git的token凭证</h5><ul><li>如果使用http,需要到github仓库生成token</li><li>在设置下的开发者设置</li><li><img src="github%E7%9A%84token.png" alt="github的token"></li></ul><h5 id="使用ssh-用到git的私钥"><a href="#使用ssh-用到git的私钥" class="headerlink" title="使用ssh,用到git的私钥"></a>使用ssh,用到git的私钥</h5><ul><li><p><img src="%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5.png" alt="使用ssh连接"></p></li><li><p>选择ssh连接,需要私钥以及github仓库的连接方式</p></li></ul><h4 id="触发器的构建"><a href="#触发器的构建" class="headerlink" title="触发器的构建"></a>触发器的构建</h4><blockquote><p>勾选定时构建</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#每半小时构建一次OR每半小时检查一次远程代码分支，有更新则构建H&#x2F;30 * * * *#每两小时构建一次OR每两小时检查一次远程代码分支，有更新则构建H H&#x2F;2 * * *#每天凌晨两点定时构建H 2 * * *#每月15号执行构建H H 15 * *#工作日，上午9点整执行H 9 * * 1-5#每周1,3,5，从8:30开始，截止19:30，每4小时30分构建一次H&#x2F;30 8-20&#x2F;4 * * 1,3,5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境:"></a>构建环境:</h4><blockquote><p>注意:我们需要搭建Node的环境</p></blockquote><ul><li>第一步：配置Node的环境</li><li>第二步：安装Node的插件</li></ul><blockquote><p>系统管理中,全局工具配置和插件管理,插件管理中下载Node插件</p></blockquote><p>构建执行的任务：</p><ul><li>查看Node的版本等是否有问题；</li><li>执行 <code>npm install</code> 安装项目的依赖；</li><li>移除原来mall_cms文件的所有内容；</li><li>将打包的dist文件夹内容移动到mall_cms文件夹</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pwdnode -vnpm -vnpm install npm run buildpwdecho &#39;构建成功&#39;ls# 删除&#x2F;root&#x2F;mall_cms文件夹里所有的内容rm -rf &#x2F;root&#x2F;mall_cms&#x2F;* cp -rf .&#x2F;dist&#x2F;* &#x2F;root&#x2F;mall_cms&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础问题</title>
      <link href="/2021/10/29/js-ji-chu-wen-ti/"/>
      <url>/2021/10/29/js-ji-chu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><blockquote><p>var,let,const三种变量</p></blockquote><h3 id="var关键字"><a href="#var关键字" class="headerlink" title="var关键字"></a><a href="#var%E5%85%B3%E9%94%AE%E5%AD%97"><strong>var关键字</strong></a></h3><ul><li><p>var的声明提升</p><ul><li>所谓的声明提升,就是把所有的变量声明到函数作用域的最顶部.可以反复多次用var声明同一个变量</li></ul></li><li><p>使用var声明的变量会变成window对象的属性</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token comment">//undefined</span>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个等同于以下这种的状况</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> age  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token comment">//undefined</span>  age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="let关键字"><a href="#let关键字" class="headerlink" title="let关键字"></a><a href="#let%E5%85%B3%E9%94%AE%E5%AD%97"><strong>let关键字</strong></a></h3><blockquote><p>使用let会产生<span style="color:red">暂时性死区</span></p></blockquote><ul><li>let声明变量时,如果在let之前引用此变量,let声明之前的执行瞬间被称为”<span style="color:red">暂时性死区</span>“</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token comment">//ReferenceError:age没用定义</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>全局声明:使用let在全局作用域中声明的变量不会成为window对象的属性</li></ul><h3 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a><a href="#const%E5%85%B3%E9%94%AE%E5%AD%97"><strong>const关键字</strong></a></h3><blockquote><p>与let基本相同,如果尝试修改const声明的变量会导致运行时错误</p></blockquote><ul><li>如果const变量引用的时一个对象,那么修改这个对象的内部属性并不违反const限制<ul><li>即不能修改该该变量引用的地址值,而通过地址值可以修改对象内部的属性</li></ul></li></ul><h3 id="声明风格"><a href="#声明风格" class="headerlink" title="声明风格"></a>声明风格</h3><blockquote><p>不使用var,const优先,let次之</p></blockquote><ul><li>使用const可以让浏览器运行时强制保持变量的不变,也可以让静态的代码分析工具提前发现不合法的操作</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a></h2><blockquote><p><a href="#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本数据类型</a>和<a href="#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">引用数据类型</a></p></blockquote><ul><li><strong>typeof</strong>操作符<ul><li>使用typeof操作符确定任意变量的数据类型</li></ul></li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本数据类型</a></h3><blockquote><p>undefined,null,boolean,number,string,symbol,object</p></blockquote><ul><li><strong><code>null</code></strong>:表示一个空对象</li><li><strong><code>undefined</code></strong>:由null派生而来<ul><li>如果使用var或者let声明了变量而为初始化时,就是<code>undefined</code></li><li>未初始化的变量会被自动赋予<code>undefined</code>,建议在声明变量的时候初始化.</li></ul></li><li><strong><code>Boolean</code></strong>:</li></ul><table><thead><tr><th>数据类型</th><th>转换为true</th><th>转换为false</th></tr></thead><tbody><tr><td>String</td><td>空字符串</td><td>非空字符串</td></tr><tr><td>Number</td><td>非零数值(包括无穷)</td><td>0</td></tr><tr><td>Object</td><td>任意对象</td><td>null</td></tr><tr><td>Undefined</td><td>不存在</td><td>undefinfed</td></tr></tbody></table><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a><strong><code>Number</code></strong></h4><blockquote><p>值的范围:<code>-Infinity</code> ~ <code>Infinity</code></p></blockquote><ul><li><strong>NaN</strong>:意思是<code>不是数值</code></li></ul><blockquote><p>转换为数值类型</p></blockquote><ul><li><code>Number()</code>是转型函数,可以用于任何类型的转换</li><li><code>paresInt()</code>用于字符串转换为number类型,可以解析任何进制的<ul><li>传入一个浮点数字符,只会返回一个整数字符</li><li>第二个参数用于指定进制数</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//二进制</span><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment">//八进制</span><span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//十进制</span><span class="token keyword">let</span> num4 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token comment">//十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>parseFloat()</code>只用于转换十进制字符,可以转换浮点数字符</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"22.3"</span><span class="token punctuation">)</span><span class="token comment">//22.3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><ul><li>length属性返回字符数(包括空字符串)</li></ul><blockquote><p>转化为字符串</p></blockquote><ul><li>使用<code>toString()</code>方法可见于数值,布尔类型,对象和字符串值.<ul><li><span style="color:red">null和undefined没有toString()方法</span></li><li>如果是数值类型可以传一个进制</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//"1010"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//"12"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h4><blockquote><p>略</p></blockquote><h4 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h4><blockquote><p>略</p></blockquote><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a><a href="#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">引用数据类型</a></h3><blockquote><ul><li>引用数据类型,变量在栈内存中存储的是堆内存中的地址值(函数名和引用型变量以及全局变量)</li><li>值得注意的是:局部的基本数据类型变量在栈内存初始化</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> obj1obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"jack"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//"jack"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><img src="https://www.zyjcould.ltd/img/markdown%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.png" alt="引用类型"></p></li><li><p>obj1保存的是这个实例对象的地址,obj2也是引用的实例的地址值(即浅拷贝)</p><ul><li>在给obj1增加属性name的时候,obj2同时也能访问到(深拷贝)</li><li>因为他们同时指向同一个对象</li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><p>函数是<code>javasceipt</code>中的一等公民,会在其作用域提升,率先执行</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//ƒ a()&#123;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>箭头函数中没有this</li><li>js函数中没有重载</li></ol>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite配置</title>
      <link href="/2021/10/26/vite-pei-zhi/"/>
      <url>/2021/10/26/vite-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="关于别名的配置"><a href="#关于别名的配置" class="headerlink" title="关于别名的配置"></a>关于别名的配置</h2><h3 id="使用node中的路径模块"><a href="#使用node中的路径模块" class="headerlink" title="使用node中的路径模块"></a>使用node中的路径模块</h3><blockquote><ul><li><code>path</code>模块中的<code>resolve</code>方法,用于获取目录的路径.</li><li>可以传任意多的字符,返回一个绝对路径地址</li><li>如果第一个参数是<code>__dirname</code>,一样的效果</li><li><code>__dirname</code>获取到当前文件下的绝对路径,文件名后缀不包括当前文件</li><li><code>__filename</code>获取到当前文件下的绝对路径,文件名后缀包括当前文件</li></ul></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const path &#x3D; require(&quot;path&quot;)&#x2F;&#x2F;这两个是一样的console.log(path.resolve(&quot;src&quot;))console.log(path.resolve(__dirname,&quot;src&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在tsconfig-json中配置路径别名"><a href="#在tsconfig-json中配置路径别名" class="headerlink" title="在tsconfig.json中配置路径别名"></a>在<code>tsconfig.json</code>中配置路径别名</h3><blockquote><p><code>compilerOptions</code>中配置两个选项:<code>baseUrl</code>和<code>paths</code></p></blockquote><ul><li>设置baseUrl不会影响相对模块导入，因为它们始终相对于导入文件进行解析<ul><li>例如:<code>&quot;baseUrl&quot;: &quot;./src&quot;</code>，然后jquery应该映射到<code>&quot;../node_modules/jquery/dist/jquery&quot;</code></li><li>参考: <a href="https://zhuanlan.zhihu.com/p/46696498">https://zhuanlan.zhihu.com/p/46696498</a></li></ul></li><li><code>baseUrl</code>关联<code>path</code>的设置,将文件映射为自己设置的别名</li></ul><blockquote><p>例如:</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"./src"</span><span class="token punctuation">,</span>    <span class="token property">"paths"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token property">"@/*"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token string">"*"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在src下目录开始查找</p></li><li><p>在<code>resolve</code>属性的<code>alias</code>配置别名</p></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">resolve: &#123;  alias: &#123;    &#x2F;&#x2F;第一种    &#x2F;&#x2F;&#39;@&#39;: path.resolve(__dirname, &#39;src&#39;)    &#x2F;&#x2F;第二种(本质一样)    &#x2F;&#x2F;&#39;@&#39;: resolve(&#39;src&#39;)  &#125;&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第三种是以数组的形式,<span style="color:red">注意后面的分割符一定要写</span></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">resolve: &#123;  alias: [    &#123;      find: &#x2F;@\&#x2F;&#x2F;,      replacement: &#96;$&#123;path.resolve(__dirname, &#39;src&#39;)&#125;&#x2F;&#96;    &#125;  ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> config </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的拷贝方式</title>
      <link href="/2021/10/20/js-de-kao-bei-fang-shi/"/>
      <url>/2021/10/20/js-de-kao-bei-fang-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h2><p><img src="https://www.zyjcould.ltd/img/markdownjs%E6%8B%B7%E8%B4%9D.png" alt="浅拷贝与深拷贝"></p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><blockquote><p>浅拷贝复制的是<span style="color:red">对象的引用(地址值)</span>,指向的是堆内存</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> b <span class="token operator">=</span> a <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>a拿到的是对象的地址值,b是引用类型变量,拿到的是同属于对象的地址值</li></ul><h4 id="浅拷贝的实现"><a href="#浅拷贝的实现" class="headerlink" title="浅拷贝的实现"></a>浅拷贝的实现</h4><ol><li><p>通过手动直接赋值</p></li><li><p><strong>Object.assign()</strong></p></li></ol><blockquote><p>将所有可枚举的 自身属性从一个或多个 源对象复制到目标对象.它返回修改后的目标对象.</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">&#123;</span> b<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> returnedTarget <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returnedTarget<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Object &#123; a: 1, b: 4, c: 5 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当Object只有一层的时候是深拷贝</li><li>当Object有多层包裹的时候,被包裹的多层是浅拷贝</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"zhangsan"</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">&#123;</span> father<span class="token operator">:</span> <span class="token string">"zhanger"</span><span class="token punctuation">,</span> mother<span class="token operator">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span>friends<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"lisi"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> returnedTarget <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span>  returnedTarget<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhaoliu"</span>returnedTarget<span class="token punctuation">.</span>mother <span class="token operator">=</span> <span class="token string">"wangba"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token comment">//&#123;name: 'zhangsan', father: 'zhanger', mother: 'wangba', friends: &#123;name: 'zhaoliu'&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token comment">//&#123;father: 'zhanger', mother: 'wangwu', friends: &#123;name: 'zhaoliu'&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returnedTarget<span class="token punctuation">)</span><span class="token comment">//&#123;name: 'zhangsan', father: 'zhanger', mother: 'wangba', friends: &#123;name: 'zhaoliu'&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回的对象就是目标对象</li></ul><ol start="3"><li>使用扩展运算符(…)</li></ol><blockquote><p>扩展运算符与**Object.assign()**功能相同</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> friends<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>obj1 <span class="token punctuation">&#125;</span>obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"wangba"</span>obj1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"liuneng"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token comment">//&#123;name: 'zhangsan', friends: &#123;name: 'liuneng', age: 12&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><blockquote><p>深拷贝是彻底复制一个对象,而不是复制对象的引用.在对立面对应的不是同一个对象,是复制过的新对象.深拷贝会创造一个一模一样的都西昂</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span>y<span class="token operator">:</span>a<span class="token punctuation">.</span>y<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果修改对象b中的值,对象a中的值并不会改变</li></ul><h4 id="深拷贝的实现"><a href="#深拷贝的实现" class="headerlink" title="深拷贝的实现"></a>深拷贝的实现</h4><ol><li><p>手动赋值</p></li><li><p>当对象只有一层:使用<strong>Object.assign()<strong>或者</strong>扩展运算符</strong></p></li><li><p>使用<strong>JSON</strong>转换</p></li></ol><blockquote><p>用<code>JSON.stringify</code>把对象转成字符串,再用<code>JSON.parse</code>把字符串转成新的对象</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> father<span class="token operator">:</span> <span class="token string">"zhanger"</span><span class="token punctuation">,</span> mother<span class="token operator">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span> friends<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"lisi"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhaoliu"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token comment">//&#123; father: "zhanger", mother: "wangwu", friends: &#123; name: "lisi" &#125; &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token comment">//&#123; father: "zhanger", mother: "wangwu", friends: &#123; name: "zhaoliu" &#125; &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于lodash库的使用"><a href="#关于lodash库的使用" class="headerlink" title="关于lodash库的使用"></a>关于lodash库的使用</h3><ul><li>浅拷贝<strong>lodash的_.clone</strong></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    c<span class="token operator">:</span> <span class="token punctuation">&#123;</span> d<span class="token operator">:</span> <span class="token punctuation">&#123;</span> e<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d <span class="token operator">===</span> obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>深拷贝<strong>lodash的_.cloneDeep</strong></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    c<span class="token operator">:</span> <span class="token punctuation">&#123;</span> d<span class="token operator">:</span> <span class="token punctuation">&#123;</span> e<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d <span class="token operator">===</span> obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git版本控制</title>
      <link href="/2021/10/09/git-ban-ben-kong-zhi/"/>
      <url>/2021/10/09/git-ban-ben-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li>$ <code>git config --gloabl user.name=&quot;jack&quot;</code></li><li>$ <code>git config --gloabl user.email=1553198027@qq.com</code></li><li>检查配置信息 <code>git config--list</code></li><li><code>git init</code> 生成仓库</li></ul><h3 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h3><blockquote><p>工作区,暂存区,版本库</p></blockquote><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>Git对象<ol><li>key:value 组成的键值对(key是value对应的hash)</li><li>值对在git内部是一个blob类型</li></ol></li><li>树对象<ul><li>项目的快照就是一个树对象</li></ul></li><li>提交对象<ul><li>项目的版本就是一个提交对象</li></ul></li></ul><h3 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h3><h4 id="创建工作目录-对工作目录进行修改"><a href="#创建工作目录-对工作目录进行修改" class="headerlink" title="创建工作目录 对工作目录进行修改"></a>创建工作目录 对工作目录进行修改</h4><ul><li><code>git add ./</code>(下面的属于解释)<ol><li>git hash-object -w 文件名(修改了多少个工作目录中的文件 此命令就要被执行多少次)</li><li>git update-index…</li></ol></li><li><code>git commit -m &quot;注释内容&quot;</code>(下面的属于解释)<ol><li>git write-tree</li><li>git commit-tree</li></ol></li></ul><h4 id="git暂存区命令"><a href="#git暂存区命令" class="headerlink" title="git暂存区命令"></a>git暂存区命令</h4><table><thead><tr><th><code>git init</code></th><th>初始化仓库</th></tr></thead><tbody><tr><td><code>git status</code></td><td>查看本地工作区信息</td></tr><tr><td><code>git diff</code></td><td>查看还有哪些文件没有暂存</td></tr><tr><td><code>git diff --staged</code></td><td>查看哪些修改已经被暂存,还没有提交</td></tr><tr><td><code>git add ./</code></td><td>提交所有变化</td></tr><tr><td><code>git add –u</code></td><td>提交被修改和被删除文件(不包括新文件)</td></tr><tr><td><code>git add –A</code></td><td>提交所有变化</td></tr><tr><td><code>git ls-files -s</code></td><td>查看暂存区存储状况</td></tr></tbody></table><h4 id="更改文件与提交"><a href="#更改文件与提交" class="headerlink" title="更改文件与提交"></a>更改文件与提交</h4><table><thead><tr><th><code>git rm 文件名</code></th><th>删除工作目录中的对应文件 再将修改添加到暂存区</th></tr></thead><tbody><tr><td><code>git mv 原文件名 新文件名</code></td><td>将工作目录中的文件进行重命名 再将修改添加到暂存区</td></tr><tr><td><code>git commit</code></td><td>在文本中编辑注释</td></tr><tr><td><code>git commit -a</code></td><td>跳过暂存区提交</td></tr><tr><td><code>git commit -m 注释</code></td><td>将暂存区提交到版本库</td></tr><tr><td><code>git commit -a -m 注释</code></td><td>跳过暂存区提交编辑注释</td></tr><tr><td><code>git commit –amend 注释</code></td><td>(原来提交基础上提交,不是新的提交)</td></tr></tbody></table><h4 id="git版本查看"><a href="#git版本查看" class="headerlink" title="git版本查看"></a>git版本查看</h4><table><thead><tr><th><code>git log</code></th><th>带有完全键很多信息的版本查看,如作者</th></tr></thead><tbody><tr><td><code>git log --oneline</code></td><td>只有部分键,部分信息的版本查看</td></tr><tr><td><code>git log --prety=oneline</code></td><td>查看提交的历史记录</td></tr><tr><td><code>git log --oneline --decorate --graph --all</code></td><td>查看项目分叉历史</td></tr><tr><td><code>git config --global alias.别名</code></td><td>“git后的命令”配置别名</td></tr><tr><td><code>git log -1</code></td><td>后面加数字,显示最近的几次提交</td></tr></tbody></table><h3 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h3><table><thead><tr><th><code>git branch</code></th><th>显示分支列表</th></tr></thead><tbody><tr><td><code>git branch 分支名</code></td><td>创建分支</td></tr><tr><td><code>git checkout 分支名</code></td><td>切换分支</td></tr><tr><td><code>git branch -D 分支名</code></td><td>强制删除分支</td></tr><tr><td><code>git branch -d branchname</code></td><td>普通删除分支</td></tr><tr><td><code>git merge branchname</code></td><td>合并分支</td></tr><tr><td><code>git reflog –-date=local</code></td><td>查看当前分支是基于哪个分支建立的</td></tr><tr><td></td><td></td></tr></tbody></table><ul><li>快进合并:分支在一条线上,不会产生冲突</li><li>典型合并:分支不在同一条线上,有机会产生冲突</li><li>解决冲突:打开冲突的文件 进行修改add commit</li></ul><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><blockquote><p>在切换分支时,如果当前分支上有<span style="color:red">未暂存的修改(第一次)或者有未提交的的暂存(第一次)</span>分支可以切换成功,但这种操作可能污染其它分支</p></blockquote><h4 id="区域的的更改"><a href="#区域的的更改" class="headerlink" title="区域的的更改"></a>区域的的更改</h4><ul><li>工作区<ul><li>如何撤回自己在工作目录中的修改(git checkout –filename)</li><li>git restore 文件名</li></ul></li><li>暂存区<ul><li>如何撤回自己的暂存:(git rset HEAD fileman)</li><li>git restore –staged 文件名</li></ul></li><li>版本库<ul><li>如何撤回自己的提交</li><li>1.注释写错了重新给用户一次机会该注释<code>git commit --amend</code></li></ul></li></ul><h4 id="版本回退-revert和resert"><a href="#版本回退-revert和resert" class="headerlink" title="版本回退(revert和resert)"></a>版本回退(revert和resert)</h4><blockquote><p><code>git log</code></p><blockquote><p><code>git reflog</code>只要是HEAD有变化,那么<code>git rsflog</code>就会记录下来</p></blockquote></blockquote><ol><li><code>git revert</code>是用一次新的commit来回滚之前的commit,<code>git reset</code>是直接删除指定的commit.</li><li><code>git reset</code> 是把HEAD<strong>向后移动</strong>了一下,而<code>git revert</code>是HEAD<strong>继续前进</strong></li><li>新的commit的内容和要revert的内容正好相反,能够抵消要被revert的内容</li></ol><blockquote><p>参数:</p></blockquote><ol><li><strong>–soft</strong>:重置HEAD到另外一个commit,但也到此为止 , 所有变更都集中到暂存区,工作区</li><li><strong>–hard</strong>:危险操作,所有变更全部丢失,不管本地仓,暂存区,工作区</li><li><strong>–mixed</strong>:所有变更保存到工作区,本地仓,暂存区都丢失(默认参数)</li></ol><h5 id="resert"><a href="#resert" class="headerlink" title="resert"></a>resert</h5><ul><li><code>HEAD~</code>指针跟一个整数,指的是你要回退几次提交<ol><li><code>git reset --soft HEAD~  (--amend)</code>:只动HEAD(带着分支一起移动)</li><li><code>git reset [--mixed] HEAD~</code>动HEAD(带着分支一起移动),动了暂存区</li><li><code>git reset --hard HEAD~</code>动HEAD(带着分支一起移动),动了暂存区 动了工作目录</li></ol></li></ul><h5 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h5><ol><li><code>git revert HEAD</code>:撤销前一次的commit</li><li><code>git revert HEAD^</code>:撤销前前一次的commit</li><li><code>git revert commit-id</code>:撤销指定版本的提交</li></ol><blockquote><p><code>-n</code>或者<code>–no-commit</code>,应用这个参数会让revert改动只限于本地仓库,而不自动进行commit</p></blockquote><h4 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h4><ol><li><code>git remote –v</code>:查看远程版本库信息</li><li><code>git remote set-url origin git@...</code>:更改远程仓库地址(ssh)</li></ol><h4 id="分支注意"><a href="#分支注意" class="headerlink" title="分支注意"></a>分支注意</h4><ul><li><p>在切换的时候一定要保证当前分支是干净的！！！</p><ul><li>允许切换分支:<ol><li>分支上所有的内容处于已提交的状态</li><li>(避免)分支上所有的内容是处于初始化创建 处于未跟踪状态</li><li>(避免)分支上的内容是初始化创建 第一次处于已暂存状态</li></ol></li><li>不允许切分支:<ul><li>分支上所有的内容处于已修改的状态 或 第二次以后的已暂存状态</li></ul></li></ul></li><li><p>在分支上的工作做到一半时 如果有切换分支的需求,我们应该将先有的工作存储起来</p><ul><li><code>git stash</code>:会将当前分支上的工作推到一个栈中</li></ul></li><li><p>分支切换:进行其它工作 完成其它工作 切回原分支</p><ul><li><code>git stash apply</code>:将栈顶的工作内容还原 但不让任何内容出栈</li><li><code>git stash drop</code>:取出栈顶的工作内容后 就应该将其删除(出栈)</li><li><code>git stash pop</code>=<code>git stash apply+git stash drop</code></li><li><code>git stash list</code>:查看存储</li></ul></li></ul><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><blockquote><p>git可以对某个版本打上标签(tag),表示本版本为发行版</p></blockquote><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>git tag</td><td>查看所有标签</td></tr><tr><td>git tag -l 1.<em>.</em></td><td>打印符合检索田间的标签</td></tr><tr><td>git checkout 1.0.0</td><td>查看对应标签的状态</td></tr></tbody></table><blockquote><p>创建本地标签</p></blockquote><ul><li>针对特定commit版本SHA创建标签<ul><li><code>git tag -a v1.0.0 0c3b62d -m &quot;这是备注信息&quot;</code></li><li>-a:创建附注标签</li><li>&lt;哈希值&gt;:特定commit版本SHA</li><li>-m:附注</li><li>都是可选的</li></ul></li><li>创建轻量标签<code>git tag v1.0.0</code></li></ul><blockquote><p>推送标签到远程仓库</p></blockquote><ol><li>发送所有<code>git push origin --tags</code></li><li>指定版本发送<code>git push origin 1.0.0</code></li></ol><blockquote><p>删除本地标签<code>git tag -d v1.0.0</code></p><p>删除远程仓库对应的标签<code>git push origin --delete v1.0.0</code></p></blockquote><ul><li><code>git show v1.0.0</code>:该标签完整的信息</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map和Set的使用</title>
      <link href="/2021/10/04/map-he-set-de-shi-yong/"/>
      <url>/2021/10/04/map-he-set-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Map对象"><a href="#Map对象" class="headerlink" title="Map对象"></a><a href="#map%E5%AF%B9%E8%B1%A1">Map对象</a></h2><blockquote><p>一个问题:在js中<code>Object</code>无法使用除<code>string</code>类型作为非字符串<br>使用<code>Map</code>可以以任何类型作为键(包括函数、对象或任意基本类型)</p></blockquote><ul><li>本质是一组包含键值对的集合</li><li>Map中的键是顺序的。因此，当迭代的，一个Map对象以插入时的顺序返回键值</li><li>Map的键值对个数可以通过size属性获取</li><li>Map是<code>iterable</code>的，所以可以直接被迭代</li></ul><h3 id="初始化Map对象"><a href="#初始化Map对象" class="headerlink" title="初始化Map对象"></a><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96map%E5%AF%B9%E8%B1%A1">初始化Map对象</a></h3><blockquote><p>使用new初始化Map对象,初始化时传入一个二维数组<br>键值的映射</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let a: Map&lt;string, number&gt; &#x3D; new Map([  [&quot;a&quot;, 1],  [&quot;b&quot;, 2],])console.log(a)&#x2F;&#x2F;输出:Map(2) &#123; &#39;a&#39; &#x3D;&gt; 1, &#39;b&#39; &#x3D;&gt; 2 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原型属性和方法-Map-prototype"><a href="#原型属性和方法-Map-prototype" class="headerlink" title="原型属性和方法(Map.prototype)"></a><a href="#%E5%8E%9F%E5%9E%8B%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95mapprototype">原型属性和方法(Map.prototype)</a></h3><h4 id="使用size-而不是length获取长度"><a href="#使用size-而不是length获取长度" class="headerlink" title="使用size,而不是length获取长度"></a>使用<code>size</code>,而不是<code>length</code>获取长度</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.size)&#x2F;&#x2F;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h4><blockquote><p>使用keys拿到所有的键</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.keys())&#x2F;&#x2F;[Map Iterator] &#123; &#39;a&#39;, &#39;b&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="values"><a href="#values" class="headerlink" title="values"></a>values</h4><blockquote><p>使用values拿到所有的值</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.values())&#x2F;&#x2F;[Map Iterator] &#123; 1, 2 &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><blockquote><p>返回<code>key</code>对应的<code>value</code>，如果不存在，则返回undefined</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.get(&quot;a&quot;))&#x2F;&#x2F;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><blockquote><p>存储一个键值的映射</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">a.set(&quot;c&quot;,3)console.log(a)&#x2F;&#x2F;Map(3) &#123; &#39;a&#39; &#x3D;&gt; 1, &#39;b&#39; &#x3D;&gt; 2, &#39;c&#39; &#x3D;&gt; 3 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><blockquote><p>删除map中指定key对应的一组key-value元素</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">a.delete(&quot;c&quot;)console.log(a)&#x2F;&#x2F;Map(2) &#123; &#39;a&#39; &#x3D;&gt; 1, &#39;b&#39; &#x3D;&gt; 2 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="has"><a href="#has" class="headerlink" title="has"></a>has</h4><blockquote><p>检查Map是否有指定key对应的value。</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.has(&quot;a&quot;))&#x2F;&#x2F;trueconsole.log(a.has(&quot;c&quot;))&#x2F;&#x2F;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><blockquote><p>清空所有键值</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">a.clear()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Map遍历方式"><a href="#Map遍历方式" class="headerlink" title="Map遍历方式"></a><a href="#map%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F">Map遍历方式</a></h3><h4 id="遍历value"><a href="#遍历value" class="headerlink" title="遍历value"></a>遍历value</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">for (let value of a.values()) &#123;  console.log(value)  &#x2F;&#x2F;1  &#x2F;&#x2F;2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历keys"><a href="#遍历keys" class="headerlink" title="遍历keys"></a>遍历keys</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">for (let key of a.keys()) &#123;  console.log(key)  &#x2F;&#x2F;a  &#x2F;&#x2F;b&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用for…of遍历"><a href="#使用for…of遍历" class="headerlink" title="使用for…of遍历"></a>使用for…of遍历</h4><blockquote><p><code>for...of</code>遍历得到一组组数组</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">for (let item of a) &#123;  console.log(item)  &#x2F;&#x2F;[ &#39;a&#39;, 1 ]  &#x2F;&#x2F;[ &#39;b&#39;, 2 ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用foreach遍历"><a href="#使用foreach遍历" class="headerlink" title="使用foreach遍历"></a>使用foreach遍历</h4><blockquote><p><code>foreach</code>遍历拿到的值和键</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">a.forEach((value, key) &#x3D;&gt; &#123;  console.log(value, key)  &#x2F;&#x2F;1 a  &#x2F;&#x2F;2 b&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用entries遍历"><a href="#使用entries遍历" class="headerlink" title="使用entries遍历"></a>使用entries遍历</h4><blockquote><p>迭代器 函数默认就是<code>entries()</code>函数<br>该方法返回Map集合中每个 <code>[key，value]</code>元素的对象</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.entries())&#x2F;&#x2F;[Map Entries] &#123; [ &#39;a&#39;, 1 ], [ &#39;b&#39;, 2 ] &#125;for (let item of a.entries()) &#123;  console.log(item)  &#x2F;&#x2F;[ &#39;a&#39;, 1 ]  &#x2F;&#x2F;[ &#39;b&#39;, 2 ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用spread扩展运算符"><a href="#使用spread扩展运算符" class="headerlink" title="使用spread扩展运算符"></a>使用spread扩展运算符</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(...a.keys())&#x2F;&#x2F;a bconsole.log(...a.values())&#x2F;&#x2F;1 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Map的注意"><a href="#Map的注意" class="headerlink" title="Map的注意"></a><a href="#map%E7%9A%84%E6%B3%A8%E6%84%8F">Map的注意</a></h3><h4 id="Map和数组的关系"><a href="#Map和数组的关系" class="headerlink" title="Map和数组的关系"></a>Map和数组的关系</h4><blockquote><ul><li>Map构造函数可以将一个二维键值对数组转换成一个Map对象</li><li>使用扩展运算符将Map对象换成一个二维键值对数组</li><li>可以使用<code>Array.from()</code>将一个Map对象转换成一个二维键值对数组</li></ul></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let b&#x3D;[[&quot;a&quot;,1],[&quot;b&quot;,2]]let a: Map&lt;string, number&gt; &#x3D; new Map(b)&#x2F;&#x2F;使用Array.from()函数console.log(Array.from(a))&#x2F;&#x2F;使用展开运算符console.log([...myMap])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复制或合并Maps"><a href="#复制或合并Maps" class="headerlink" title="复制或合并Maps"></a>复制或合并Maps</h4><ul><li>[参考]<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map</a></li></ul><blockquote><ul><li>复制</li></ul></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let c&#x3D;new Map(a)console.log(a&#x3D;&#x3D;&#x3D;c)&#x2F;&#x2F;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>浅比较,比较的是地址,不为同一个对象的引用</li></ul><blockquote><p>对象和对象可以进行合并,对象和数组可以进行合并</p><blockquote><p>合并之后如果有重复的键值，则后面的会覆盖前面的<br>本质是用展开运算符先将对象转换成数组</p></blockquote></blockquote><h2 id="Set对象"><a href="#Set对象" class="headerlink" title="Set对象"></a><a href="#set%E5%AF%B9%E8%B1%A1">Set对象</a></h2><blockquote><ul><li>Set 对象允许你存储任何类型的<span style="color:red">唯一值</span>，无论是原始值或者是对象引用</li><li>传入对象比较的是地址,不同地址也是唯一值</li></ul></blockquote><h3 id="初始化Set对象"><a href="#初始化Set对象" class="headerlink" title="初始化Set对象"></a><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96set%E5%AF%B9%E8%B1%A1">初始化Set对象</a></h3><blockquote><p>传入一个一维数组</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let a &#x3D; new Set([1, &quot;a&quot;, &#123; a: &quot;name&quot; &#125;, &#123; a: &quot;name&quot; &#125;])console.log(a)&#x2F;&#x2F;Set(4) &#123; 1, &#39;a&#39;, &#123; a: &#39;name&#39; &#125;, &#123; a: &#39;name&#39; &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="原型属性和方法-Set-prototype"><a href="#原型属性和方法-Set-prototype" class="headerlink" title="原型属性和方法(Set.prototype)"></a><a href="#%E5%8E%9F%E5%9E%8B%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95setprototype">原型属性和方法(Set.prototype)</a></h3><h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.size)&#x2F;&#x2F;4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4><blockquote><p>在对象中添加一个元素set</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let o &#x3D; &#123; a: &quot;name&quot; &#125;a.add(o)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="has-1"><a href="#has-1" class="headerlink" title="has()"></a>has()</h4><blockquote><p>返回一个布尔值,表示在Set中是否存在该值</p></blockquote><ul><li>注意:如果直接传入一个对象属性,地址值不同,返回false<ul><li>所以最好将引用传入</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.has(o))&#x2F;&#x2F;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="delete-1"><a href="#delete-1" class="headerlink" title="delete()"></a>delete()</h4><ul><li>注意:如果直接传入一个对象属性,地址值不同,并不会删除,<ul><li>所以最好将引用传入,删除时传入引用</li><li>且返回值是一个boolean</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.delete(&#123; a: &quot;name&quot; &#125;))&#x2F;&#x2F;falseconsole.log(a.delete(o))&#x2F;&#x2F;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="values-和keys"><a href="#values-和keys" class="headerlink" title="values()和keys()"></a>values()和keys()</h4><blockquote><p><code>keys()</code>和<code>values()</code>方法相同，返回一个新的对象的对象对象，Set应该包含的插入顺序的所有元素的值</p></blockquote><ul><li>且同样可以使用展开运算符</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(a.keys())&#x2F;&#x2F;[Set Iterator] &#123; 1, &#39;a&#39;, &#123; a: &#39;name&#39; &#125;, &#123; a: &#39;name&#39; &#125; &#125;console.log(...a.values())&#x2F;&#x2F;1 a &#123; a: &#39;name&#39; &#125; &#123; a: &#39;name&#39; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="clear-1"><a href="#clear-1" class="headerlink" title="clear()"></a>clear()</h4><blockquote><p>删除Set对象中的所有元素</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">a.clear()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a><a href="#%E9%81%8D%E5%8E%86">遍历</a></h3><blockquote><p>对于Set来讲<code>value</code>和<code>key</code>是相同的,不管是使用<code>forEach</code>,<code>for...of</code>迭代出的键和值都是相同的(这里就不演示了)</p></blockquote><h3 id="Set的注意"><a href="#Set的注意" class="headerlink" title="Set的注意"></a><a href="#set%E7%9A%84%E6%B3%A8%E6%84%8F">Set的注意</a></h3><ul><li>[参考]<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set</a></li></ul><h4 id="Set和Array的关系"><a href="#Set和Array的关系" class="headerlink" title="Set和Array的关系"></a>Set和Array的关系</h4><blockquote><ul><li>Set构造函数可以将一个一维数组转换成一个Map对象</li><li>使用扩展运算符将Map对象换成一个一维数组</li><li>可以使用<code>Array.from()</code>将一个Set对象转换成一个一维数组</li></ul></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let myArray &#x3D; [&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;]let mySet &#x3D; new Set(myArray)console.log(Array.from(mySet))&#x2F;&#x2F;[&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;]console.log([...mySet])&#x2F;&#x2F;[&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><blockquote><p>利用Set对象中只有唯一值的特性,可以做到数组去重</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const numbers &#x3D; [2,3,4,4,2,3,3,4,4,5,5,6,6,7,5,32,3,4,5]console.log([...new Set(numbers)])&#x2F;&#x2F; [2, 3, 4, 5, 6, 7, 32]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><blockquote><p>在js中string也是一个一维数组,利用Set可以将string变成一个一维数组</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log([...new Set(&quot;index&quot;)])&#x2F;&#x2F;[ &#39;i&#39;, &#39;n&#39;, &#39;d&#39;, &#39;e&#39;, &#39;x&#39; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>并且Set可以区分大小写</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">console.log(new Set(&quot;Firefox&quot;))  &#x2F;&#x2F; Set(7) [ &quot;F&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;f&quot;, &quot;o&quot;, &quot;x&quot; ]console.log(new Set(&quot;firefox&quot;))&#x2F;&#x2F; Set(6) [ &quot;f&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;o&quot;, &quot;x&quot; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3+ts工程化搭建</title>
      <link href="/2021/10/02/vue3-ts-gong-cheng-hua-da-jian/"/>
      <url>/2021/10/02/vue3-ts-gong-cheng-hua-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-cli配置脚手架的注意项"><a href="#vue-cli配置脚手架的注意项" class="headerlink" title="vue-cli配置脚手架的注意项"></a><a href="#vue-cli%E9%85%8D%E7%BD%AE%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E9%A1%B9">vue-cli配置脚手架的注意项</a></h2><ul><li><p>选择手动配置后的选项</p><ul><li><input checked="" disabled="" type="checkbox"> Babel: Babel编译</li><li><input checked="" disabled="" type="checkbox"> TypeScript:TypeScript支持</li><li><input disabled="" type="checkbox"> Progressive Web App (PWA) Support: PWA支持</li><li><input checked="" disabled="" type="checkbox"> Router: Vue路由</li><li><input checked="" disabled="" type="checkbox"> Vuex: Vue状态管理</li><li><input checked="" disabled="" type="checkbox"> CSS Pre-processors: CSS预编译器（包括:SCSS/Sass,Less,Stylus）</li><li><input checked="" disabled="" type="checkbox"> Linter / Formatter: 代码检测和格式化</li><li><input disabled="" type="checkbox"> Unit Testing: 单元测试</li><li><input disabled="" type="checkbox"> E2E Testing: 端到端测试</li></ul></li><li><p>使用Linter / Formatter选择</p><ul><li><input checked="" disabled="" type="checkbox"> ESLint+Prettier:选择自定义风格项(自己配置)</li><li>之后是关于在保存前检测还是fix和commit时检测</li><li><img src="Prettier.png" alt="选项"></li></ul></li><li><p><img src="package%E7%9A%84%E4%BF%9D%E5%AD%98.png" alt="包配置的保存"></p><ul><li><code>In dedicated config files</code>:单独保存在各自的配置文件中</li><li><code>In package.json</code>:保存在package.json文件中</li></ul></li></ul><h2 id="集成editorconfig"><a href="#集成editorconfig" class="headerlink" title="集成editorconfig"></a><a href="#%E9%9B%86%E6%88%90editorconfig">集成editorconfig</a></h2><blockquote><p>说明:<code>editorconfig</code>配置是为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格</p></blockquote><ul><li><p>VSCode需要安装一个插件:EditorConfig for VS Code</p></li><li><p>参考文档:<a href="http://editorconfig.org/">http://editorconfig.org</a></p></li><li><p>配置<code>.editorconfig</code>文件</p></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">root = true<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token comment"># 表示所有文件适用</span>charset = utf<span class="token punctuation">-</span><span class="token number">8</span> <span class="token comment"># 设置文件字符集为 utf-8</span>indent_style = space <span class="token comment"># 缩进风格（tab | space）</span>indent_size = 2 <span class="token comment"># 缩进大小</span>end_of_line = lf <span class="token comment"># 控制换行类型(lf | cr | crlf)</span>trim_trailing_whitespace = true <span class="token comment"># 去除行首的任意空白字符</span>insert_final_newline = true <span class="token comment"># 始终在文件末尾插入一个新行</span><span class="token punctuation">[</span><span class="token important">*.md</span><span class="token punctuation">]</span> <span class="token comment"># 表示仅 md 文件适用以下规则</span>max_line_length = offtrim_trailing_whitespace = false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="prettier工具"><a href="#prettier工具" class="headerlink" title="prettier工具"></a><a href="#prettier%E5%B7%A5%E5%85%B7">prettier工具</a></h2><blockquote><p>说明:一款强大的代码格式化工具，支持 <code>JavaScript</code>,<code>TypeScript</code>,<code>CSS</code>,<code>SCSS</code>,<code>Less</code>,<code>JSX</code>,<code>Angular</code>,<code>Vue</code>,<code>GraphQL</code>,<code>JSON</code>,<code>Markdown</code> 等语言</p></blockquote><ul><li>vue脚手架并不会集成<code>prettier</code>插件,要自己安装<ul><li><code>npm install prettier -D</code></li></ul></li></ul><h3 id="配置-prettierrc文件"><a href="#配置-prettierrc文件" class="headerlink" title="配置.prettierrc文件"></a><a href="#%E9%85%8D%E7%BD%AEprettierrc%E6%96%87%E4%BB%B6">配置<code>.prettierrc</code>文件</a></h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>useTabs</td><td>使用tab缩进还是空格缩进，选择false</td></tr><tr><td>tabWidth</td><td>tab是空格的情况下，是几个空格，选择2个</td></tr><tr><td>printWidth</td><td>当行字符的长度，推荐80</td></tr><tr><td>singleQuote</td><td>使用单引号还是双引号，选择true，使用单引号</td></tr><tr><td>trailingComma</td><td>在多行输入的尾逗号是否添加，设置为 <code>none</code></td></tr><tr><td>semi</td><td>语句末尾是否要加分号，默认值true，选择false表示不加</td></tr></tbody></table><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"useTabs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"tabWidth"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置-prettierignore忽略文件"><a href="#配置-prettierignore忽略文件" class="headerlink" title="配置.prettierignore忽略文件"></a><a href="#%E9%85%8D%E7%BD%AEprettierignore%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6">配置<code>.prettierignore</code>忽略文件</a></h3><pre class="line-numbers language-ignore" data-language="ignore"><code class="language-ignore"><span class="token entry string"><span class="token punctuation">/</span>dist<span class="token punctuation">/</span><span class="token operator">*</span></span><span class="token entry string">.local</span><span class="token entry string">.output.js</span><span class="token entry string"><span class="token punctuation">/</span>node_modules<span class="token punctuation">/</span><span class="token operator">**</span></span><span class="token entry string"><span class="token operator">**</span><span class="token punctuation">/</span><span class="token operator">*</span>.svg</span><span class="token entry string"><span class="token operator">**</span><span class="token punctuation">/</span><span class="token operator">*</span>.sh</span><span class="token entry string"><span class="token punctuation">/</span>public<span class="token punctuation">/</span><span class="token operator">*</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置一次性修改"><a href="#配置一次性修改" class="headerlink" title="配置一次性修改"></a><a href="#%E9%85%8D%E7%BD%AE%E4%B8%80%E6%AC%A1%E6%80%A7%E4%BF%AE%E6%94%B9">配置一次性修改</a></h3><blockquote><p>在<code>package.json</code>中配置一个<code>scripts</code>(脚本):</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"prettier"</span><span class="token operator">:</span> <span class="token string">"prettier --write ."</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ESLint检测"><a href="#ESLint检测" class="headerlink" title="ESLint检测"></a><a href="#eslint%E6%A3%80%E6%B5%8B">ESLint检测</a></h2><blockquote><p>说明: Vue会默认帮助我们配置需要的ESLint环境</p></blockquote><ul><li><p>VSCode需要安装ESLint插件</p></li><li><p>注意:<code>eslint</code>和<code>prettier</code>冲突的问题</p><ul><li>插件的安装(vue创建项目时,如果选择<code>prettier</code>,这两个插件会自动安装):</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm i eslint-plugin-prettier eslint-config-prettier -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在<code>.eslintrc.js</code>继承中添加插件</p></li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">extends<span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token string">"plugin:vue/vue3-essential"</span><span class="token punctuation">,</span>   <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>   <span class="token string">"@vue/typescript/recommended"</span><span class="token punctuation">,</span>   <span class="token string">"@vue/prettier"</span><span class="token punctuation">,</span>   <span class="token string">"@vue/prettier/@typescript-eslint"</span><span class="token punctuation">,</span>   'plugin<span class="token operator">:</span>prettier/recommended' <span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-Husky和eslint"><a href="#git-Husky和eslint" class="headerlink" title="git Husky和eslint"></a><a href="#git-husky%E5%92%8Ceslint">git Husky和eslint</a></h2><blockquote><ul><li>说明husky是一个git hook工具，可以帮助我们触发git提交的各个阶段：<code>pre-commit</code>,<code>commit-msg</code>,<code>pre-push</code></li><li>项目虽然使用eslint了，但是不能保证组员提交代码之前都将<code>eslint</code>中的问题解决掉</li></ul></blockquote><ul><li>保证代码仓库中的代码都是符合eslint规范</li><li>在组员执行 <code>git commit</code> 命令的时候对其进行校验，如果不符合eslint规范，那么自动通过规范进行修复</li></ul><ol><li>安装相关依赖:<code>npm install husky -D</code></li><li>在项目目录下创建<code>.husky</code>文件夹<ul><li><code>npx husky install</code></li></ul></li><li>在<code>package.json</code>中添加一个脚本<ul><li><code>&quot;prepare&quot;:&quot;husky install&quot;</code></li></ul></li><li>初始化<code>pre-commit</code>脚本</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npx husky add .husky&#x2F;pre-commit &quot;npm run lint&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这个时候我们执行git commit的时候会自动对代码进行lint校验.</p><blockquote><p>这又产生了一个问题:那就是commit提交的规范,接下来要说的</p></blockquote></blockquote><h2 id="git-commit规范"><a href="#git-commit规范" class="headerlink" title="git commit规范"></a><a href="#git-commit%E8%A7%84%E8%8C%83">git commit规范</a></h2><h3 id="代码提交风格"><a href="#代码提交风格" class="headerlink" title="代码提交风格"></a><a href="#%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E9%A3%8E%E6%A0%BC">代码提交风格</a></h3><blockquote><p>说明:<code>Commitizen</code> 是一个帮助我们编写规范 <code>commit message</code> 的工具</p></blockquote><ul><li>git commit会按照统一的风格来提交，这样可以快速定位每次提交的内容，方便之后对版本进行控制</li></ul><ol><li>安装相关依赖:<code>npm install commitizen -D</code></li><li>安装<code>cz-conventional-changelog</code>并且初始化<code>cz-conventional-changelog</code></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npx commitizen init cz-conventional-changelog --save-dev --save-exact<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这个命令会帮助我们安装<code>cz-conventional-changelog</code>依赖</li><li>并且在 <code>package.json</code>中进行配置</li><li><img src="commit%E8%A7%84%E8%8C%83.jpg" alt="配置生成"></li></ul><h4 id="使用命令以及配置脚本"><a href="#使用命令以及配置脚本" class="headerlink" title="使用命令以及配置脚本"></a>使用命令以及配置脚本</h4><ul><li>提交代码需要使用<code>npx cz</code></li><li>同时也可以在<code>scripts</code>中构建一个命令来执行 <code>cz</code><ul><li><code>&quot;commit&quot;:&quot;cz&quot;</code>:直接运行<code>npm run commit</code></li></ul></li></ul><h4 id="commit-message的选项"><a href="#commit-message的选项" class="headerlink" title="commit message的选项"></a><a href="#commit-message%E7%9A%84%E9%80%89%E9%A1%B9">commit message的选项</a></h4><blockquote><p>选项一:本次更新的类型</p></blockquote><table><thead><tr><th>Type</th><th>作用</th></tr></thead><tbody><tr><td><code>feat</code></td><td>新增特性 (feature)</td></tr><tr><td><code>fix</code></td><td>修复 Bug(bug fix)</td></tr><tr><td><code>docs</code></td><td>修改文档 (documentation)</td></tr><tr><td><code>style</code></td><td>代码格式修改(white-space, formatting, missing semi colons, etc)</td></tr><tr><td><code>refactor</code></td><td>代码重构(refactor)</td></tr><tr><td><code>perf</code></td><td>改善性能(A code change that improves performance)</td></tr><tr><td><code>test</code></td><td>测试(when adding missing tests)</td></tr><tr><td><code>build</code></td><td>变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等）</td></tr><tr><td><code>ci</code></td><td>更改持续集成软件的配置文件和 package 中的 scripts 命令，例如 scopes: Travis, Circle 等</td></tr><tr><td><code>chore</code></td><td>变更构建流程或辅助工具(比如更改测试环境)</td></tr><tr><td><code>revert</code></td><td>代码回退</td></tr></tbody></table><blockquote><ul><li>选项二:本次修改的范围</li><li>可以事先约定好,例如:<code>login</code>,<code>main</code>等</li><li>选项三:提交的信息</li><li>选项四:提交详细的描述信息</li><li>选项五:是否为一次重大的更改</li><li>选项六:是否影响到某个为解决的问题</li></ul></blockquote><h3 id="代码的提交验证"><a href="#代码的提交验证" class="headerlink" title="代码的提交验证"></a><a href="#%E4%BB%A3%E7%A0%81%E7%9A%84%E6%8F%90%E4%BA%A4%E9%AA%8C%E8%AF%81">代码的提交验证</a></h3><blockquote><p>说明:如果<code>git commit</code> 按照不规范的格式提交,可以通过commitlint来限制提交</p></blockquote><ol><li>安装依赖:<ul><li><code>npm i @commitlint/config-conventional @commitlint/cli -D</code></li></ul></li><li>在根目录创建<code>commitlint.config.js</code>文件，配置<code>commitlint</code>:</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@commitlint/config-conventional'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用husky生成<code>commit-msg</code>文件，验证提交信息</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npx husky add .husky&#x2F;commit-msg &quot;npx --no-install commitlint --edit $1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="生产环境-开发环境-测试环境"><a href="#生产环境-开发环境-测试环境" class="headerlink" title="生产环境,开发环境,测试环境"></a><a href="#%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83">生产环境,开发环境,测试环境</a></h2><ul><li>根据<code>process.env.NODE_ENV</code>区分<ul><li>开发环境: <code>development</code></li><li>生成环境: <code>production</code></li><li>测试环境: <code>test</code></li></ul></li></ul><h3 id="使用config文件封装各种测试"><a href="#使用config文件封装各种测试" class="headerlink" title="使用config文件封装各种测试"></a>使用config文件封装各种测试</h3><blockquote><p>脚手架会自动检测</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let BASE_URL &#x3D; &#39;&#39;const TIME_OUT &#x3D; 10000if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;development&#39;) &#123;  BASE_URL &#x3D; &#39;...&#x2F;dev&#39;&#125; else if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;) &#123;  BASE_URL &#x3D; &#39;...&#x2F;prod&#39;&#125; else &#123;  BASE_URL &#x3D; &#39;...&#x2F;test&#39;&#125;export &#123; BASE_URL, TIME_OUT &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用不同的环境配置文件"><a href="#使用不同的环境配置文件" class="headerlink" title="使用不同的环境配置文件"></a>使用不同的环境配置文件</h3><blockquote><p>使用<code>VUE_APP</code>开头的自定义变量,或者直接使用BASE_URL</p></blockquote><ol><li><code>.env.development</code>:<code>VUE_APP_BASE_URL=&#39;.../dev&#39;</code></li><li><code>.env.production</code>:<code>VUE_APP_BASE_URL= &#39;.../prod&#39;</code></li><li><code>.env.test</code>:<code>VUE_APP_BASE_URL= &#39;.../test&#39;</code></li></ol><blockquote><p>如果需要取值,需要用<code>process.env.VUE_APP_BASE_URL</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> config </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS中面向对象</title>
      <link href="/2021/10/01/ts-zhong-mian-xiang-dui-xiang/"/>
      <url>/2021/10/01/ts-zhong-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(class)</h2><ol><li><p>静态属性(类属性),使用<code>static</code>关键字,可以直接通过<code>类名.</code>调用</p><p>例如:<code>static gender:string=&quot;男&quot;</code></p></li><li><p><code>readonly</code>表示只读属性,无法修改</p><p>例如: <code>readonly height:number=123</code></p></li></ol><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><code>constructor</code>被称为构造函数,构造函数会在对象创建时调用</li><li>TIPS:<ul><li>在实例方法,this表示当前的实例</li><li>在构造函数中当前对象就是当前新建的那个对象</li><li>通过this向新建的对象中添加属性</li></ul></li></ol><pre class="line-numbers language-TS" data-language="TS"><code class="language-TS">class Dog&#123;  name: string  age:number  constructor(name:string,age:number)&#123;    this.name&#x3D;name    this.age&#x3D;age  &#125;  bark()&#123;    &#x2F;&#x2F;在方法中可以通过this表示当前调用的对象    console.log(this)  &#125;&#125;const dog&#x3D;new Dog(&quot;伞兵&quot;,3)console.log(dog)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><blockquote><p>继承是多态使用的前提,(子类不同的行为)</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Animal&#123;  name: string  age:number  constructor(name:string,age:number)&#123;    this.name&#x3D;name    this.age&#x3D;age  &#125;  sayhello()&#123;    console.log(this.name+&quot;动物&quot;)  &#125;&#125;class Dog extends Animal&#123;  sayhello()&#123;    console.log(&quot;狗叫&quot;)  &#125;&#x2F;&#x2F;方法重写&#125;class Cat extends Animal&#123;  sayhello()&#123;    console.log(&#96;$&#123;this.name&#125;叫&#96;)  &#125;&#125;const dog&#x3D;new Dog(&quot;狗&quot;,2)const cat&#x3D;new Cat(&quot;猫&quot;,3)dog.sayhello()cat.sayhello()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><blockquote><p>在类的方法中,super就指的是当前类的父类</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Animal&#123;    name: string    age:number    constructor(name:string,age:number)&#123;      this.name&#x3D;name      this.age&#x3D;age    &#125;    sayhello()&#123;      console.log(this.name+&quot;动物&quot;)    &#125;  &#125;  class Dog extends Animal&#123;    gender:string    &#x2F;&#x2F;如果在子类写了构造函数会覆盖父类的构造函数    constructor(name:string,age:number,gender:string)&#123;      super(name,age)      this.gender&#x3D;gender    &#125;    sayhello()&#123;      super.sayhello()&#x2F;&#x2F;直接引用父类的方法    &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性的封装"><a href="#属性的封装" class="headerlink" title="属性的封装"></a>属性的封装</h3><ol><li><code>public</code>:可以在任意位置修改</li><li><code>private</code>:私有属性,只能在类内部进行访问<ul><li>通过<code>get,set</code>方法进行访问</li></ul></li><li><code>protected</code>:只能在当前类和当前类的子类中访问</li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Person&#123;   private _name:string   private _age:number    constructor(_name:string,_age:number)&#123;      this._name&#x3D;_name      this._age&#x3D;_age    &#125;    get name()&#123;      return this._name    &#125;    set name(value:string)&#123;      this._name&#x3D;value    &#125;    get age()&#123;      return this._age    &#125;    set age(value:number)&#123;      if(value&gt;&#x3D;0)&#123;        this._age&#x3D;value      &#125;    &#125;  &#125;  const person&#x3D;new Person(&quot;张三&quot;,12)  person.name&#x3D;&quot;lisi&quot;  console.log(person.name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li>继承是多态使用的前提<ul><li>定义很多通用的调用接口时, 通常会子类继承父类,通过多态来实现更加灵活的调用方式</li><li>父类本身可能并不需要对某些方法进行具体的实现,所以父类中定义的方法,可以定义为抽象方法</li></ul></li><li>在TypeScript中没有具体实现的方法(没有方法体)<ul><li>抽象方法,必须存在于抽象类中</li><li>抽象类是使用abstract声明的类</li></ul></li><li>抽象类的特点<ul><li>抽象类是不能被实例的话也就是<strong>不能通过new创建</strong></li><li>抽象方法必须被子类实现,否则该类必须是一个抽象类</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">abstract class Shape &#123;  abstract getArea(): number&#125;class Circle extends Shape &#123;  private r: number  constructor(r: number) &#123;    super()    this.r &#x3D; r  &#125;  getArea() &#123;    return this.r * this.r * 3.14  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在派生类中的构造函数必须调用<code>super()</code>方法</p></blockquote><h3 id="类的类型"><a href="#类的类型" class="headerlink" title="类的类型"></a>类的类型</h3><blockquote><p>类本身也是可以作为一种数据类型的</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Person &#123;  name: string &#x3D; &quot;123&quot;  eating() &#123;&#125;&#125;const p &#x3D; new Person()const p1: Person &#x3D; &#123;  name: &quot;why&quot;,  eating() &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举-enum"><a href="#枚举-enum" class="headerlink" title="枚举(enum)"></a>枚举(<code>enum</code>)</h2><ul><li>枚举其实就是将一组可能出现的值,一个个列举出来,定义在一个类型中,这个类型就是枚举类型</li><li>枚举允许开发者定义一组命名常量,常量可以是数字、字符串类型</li><li>枚举的默认值是从0开始的索引</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">enum Gender&#123;  Male&#x3D;0,  Female&#x3D;1&#125;let i:&#123;name:string,gender:Gender&#125;i&#x3D;&#123;  name:&quot;老孙&quot;,  gender:Gender.Male&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h2><h3 id="接口的声明"><a href="#接口的声明" class="headerlink" title="接口的声明"></a>接口的声明</h3><blockquote><p>对象的另外一种声明方式就是通过接口来声明</p></blockquote><ul><li>可以定义可选类型</li><li>可以定义只读属性</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IInfoType &#123;  readonly name: string  age: number  friend?: &#123;    name: string  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><blockquote><p>使用<code>interface</code>来定义对象类型,这个时候其中的<code>属性名,类型,方法</code>都是确定的,但是有时候我们会遇到类似映射关系的情况</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface ILanguageYear &#123;  [name: string]: number&#125;const languageYear: ILanguageYear &#x3D; &#123;  &quot;C&quot;: 1972,  &quot;Java&quot;: 1995,  &quot;JavaScript&quot;: 1996,  &quot;TypeScript&quot;: 2014&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><blockquote><p>建议还是用别名来定义函数</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Isum&#123;  (num1:number,num2:number):number&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="接口的继承和实现"><a href="#接口的继承和实现" class="headerlink" title="接口的继承和实现"></a>接口的继承和实现</h3><blockquote><p>接口是支持多继承的（类不支持多继承）,子类拥有父类的所有属性</p></blockquote><ul><li>类可以实现多个接口</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface ISwim &#123;  swimming: () &#x3D;&gt; void&#125;interface IFly &#123;  flying: () &#x3D;&gt; void&#125;interface IAction extends ISwim, IFly &#123;&#125;class Dog implements ISwim,IFly&#123;  swimming()&#123;    console.log(&quot;我可以游泳&quot;)  &#125;,  flying()&#123;    console.log(&quot;我可以飞&quot;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><blockquote><p>联合类型表示多个类型中一个即可</p><blockquote><p><code>type Direct=&quot;left|&quot;right&quot;|&quot;center&quot;</code></p></blockquote></blockquote><ul><li>交叉类型<ul><li>交叉类似表示需要满足多个类型的条件</li><li>交叉类型使用 &amp; 符号</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface ISwim &#123;  swimming: () &#x3D;&gt; void&#125;interface IFly &#123;  flying: () &#x3D;&gt; void&#125;type MyType &#x3D; ISwim &amp; IFlyconst obj: MyType &#x3D; &#123;  swimming() &#123;&#125;,  flying() &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="interface和type的区别"><a href="#interface和type的区别" class="headerlink" title="interface和type的区别"></a>interface和type的区别</h3><ul><li><code>interface</code>和<code>type</code>都可以用来定义对象类型<ul><li>如果是定义非对象类型,通常推荐使用type,比如<code>Direction</code>,<code>Alignment</code>,一些<code>Function</code></li></ul></li><li>如果是定义对象类型,那么他们是有区别的<ul><li><code>interface</code> 可以重复的对某个接口来定义属性和方法.</li><li>多个重复名的<code>interface</code>,所有的属性在实现时都要实现.可以利用这个特性在原有接口中添加属性</li><li><code>type</code>定义的是别名,别名是不能重复的</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IFoo &#123;  name: string&#125;interface IFoo &#123;  age: number&#125;const foo: IFoo &#x3D; &#123;  name: &quot;why&quot;,  age: 18&#125;type IBar &#x3D; &#123;  name: string  age: number&#125;&#x2F;&#x2F;不能定义一个别名两次&#x2F;&#x2F; type IBar &#x3D; &#123;&#x2F;&#x2F; &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字面量赋值"><a href="#字面量赋值" class="headerlink" title="字面量赋值"></a>字面量赋值</h3><ul><li><code>TypeScript</code>在字面量直接赋值的过程中,为了进行类型推导会进行严格的类型限制.</li><li>但是之后如果我们是先将将一个 <span style="color:red">变量标识符赋值给其他的变量时</span>,会进行freshness擦除操作.</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IPerson &#123;  name: string  age: number  height: number&#125;const info &#x3D; &#123;  name: &quot;why&quot;,  age: 18,  height: 1.88,  address: &quot;广州市&quot;&#125;&#x2F;&#x2F; freshness擦除const p: IPerson &#x3D; info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>定义函数或者是类时,如果类型不明确时,就可以使用泛型</p></blockquote><ul><li>使用any时,已经丢失了类型信息<ul><li>比如我们传入的是一个number，那么我们希望返回的可不是any类型，而是number类型</li></ul></li><li>所以，我们需要在函数中可以捕获到参数的类型是number，并且同时使用它来作为返回值的类型</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function sum&lt;Type&gt;(num: Type): Type &#123;  return num&#125;&#x2F;&#x2F; 1.调用方式一: 明确的传入类型sum&lt;number&gt;(20)sum&lt;&#123;name: string&#125;&gt;(&#123;name: &quot;why&quot;&#125;)&#x2F;&#x2F; 2.调用方式二: 类型推导sum(50)sum(&quot;abc&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方式一:通过 &lt;类型&gt; 的方式将类型传递给函数</li><li>方式二:通过类型推导，自动推导出我们传入变量的类型<ul><li>在这里会推导出它们是 字面量类型的，因为字面量类型对于我们的函数也是适用的</li></ul></li></ul><h3 id="泛型的基本补充"><a href="#泛型的基本补充" class="headerlink" title="泛型的基本补充"></a>泛型的基本补充</h3><ul><li>T:Type的缩写，类型</li><li>K,V:key和value的缩写，键值对</li><li>E:Element的缩写，元素</li><li>O:Object的缩写，对象</li></ul><h3 id="泛型接口的使用"><a href="#泛型接口的使用" class="headerlink" title="泛型接口的使用"></a>泛型接口的使用</h3><blockquote><p>可以传入默认值,如果不传默认值,在接口调用的时候使用泛型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface IPerson&lt;T1 &#x3D; string, T2 &#x3D; number&gt; &#123;  name: T1  age: T2&#125;const p: IPerson &#x3D; &#123;  name: &quot;why&quot;,  age: 18&#125;&#x2F;&#x2F;不使用默认值const p: IPerson&lt;string,number&gt; &#x3D; &#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型类的使用"><a href="#泛型类的使用" class="headerlink" title="泛型类的使用"></a>泛型类的使用</h3><ul><li>可以直接使用类型推导,不使用泛型注解</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Point&lt;T&gt; &#123;  x: T  y: T  z: T  constructor(x: T, y: T, z: T) &#123;    this.x &#x3D; x    this.y &#x3D; y    this.z &#x3D; y  &#125;&#125;&#x2F;&#x2F;方式一(类型推导)const p1 &#x3D; new Point(&quot;1.33.2&quot;, &quot;2.22.3&quot;, &quot;4.22.1&quot;)&#x2F;&#x2F;方式二const p2 &#x3D; new Point&lt;string&gt;(&quot;1.33.2&quot;, &quot;2.22.3&quot;, &quot;4.22.1&quot;)&#x2F;&#x2F;方式三const p3: Point&lt;string&gt; &#x3D; new Point(&quot;1.33.2&quot;, &quot;2.22.3&quot;, &quot;4.22.1&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><ul><li>当我们希望传入的类型有某些共性，但是这些共性可能不是在同一种类型中<ul><li>比如string和array都是有length属性的，或者某些对象也是会有length属性的</li><li>给泛型继承某些属性,来约束</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface ILength &#123;  length: number&#125;function getLength&lt;T extends ILength&gt;(arg: T) &#123;  return arg.length&#125;getLength(&quot;abc&quot;)getLength([&quot;abc&quot;, &quot;cba&quot;])getLength(&#123;length: 100&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TS模块化开发"><a href="#TS模块化开发" class="headerlink" title="TS模块化开发"></a>TS模块化开发</h2><ul><li>TypeScript的两种支持<ul><li>模块化:每个文件可以是一个独立的模块,支持ES Module,也支持CommonJS</li><li>命名空间:通过<code>nampspace</code>来声明一个命名空间</li></ul></li></ul><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><blockquote><p>在TypeScript早期时,称之为内部模块,主要是将一个模块内部再惊醒作用域的划分,防止命名冲突</p></blockquote><ul><li>命名空间是在 Web 应用程序中构建代码的好方法，所有依赖项都作为&lt;script&gt;标签包含在 HTML 页面中</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export namespace price &#123;  export function format(price: number) &#123;    return &quot;99.99&quot;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型查找"><a href="#类型查找" class="headerlink" title="类型查找"></a>类型查找</h3><ul><li>另外的一种<code>typescript</code>文件：<code>.d.ts</code>文件<ul><li>通常的<code>TypeScript</code>文件都是以<code>.ts</code>文件输出</li><li>另外一种<code>.d.ts</code>文件按,是用来做类型的声明<code>declare</code>.(仅仅是用来做类型监测,告知typescript有哪些类型)</li></ul></li><li>三种类型声明<ul><li>内置类型声明</li><li>外部定义类型声明</li><li>自己定义类型声明</li></ul></li></ul><h4 id="内置类型声明"><a href="#内置类型声明" class="headerlink" title="内置类型声明"></a>内置类型声明</h4><ul><li>内置类型声明是<code>typescript</code>自带的,帮助我们内置了<code>JavaScript</code>运行时的一些标准化API的声明文件<ul><li>包括比如<code>Math,Date</code>等内置类型，也包括<code>DOM API</code>，比如<code>Window</code>,<code>Document</code>等</li></ul></li><li>内置类型声明通常在我们安装typescript的环境中会带有的:<ul><li><a href="https://github.com/microsoft/TypeScript/tree/main/lib">https://github.com/microsoft/TypeScript/tree/main/lib</a></li></ul></li></ul><h4 id="外部定义类型声明"><a href="#外部定义类型声明" class="headerlink" title="外部定义类型声明"></a>外部定义类型声明</h4><ul><li>外部类型声明通常是我们使用一些库(比如第三方库)时，需要的一些类型声明<ul><li>在自己库中进行类型声明(编写<code>.d.ts</code>文件)，比如<code>axios</code></li><li>通过社区的一个公有库<code>DefinitelyTyped</code>存放类型声明文件<ul><li>该库的GitHub地址:<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/">https://github.com/DefinitelyTyped/DefinitelyTyped/</a></li><li>该库查找声明安装方式的地址:<a href="https://www.typescriptlang.org/dt/search?search">https://www.typescriptlang.org/dt/search?search</a>=</li><li>比如我们安装react的类型声明: <code>npm i @types/react --save-dev</code></li></ul></li></ul></li></ul><h4 id="自定义声明"><a href="#自定义声明" class="headerlink" title="自定义声明"></a>自定义声明</h4><blockquote><p>何时使用自定义声明</p></blockquote><ol><li>我们使用的第三方库是一个纯的JavaScript库，没有对应的声明文件:比如lodash</li><li>我们给自己的代码中声明一些类型，方便在其他地方直接进行使用</li></ol><blockquote><p>变量-函数-类的声明</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare let whyHeight: numberdeclare function whyFoo(): voiddeclare class Person &#123;  name: string  age: number  constructor(name: string, age: number)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>声明模块</p></blockquote><ul><li>我们也可以声明模块，比如lodash模块默认不能使用的情况</li><li>声明模块的语法: <code>declare module &#39;模块名&#39; &#123;&#125;</code><ul><li>在声明模块的内部，我们可以通过 <code>export</code> 导出对应库的类、函数等</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare module &#39;lodash&#39; &#123;  export function join(arr: any[]): void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>声明文件</p></blockquote><ul><li>在开发中我们使用了 jpg 这类图片文件，默认<code>typescript</code>也是不支持的，也需要对其进行声明</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">declare module &quot;*.jpg&quot;&#123;  const src:string  export default src&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tsconfig.json的配置</title>
      <link href="/2021/10/01/tsconfig.json-de-pei-zhi/"/>
      <url>/2021/10/01/tsconfig.json-de-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h2><blockquote><p>生成<code>tsconfig.json</code>文件,命令:<code>tsc --init</code></p></blockquote><ol><li>“include”:[],是调试用来指定那些ts文件需要编译<ul><li>路径:**  表示任意目录,*  表示任意文件</li></ul></li><li>“exclude”:[],不需要被编译的文件目录 默认值：[“node_modules”, “bower_components”, “jspm_packages”]</li><li>“files”:[],也是指定ts文件,但是是一个一个ts文件</li></ol><h3 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h3><ol><li><p><code>target</code>:用来ts被编译成js的版本</p><ul><li>可选值:’es3’, ‘es5’, ‘es6’, ‘es2015’, ‘es2016’, ‘es2017’,’es2018’, ‘es2019’, ‘es2020’, ‘es2021’, ‘esnext’</li></ul></li><li><p><code>module</code>:指定要用的模块化标准</p><ul><li>可选值:”CommonJS”, “AMD”, “System”, “UMD”, “ES6”, “ES2015”, “ES2020”, “ESNext”, “None”</li></ul></li><li><p><code>lib</code>:用来指定项目中要用来的库</p></li><li><p><code>strict</code>:严格一些的严格检查(any)</p></li><li><p><code>&quot;jsx&quot;:&quot;preserve&quot;</code>:对jsx进行怎么样的处理</p></li><li><p><code>&quot;importHelpers&quot;</code>:是否有辅助的导入功能</p></li><li><p><code>&quot;moduleResolution&quot;:&quot;node&quot;</code>按照node的方式去解析模块<code>import &quot;/index.node&quot;</code></p></li><li><p><code>&quot;skipLibCheck&quot;</code>跳过一些库的类型检查(比如axios-&gt;类型/loadsh-&gt;@types/loadsh/其它第三方库)</p></li><li><p><code>&quot;esModuleInterop&quot;: true</code>支持esmodule</p></li><li><p><code>&quot;allowSyntheticDefaultImports&quot;: true</code>支持commonjs</p></li><li><p><code>&quot;sourceMap&quot;</code>:要不要生成映射文件</p></li><li><p><code>&quot;baseUrl&quot;:&quot;.&quot;</code>文件在解析时,基本url</p></li><li><p><code>&quot;types&quot;:[&quot;webpack-env&quot;]</code>指定具体要解析使用的类型</p></li><li><p><code>&quot;outDir&quot;: &quot;./dist&quot;</code>: 用来指定编译后的目录</p></li><li><p><code>&quot;outFile&quot;: &quot;./dist/app.js&quot;</code>, 将编译后的文件合并成一个js文件</p></li><li><p><code>allowjs</code>,是否对js进行编译,默认是false</p></li><li><p><code>checkJs</code>,是否对js语法进行检查</p></li><li><p><code>removeComments</code>,是否移除注释</p></li><li><p><code>noEmitOnError</code>,是否当有错误是不生成编译文件</p></li><li><p><code>alwaysStrict</code>, 是否用来使用编译后的文件是否使用严格模式</p></li><li><p><code>noImplicitAny</code>,是否允许隐式的any类型存在</p></li></ol><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function sum(a,b)&#123;  return a+b&#125;&#x2F;&#x2F;隐式any类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="12"><li><p><code>noImplicitAny</code>,是否允许不明确的this存在</p></li><li><p><code>strictNullChecks</code>,严格检查空格</p></li><li><p><code>strict</code>,所有严格检查的总开关(建议开)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex4mapState和mapGetters</title>
      <link href="/2021/09/30/vuex4mapstate-he-mapgetters/"/>
      <url>/2021/09/30/vuex4mapstate-he-mapgetters/</url>
      
        <content type="html"><![CDATA[<h2 id="封装mapState和mapGetters"><a href="#封装mapState和mapGetters" class="headerlink" title="封装mapState和mapGetters"></a>封装mapState和mapGetters</h2><blockquote><p>在CompusitionsAPI要将<code>mapState</code>和<code>mapGetters</code>封装</p></blockquote><ul><li>setup函数中没有this,任何的this都是没有意义的</li><li>解构出来的<code>mapState</code>和<code>mapGetters</code>是一个函数,而不是一个对象</li></ul><blockquote><p>在OptionsAPI不需要封装<code>mapState</code>和<code>mapGetters</code></p></blockquote><ul><li>解构出来的<code>mapState</code>和<code>mapGetters</code>的函数,<code>computed属性</code>会自动拿到返回值</li></ul><blockquote><p>封装了两个文件</p></blockquote><ul><li><code>proStateStore.js</code>:对<code>mapState</code>和<code>mapGetters</code>的封装</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>mapState<span class="token punctuation">,</span> mapGetters<span class="token punctuation">,</span> createNamespacedHelpers <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span>  <span class="token punctuation">&#123;</span>proMapper<span class="token punctuation">&#125;</span>  <span class="token keyword">from</span> <span class="token string">'proMapper.js'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">proGetters</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">spaceName<span class="token punctuation">,</span>mapArry</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> mapFn <span class="token operator">=</span> mapGetters  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> spaceName <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> spaceName<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mapFn <span class="token operator">=</span> <span class="token function">createNamespacedHelpers</span><span class="token punctuation">(</span>spaceName<span class="token punctuation">)</span><span class="token punctuation">.</span>mapGetters  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    mapArry <span class="token operator">=</span> spaceName  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">proMapper</span><span class="token punctuation">(</span>mapArry<span class="token punctuation">,</span> mapFn<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">proState</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">spaceName<span class="token punctuation">,</span> mapArry</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> mapFn <span class="token operator">=</span> mapState  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> spaceName <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> spaceName<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mapFn <span class="token operator">=</span> <span class="token function">createNamespacedHelpers</span><span class="token punctuation">(</span>spaceName<span class="token punctuation">)</span><span class="token punctuation">.</span>mapState  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    mapArry <span class="token operator">=</span> spaceName  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">proMapper</span><span class="token punctuation">(</span>mapArry<span class="token punctuation">,</span> mapFn<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>proMapper.js</code>:对<code>mapState</code>和<code>mapGetters</code>共同遍历功能的封装</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@vue/reactivity"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">proMapper</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mapArry<span class="token punctuation">,</span>mapFn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> store<span class="token operator">=</span><span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> stateStoreFn<span class="token operator">=</span><span class="token function">mapFn</span><span class="token punctuation">(</span>mapArry<span class="token punctuation">)</span>  <span class="token keyword">let</span> stateStore<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>stateStoreFn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> fn<span class="token operator">=</span>stateStoreFn<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>$store<span class="token operator">:</span>store<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    stateStore<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">computed</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> stateStore<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>封装对于大型项目的解耦合是有必要的,如果在组件中并没有太多属性,冗长的封装加大了阅读性的难度</p></blockquote><h2 id="使用解构赋值"><a href="#使用解构赋值" class="headerlink" title="使用解构赋值"></a>使用解构赋值</h2><blockquote><p>使用对象的解构赋值,可以拿到所有属性,更容易阅读🐕🐕🐕</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> store<span class="token operator">=</span><span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">&#123;</span>      <span class="token operator">...</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">,</span>      <span class="token operator">...</span>store<span class="token punctuation">.</span>state    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解构出的值并不是响应式"><a href="#解构出的值并不是响应式" class="headerlink" title="解构出的值并不是响应式"></a>解构出的值并不是响应式</h3><ul><li>使用reactive包裹<code>let counter=reactive(&#123;...store.state&#125;)</code><ul><li>同时可以使用<code>toRefs</code>去解包</li></ul></li><li>使用ref包裹单个值</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>counter<span class="token punctuation">&#125;</span> <span class="token operator">=</span>  <span class="token punctuation">&#123;</span><span class="token operator">...</span>store<span class="token punctuation">.</span>state<span class="token punctuation">&#125;</span><span class="token keyword">let</span> counter<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex@4.0.0</title>
      <link href="/2021/09/29/vuex-4.0.0/"/>
      <url>/2021/09/29/vuex-4.0.0/</url>
      
        <content type="html"><![CDATA[<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p><img src="https://www.zyjcould.ltd/img/markdownvuex.png" alt="vuex"></p><blockquote><p>状态之间相互会存在依赖,一个状态的变化会引起另一个状态的变化,View页面也有可能会引起状态的变化,所以管理不断变化的state本身是非常困难的</p></blockquote><ul><li>使用Vuex状态管理<ul><li>在这种模式下,我们的组件树构成了一个巨大的 试图<code>View</code></li><li>不管在树的哪个位置,任何组件都能获取状态或者触发行为</li><li>通过定义和隔离状态管理中的各个概念,并通过强制性的规则来维护视图和状态间的独立性,代码会变得更加结构化和易于维护,跟踪</li></ul></li></ul><h3 id="store-仓库"><a href="#store-仓库" class="headerlink" title="store(仓库)"></a>store(仓库)</h3><blockquote><p>store本质上是一个容器,它包含着你的应用中大部分的状态(state)</p></blockquote><ul><li><p>vuex和全局对象的区别</p><ul><li>Vuex的状态是响应式的<ul><li>当vue组件从store读取状态,若store中的状态发生改变,其相应的状态也会改变</li></ul></li><li>不能直接改变store中的状态<ul><li>该变store中的状态的唯一途径就是提交**(commit)mutation**</li></ul></li></ul></li><li><p>使用</p><ul><li>创建<code>Store</code>对象</li><li>在app中使用插件安装</li></ul></li></ul><h3 id="单一状态树"><a href="#单一状态树" class="headerlink" title="单一状态树"></a>单一状态树</h3><blockquote><p>将状态信息同时保存到多个Store对象中的,那么之后的管理和维护等等都会变得特别困难</p></blockquote><ul><li>所以Vuex也使用了单一状态树来管理应用层级的全部状态</li><li>单一状态树能够让我们最直接的方式找到某个状态的片段,而且在之后的维护和调试过程中,也可以非常方便的管理和维护</li></ul><h2 id="五大核心"><a href="#五大核心" class="headerlink" title="五大核心"></a>五大核心</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    books<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"深入Vuejs"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"深入Webpack"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">240</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"深入React"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"深入Node"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">220</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取state状态<ul><li>在模板中使用<code>$store.state.name</code></li><li>在setup函数中用计算属性获取</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h3><blockquote><p>改变某些属性的状态变化</p></blockquote><h4 id="定义getters"><a href="#定义getters" class="headerlink" title="定义getters"></a>定义getters</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">getters<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token function">totalPrice</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> totalprice<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> book <span class="token keyword">of</span> state<span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      totalPrice<span class="token operator">+=</span>book<span class="token punctuation">.</span>count<span class="token operator">*</span>book<span class="token punctuation">.</span>price    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> totalPrice  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一个参数<code>state</code>,可以拿到state中的状态</li><li>第二个参数<code>getters</code>,可以拿到其它的getters</li></ul><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><ul><li><p>在模板中使用:<code>$store.getters.totalPrice</code></p></li><li><p>setup中用计算属性获取</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span> <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">const</span> totalPrice<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>totalPrice<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用mapState和mapGetters"><a href="#使用mapState和mapGetters" class="headerlink" title="使用mapState和mapGetters"></a>使用mapState和mapGetters</h2><ul><li>使用数组类型:<code>...mapGetters([&quot;totalPrice&quot;,&quot;myName&quot;])</code></li><li>使用对象类型:</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  finalPrice<span class="token operator">:</span><span class="token string">"totalPrice"</span><span class="token punctuation">,</span>  finalName<span class="token operator">:</span><span class="token string">"myName"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参考<a href="https://zyjcould.ltd/2021/09/30/vuex-4mapstate-he-mapgetters/#toc-heading-1">https://zyjcould.ltd/2021/09/30/vuex-4mapstate-he-mapgetters/#toc-heading-1</a></li></ul><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><ul><li>Action提交的是mutation,而不是直接变更状态</li><li>Action可以包含任意异步操作</li><li>参数<code>context</code>:<ul><li>context是一个和store实例均有相同方法和属性的context对象</li><li>从其中获取到commit方法来提交一个<code>mutation</code>,或者通过<code>context.state</code>和<code>context.getters</code>来获取<code>state和getters</code></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同时也接收第二个参数payload,获取从组件中传入的参数</li></ul><h3 id="actions的分发操作"><a href="#actions的分发操作" class="headerlink" title="actions的分发操作"></a>actions的分发操作</h3><ul><li>同时actions可以执行异步操作<ul><li>例如ajax请求,定时器等等</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>      <span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"异步完成"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token parameter">reject</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> store<span class="token operator">=</span><span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token function">cosnole</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//携带参数</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>count<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//使用对象形式</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  type<span class="token operator">:</span><span class="token string">"increment"</span><span class="token punctuation">,</span>  count<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h3><ul><li><code>mapActions</code>返回的就是一个函数</li><li>数组写法:<code>...mapActions([&quot;increment&quot;,&quot;decrement&quot;])</code></li><li>对象写法:</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> action<span class="token operator">=</span> <span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">//将`this.add()`映射为`this.$store.dispatch('increment')`  </span>  add<span class="token operator">:</span> <span class="token string">'increment'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><blockquote><p>提交<code>mutation</code>是更改Vuex的store中的状态的唯一方法</p></blockquote><ul><li>重要的原则: <code>mutation</code> 必须是同步函数<ul><li>devtool工具记录每一条mutation,devtools都需要捕捉到前一状态和后一状态的快照</li><li>但是在mutation中执行异步操作,就无法追踪到数据的变化</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">mutations<span class="token operator">:</span><span class="token punctuation">&#123;</span>  increment<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>counte<span class="token operator">+=</span>payload    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h3><ul><li><code>mapMutations</code>返回的就是一个函数</li><li>数组写法:<code>...mapMutations([&quot;Increment&quot;,&quot;Decrement&quot;])</code></li><li>对象写法:</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> action<span class="token operator">=</span> <span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">//将`this.Add()`映射为`this.$store.commit('Increment')`  </span>  Add<span class="token operator">:</span> <span class="token string">'Increment'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><blockquote><p>使用单一状态树,应用的所有状态会集中到一个比较大的对象,应用会变得复杂<br>使每个模块拥有自己的 <code>state,mutation,action,getter</code>甚至是嵌套子模块</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//子模块a</span><span class="token keyword">const</span> moduleA<span class="token operator">=</span><span class="token punctuation">&#123;</span>  <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//子模块b</span><span class="token keyword">const</span> moduleB<span class="token operator">=</span><span class="token punctuation">&#123;</span>  <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//引入模块</span><span class="token keyword">const</span> store<span class="token operator">=</span><span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  modules<span class="token operator">:</span><span class="token punctuation">&#123;</span>    a<span class="token operator">:</span>moduleA<span class="token punctuation">,</span>    b<span class="token operator">:</span>moduleB  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//moduleA和moduleB的状态</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>astore<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="局部状态"><a href="#局部状态" class="headerlink" title="局部状态"></a>局部状态</h3><blockquote><p>模块内部action参数context的解构(所有action都携带)</p></blockquote><ul><li>commit:提交对象</li><li>dispatch:分发的函数</li><li>state:此模块内的状态</li><li>rootState:根模块的state</li><li>getters:此模块的getter</li><li>rootGetters:跟模块的getters</li></ul><blockquote><p>模块内部的 getter,根节点状态会作为第三个参数暴露出来<code>state, getters, rootState</code></p></blockquote><h3 id="module命名空间"><a href="#module命名空间" class="headerlink" title="module命名空间"></a>module命名空间</h3><ul><li><p>默认情况下,模块内部的action和mutation仍然是注册在全局的命名空间中的</p><ol><li>这使得多个模块能够对同一个 <code>action 或 mutation</code> 作出响应</li><li><code>Getter</code> 同样也默认注册在全局命名空间</li></ol></li><li><p>添加 <code>namespaced: true</code> 的方式使模块成为带命名空间的模块</p><ul><li>模块将具有更高的封装度和复用性</li><li>模块被注册后,它的所有 <code>getter</code>,<code>action</code>及<code>mutation</code> 都会自动根据模块注册的路径调整命名</li></ul></li></ul><h3 id="module中修改和派发根组件"><a href="#module中修改和派发根组件" class="headerlink" title="module中修改和派发根组件"></a>module中修改和派发根组件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">incrementAction</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>commit<span class="token punctuation">,</span>dispatch<span class="token punctuation">,</span>state<span class="token punctuation">,</span>rootState<span class="token punctuation">,</span>getters<span class="token punctuation">,</span>rootGetters<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"incrementAction"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="module辅助函数"><a href="#module辅助函数" class="headerlink" title="module辅助函数"></a>module辅助函数</h3><blockquote><p>在setup函数中使用辅助函数来分发提交等</p></blockquote><ol><li>通过完整的模块空间名称来查找</li><li>第一个参数传入模块空间名称,后面写上要使用的属性</li></ol><h4 id="createNamespacedHelpers"><a href="#createNamespacedHelpers" class="headerlink" title="createNamespacedHelpers"></a>createNamespacedHelpers</h4><blockquote><p>可以直接使用辅助函数去和模块交互,而不用传入任何其它的参数</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> mapState<span class="token punctuation">,</span>         mapGetters<span class="token punctuation">,</span>         mapMutations<span class="token punctuation">,</span>         mapActions <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">createNamespacedHelpers</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vueRouter@4.0.0</title>
      <link href="/2021/09/28/vuerouter-4/"/>
      <url>/2021/09/28/vuerouter-4/</url>
      
        <content type="html"><![CDATA[<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><ul><li>将给定匹配模式的路由映射到同一个组件</li></ul><blockquote><p>在Vue Router中，我们可以在路径中使用一个动态字段来实现，我们称之为 路径参数</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  path<span class="token operator">:</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span>  <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../pages/User.vue"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>router-link</code>中进行跳转</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="动态路由取值"><a href="#动态路由取值" class="headerlink" title="动态路由取值"></a>动态路由取值</h3><h4 id="在template中"><a href="#在template中" class="headerlink" title="在template中"></a>在template中</h4><ul><li>通过$route.params获取值</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>用户界面:&#123;&#123;$route.params.id&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在setup中"><a href="#在setup中" class="headerlink" title="在setup中"></a>在setup中</h4><ul><li>使用用 <code>vue-router</code>库给我们提供的一个hook <code>useRoute</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> route <span class="token operator">=</span><span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匹配多个值"><a href="#匹配多个值" class="headerlink" title="匹配多个值"></a>匹配多个值</h3><table><thead><tr><th>匹配模式</th><th>匹配路径</th><th><code>$route.params</code></th></tr></thead><tbody><tr><td>/users/:user</td><td>/users/lisi</td><td><code>&#123; user: &#39;lisi&#39; &#125;</code></td></tr><tr><td>/users/:user/id/:id</td><td>/users/:lisi/id/123</td><td><code>&#123; user: &#39;lisi&#39;, id: &#39;123&#39; &#125;</code></td></tr></tbody></table><h2 id="NotFound页面"><a href="#NotFound页面" class="headerlink" title="NotFound页面"></a>NotFound页面</h2><blockquote><p>对于哪些没有匹配到的路由,可以编写一个动态路由将他们匹配到固定的某个页面</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  path<span class="token operator">:</span><span class="token string">"/:pathMatch(.*)"</span><span class="token punctuation">,</span>  <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../pages/NotFound.vue"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以在<code>template</code>中使用<code>$route.params.pathMatch</code>获取路径参数<ul><li>例如:<code>user/hhh/111</code></li></ul></li><li><span style="color:red">注意在<code>/:pathMatch(.*)</code>后面又加了一个 *</span>,即<code>/:pathMatch(.*)*</code>时<ul><li><code>$route.params.pathMatch</code>获取路径参数是一个数组[“user”,”hhh”,”111”]</li></ul></li></ul><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><blockquote><p>使用嵌套路由配置来表达某些应用程序的 UI 由嵌套多级的组件组成</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../pages/Home.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        redirect<span class="token operator">:</span><span class="token string">"/home/product"</span><span class="token comment">//重定向</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'product'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span><span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../pages/HomeProduct.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>以<code>/</code>开头的嵌套路径将被视为根路径,这将更好的利用组件嵌套</li></ul><h2 id="lt-router-link-gt"><a href="#lt-router-link-gt" class="headerlink" title="&lt;router-link&gt;"></a>&lt;router-link&gt;</h2><h3 id="代码的页面跳转"><a href="#代码的页面跳转" class="headerlink" title="代码的页面跳转"></a>代码的页面跳转</h3><table><thead><tr><th>声明式</th><th>程序化</th></tr></thead><tbody><tr><td>&lt;router-link :to=”…”&gt;</td><td><code>router.push(...)</code></td></tr></tbody></table><h4 id="使用router-push-…"><a href="#使用router-push-…" class="headerlink" title="使用router.push(…)"></a>使用router.push(…)</h4><ul><li>使用字符串地址<code>router.push(&#39;/users/123&#39;)</code></li><li>使用对象地址<code>router.push(&#123;&#39;/users/123&#39;&#125;)</code></li><li>使用命名路由并携带params参数:</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRouter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> router<span class="token operator">=</span><span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span><span class="token string">'user'</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span><span class="token string">'eduardo'</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>携带query参数:</p><ul><li><code>router.push(&#123;path:&#39;/register&#39;,query:&#123;plan:&#39;private&#39;&#125;)</code></li></ul></li><li><p><span style="color:red">使用可重复使用的params时,使用name属性,或者path这样编写<code>/user/$&#123;username&#125;</code></span></p></li></ul><h3 id="替换当前位置"><a href="#替换当前位置" class="headerlink" title="替换当前位置"></a>替换当前位置</h3><blockquote><p>使用push的特点是压入一个新的页面，那么在用户点击返回时，上一个页面还可以回退，但是如果希望当前页面是一个替换操作，那么可以使用<code>replace</code></p></blockquote><table><thead><tr><th>声明式</th><th>程序化</th></tr></thead><tbody><tr><td>&lt;router-link :to=”…” replace&gt;</td><td><code>router.replace(...)</code></td></tr></tbody></table><h3 id="custom"><a href="#custom" class="headerlink" title="custom"></a>custom</h3><blockquote><p>custom选项防止&lt;router-link&gt;将其内容包装在&lt;a&gt;元素内</p><blockquote><p>默认情况下，&lt;router-link&gt;将呈现其内容包裹在一个&lt;a&gt;元素，即使使用<code>v-slot</code>.使用<code>custom</code>，删除该行为</p></blockquote></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span> <span class="token attr-name">custom</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;navigate,href,route&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>href<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navigate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; route.fullPath &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="router-link中的v-slot"><a href="#router-link中的v-slot" class="headerlink" title="router-link中的v-slot"></a>router-link中的v-slot</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>  <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span>  <span class="token attr-name">custom</span>  <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;href,route,navigate,isActive,isExactActive&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navigate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>href:&#123;&#123;href&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>route:&#123;&#123;route&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>isActive:&#123;&#123;isActive&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>isExactActive:&#123;&#123;isExactActive&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>href</code>解析后的url</li><li><code>route</code>解析后的规范化的route对象</li><li><code>navigate</code>触发导航的函数</li><li><code>isActive</code>是否匹配的状态</li><li><code>isExactActive</code>是否是精准匹配的状态</li></ul><h3 id="其它api"><a href="#其它api" class="headerlink" title="其它api"></a>其它api</h3><blockquote><p>参考<a href="https://next.router.vuejs.org/api/#aria-current-value">https://next.router.vuejs.org/api/#aria-current-value</a></p></blockquote><h2 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h2><ul><li>&lt;router-view&gt;公开一个<code>v-slot</code>API，主要是用&lt;transition&gt;和&lt;keep-alive&gt;组件包装你的路由组件</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Component&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>why<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Component<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态的添加删除路由"><a href="#动态的添加删除路由" class="headerlink" title="动态的添加删除路由"></a>动态的添加删除路由</h2><h3 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h3><ul><li><p>某些情况下我们可能需要动态的来添加路由</p><ul><li>如根据用户不同的权限，注册不同的路由</li><li>可以使用一个方法 <code>addRoute</code></li></ul></li><li><p>直接添加顶级路由,参数只要传一个动态路由的名称</p></li><li><p>或者是为路由添加子路由,那么还应该传入对应的name属性</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> about<span class="token operator">=</span><span class="token punctuation">&#123;</span>  path<span class="token operator">:</span><span class="token string">"id"</span><span class="token punctuation">,</span>  <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../pages/About"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">,</span>about<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span style="color:red">如果新增加的路由的位置与原有的路由相匹配，那就需要你手动导航与<code>router.push()</code>或<code>router.replace()</code>以显示新的路线</span></li></ul><h3 id="删除路由"><a href="#删除路由" class="headerlink" title="删除路由"></a>删除路由</h3><ul><li>添加一个name相同的路由</li><li>通过<code>removeRoute</code>方法，传入路由的名称</li><li>通过<code>addRoute</code>方法的返回值回调</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//添加一个name相同的路由</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">"/about"</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">"about"</span><span class="token punctuation">,</span>component<span class="token operator">:</span>About<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">"/home"</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">"about"</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Home<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//通过removeRoute方法，传入路由的名称</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">"/about"</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">"about"</span><span class="token punctuation">,</span>component<span class="token operator">:</span>About<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token string">"about"</span><span class="token punctuation">)</span><span class="token comment">//通过`addRoute`方法的返回值回调</span><span class="token keyword">const</span> removeRoute<span class="token operator">=</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  path<span class="token operator">:</span><span class="token string">"/about"</span><span class="token punctuation">,</span>  name<span class="token operator">:</span><span class="token string">"about"</span><span class="token punctuation">,</span>  component<span class="token operator">:</span>About<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h3><ul><li><code>router.hasRoute()</code>检查路由是否存在。</li><li><code>router.getRoutes()</code>获取一个包含所有路由记录的数组</li></ul><h2 id="useLink和RouterLink"><a href="#useLink和RouterLink" class="headerlink" title="useLink和RouterLink"></a>useLink和RouterLink</h2><blockquote><p>Vue Router 将 <code>RouterLink</code> 的内部行为公开为 Composition API 函数。它提供访问与<code>v-slot</code>API相同的属性</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RouterLink<span class="token punctuation">,</span> useLink <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>RouterLink<span class="token punctuation">.</span>props<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>route<span class="token punctuation">,</span>href<span class="token punctuation">,</span>isActive<span class="token punctuation">,</span>isExactActive<span class="token punctuation">,</span>navigate<span class="token punctuation">&#125;</span> <span class="token operator">=</span><span class="token function">useLink</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>href<span class="token punctuation">,</span>navigate<span class="token punctuation">,</span>isActive<span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><blockquote><p>路由守卫的触发时机</p></blockquote><ul><li>导航被触发。</li><li>在失活的组件里调用 beforeRouteLeave 守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ul><blockquote><p>Vue router 提供的路由守卫主要用于通过重定向或取消路由来保护路由.有多种方法可以连接到路由导航过程:全局,每个路由或组件内</p></blockquote><ul><li><p>接收两个参数</p><ul><li>to即将进入的路由Route对象</li><li>from即将离开的路由Route对象</li></ul></li><li><p>return 返回值</p><ul><li>false取消当前导航</li><li>不返回或者undefined进行默认导航</li><li>返回一个路由地址<ul><li>可以是一个string类型的路径</li><li>可以是一个对象，对象中包含<code>path,query,params</code>等信息</li></ul></li></ul></li><li><p>第三个参数<code>next</code>在vue3中已经不推荐使用</p></li></ul><h3 id="全局路由守卫-beforeEach"><a href="#全局路由守卫-beforeEach" class="headerlink" title="全局路由守卫(beforeEach)"></a>全局路由守卫(beforeEach)</h3><blockquote><p>用来做一些进入页面的限制.比如没有登录，就不能进入某些页面，只有登录了之后才有权限查看某些页面(初始化的时候被调用,每次路由切换之前被调用)</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="路由独享守卫-beforeEnter"><a href="#路由独享守卫-beforeEnter" class="headerlink" title="路由独享守卫(beforeEnter)"></a>路由独享守卫(beforeEnter)</h3><blockquote><p>beforeEnter守卫只在进入路由时触发不会在params,query或hash改变时触发</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/users/:id'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> UserDetails<span class="token punctuation">,</span>    <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局后置后卫"><a href="#全局后置后卫" class="headerlink" title="全局后置后卫"></a>全局后置后卫</h3><blockquote><p>不会接受<span style="color:red">返回值</span>也不会改变导航本身</p><blockquote><p>用于分析、更改页面标题、声明页面等辅助功能</p></blockquote></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h3><blockquote><p>参考<a href="https://next.router.vuejs.org/zh/guide/advanced/composition-api.html#%E5%AF%BC%E8%88%AA%E5%AE%88%E5%8D%AB">https://next.router.vuejs.org/zh/guide/advanced/composition-api.html#%E5%AF%BC%E8%88%AA%E5%AE%88%E5%8D%AB</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
            <tag> vueRouter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3中自定义指令</title>
      <link href="/2021/09/27/vue3-zhong-zi-ding-yi-zhi-ling/"/>
      <url>/2021/09/27/vue3-zhong-zi-ding-yi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><ul><li>使用指令的原因<ul><li>在Vue中，代码的复用和抽象主要还是通过组件</li><li>如果你需要对DOM元素进行底层操作，这个时候就会用到自定义指令</li></ul></li><li>自定义指令的两种写法<ul><li>自定义局部指令:组件中通过 <code>directives</code> 选项，只能在当前组件中使用</li><li>自定义全局指令:app的 <code>directive</code> 方法，可以在任意组件中被使用</li></ul></li></ul><h3 id="指令的生命周期"><a href="#指令的生命周期" class="headerlink" title="指令的生命周期"></a>指令的生命周期</h3><ul><li><code>created</code>:在绑定元素的 attribute 或事件监听器被应用之前调用</li><li><code>beforeMount</code>:当指令第一次绑定到元素并且在挂载父组件之前调用</li><li><code>mounted</code>:在绑定元素的父组件被挂载后调用</li><li><code>beforeUpdate</code>:在更新包含组件的 VNode 之前调用</li><li><code>updated</code>:在包含组件的 VNode 及其子组件的 VNode 更新后调用</li><li><code>beforeUnmount</code>:在卸载绑定元素的父组件之前调用</li><li><code>unmounted</code>:当指令与元素解除绑定且父组件已卸载时，只调用一次</li></ul><h3 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h3><ul><li><code>el</code><ul><li>指令绑定到的元素。这可用于直接操作 DOM。</li></ul></li><li><code>binding</code>:一个对象，包含以下属性：<ul><li><code>instance</code>：使用指令的组件实例。</li><li><code>value</code>：传递给指令的值。例如，在 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，该值为 <code>2</code>。</li><li><code>oldValue</code>：先前的值，仅在 <code>beforeUpdate</code> 和 <code>updated</code> 中可用。值是否已更改都可用。</li><li><code>arg</code>：参数传递给指令 (如果有)。例如在 <code>v-my-directive:foo</code> 中，<code>arg</code> 为 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>：包含修饰符 (如果有) 的对象。例如在 <code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>&#123;foo: true，bar: true&#125;</code>。</li><li><code>dir</code>：一个对象，在注册指令时作为参数传递</li></ul></li><li><code>vnode</code><ul><li>作为 el 参数收到的真实 DOM 元素的蓝图</li></ul></li><li><code>prevNode</code><ul><li>上一个虚拟节点，仅在 <code>beforeUpdate</code> 和 <code>updated</code> 钩子中可用</li></ul></li></ul><h3 id="局部自定义指令"><a href="#局部自定义指令" class="headerlink" title="局部自定义指令"></a>局部自定义指令</h3><ul><li>在组件选项中使用 <code>directives</code> 即可</li><li>它是一个对象，在对象中编写我们自定义指令的名称(注意:这里不需要加v-)</li><li>自定义指令有一个生命周期，是在组件挂载后调用的 <code>mounted</code>，我们可以在其中完成操作</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  directives<span class="token operator">:</span><span class="token punctuation">&#123;</span>    focus<span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul><li><p>可以通过自定义计算属性,方法来完成</p></li><li><p>这里使用自定义指令</p></li><li><p>使用时间格式化的指令<code>v-format-time</code></p><ul><li>用到了时间格式化的内库<code>dayjs</code></li><li>如果封装了多个指令,可以用插件写一个<code>index.js</code>文件引入  </li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">'dayjs'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> formaString<span class="token operator">=</span><span class="token string">"YYYY-MM-DD HH:mm:ss"</span>  app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"format-time"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>bindings</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>bindings<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        formaString<span class="token operator">=</span>bindings<span class="token punctuation">.</span>value      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>bindings</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> textContent<span class="token operator">=</span>el<span class="token punctuation">.</span>textContent      <span class="token keyword">let</span> timetamp<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>textContent<span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>textContent<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        timetamp<span class="token operator">=</span>timetamp<span class="token operator">*</span><span class="token number">1000</span>      <span class="token punctuation">&#125;</span>      el<span class="token punctuation">.</span>textContent<span class="token operator">=</span><span class="token function">dayjs</span><span class="token punctuation">(</span>timetamp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formaString<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3中的CompositionApi</title>
      <link href="/2021/09/26/vue3-zhong-de-compositionapi/"/>
      <url>/2021/09/26/vue3-zhong-de-compositionapi/</url>
      
        <content type="html"><![CDATA[<h2 id="setup函数的参数"><a href="#setup函数的参数" class="headerlink" title="setup函数的参数"></a>setup函数的参数</h2><ol><li>第一个参数:<code>props</code></li><li>第二个参数:<code>context</code></li></ol><ul><li><p><code>props</code>:父组件传递过来的属性会被放到<code>props</code>对象中</p><ol><li>还是在props选项中定义</li><li>在<code>template</code>中依然是可以正常去使用props中的属性,比如message</li><li>如果我们在setup函数中想要使用props,<span style="color:red">那么不可以通过 this 去获取</span></li><li>因为props有直接作为参数传递到setup函数中,所以我们可以直接通过参数来使用即可</li></ol></li><li><p><code>context</code>:</p><ol><li><code>attrs</code>:所有的非prop的attribute；</li><li><code>slots</code>:父组件传递过来的插槽</li><li><code>emit</code>:当我们组件内部需要发出事件时会用到emit(<span style="color:red">不可以通过 this.$emit发出事件</span></li></ol></li></ul><h2 id="setup函数的返回值"><a href="#setup函数的返回值" class="headerlink" title="setup函数的返回值"></a>setup函数的返回值</h2><blockquote><ul><li><code>setup</code>的返回值可以在模板<code>template</code>中被使用,通过setup的返回值来替代data选项</li><li>通过返回一个执行函数来代替在methods中定义的方法</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> name<span class="token operator">=</span><span class="token string">"zhangsan"</span><span class="token keyword">let</span> counter<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">const</span> <span class="token function-variable function">increment</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  counter<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">decrement</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  counter<span class="token operator">--</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span>  name<span class="token punctuation">,</span>counter<span class="token punctuation">,</span>increment<span class="token punctuation">,</span>decrement<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意:<span style="color:red">对于定义的一个变量来说,默认情况下,Vue并不会跟踪他的变化,这不是响应式的</span></li></ul><h2 id="setup中的this不可以用"><a href="#setup中的this不可以用" class="headerlink" title="setup中的this不可以用"></a>setup中的this不可以用</h2><ul><li>表达的含义是this并没有指向当前组件实例</li><li>并且在setup被调用之前,data,computed,methods等都没有被解析</li><li>所以无法在setup中获取this</li></ul><h2 id="响应式API"><a href="#响应式API" class="headerlink" title="响应式API"></a>响应式API</h2><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  counter<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span> state <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>使用<code>template</code>访问时,要使用<code>state.name</code>的形式访问到,template并不能直接解构</p></li><li><p>使用reacitve响应式的原理</p><ul><li>reactive函数处理我们的数据之后,数据再次被使用时就会进行依赖收集</li><li>当数据发生改变时,所有收集到的依赖都是进行对应的响应式操作(比如更新界面)</li><li>data选项中,也是在内部交给了<code>reactive</code>函数将其编程响应式对象的</li></ul></li></ul><h3 id="ref的一些API"><a href="#ref的一些API" class="headerlink" title="ref的一些API"></a>ref的一些API</h3><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><ul><li><p><code>cosnt name=ref(&quot;zhangsan&quot;)</code></p><ul><li><code>ref</code> 会返回一个可变的响应式对象,该对象作为一个 响应式的引用 维护着它内部的值</li><li>内部的值是在<span style="color:red">ref的 value 属性中被维护的</span></li></ul></li><li><p>注意:</p><ul><li>模板中引入ref的值时,Vue会自动帮助我们进行解包操作,所以我们<span style="color:red">并不需要在模板中通过 <code>name.value</code> 的方式,直接使用<code>name</code>即可</span></li><li>在 <code>setup</code> 函数内部,它依然是一个 ref引用, 所以对其进行操作时,我们依然需要使用 <code>name.value</code>的方式</li></ul></li><li><p>关于ref自动解包</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    counter  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> reactiveInfo <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    counter  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span>counter<span class="token punctuation">,</span>info<span class="token punctuation">,</span>reactiveInfo<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>当我们在<code>template</code>模板中使用ref对象, 它会自动进行解包,<code>&#123;&#123;counter&#125;&#125;</code>可以访问到</li><li>info是一个普通的JavaScript对象:ref的解包只能是一个浅层解包,<code>&#123;&#123;info.counter.value&#125;&#125;</code></li><li>当如果最外层包裹的是一个reactive可响应式对象, 那么内容的ref可以解包<code>&#123;&#123;reactiveInfo.counter&#125;&#125;</code></li></ol><h4 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h4><blockquote><p>对reactive返回的对象进行解构获取值,那么之后无论是<span style="color:red">修改结构后的变量,还是修改reactive返回的state对象</span>,数据都不再是响应式的</p></blockquote><ol><li><code>toRefs</code>的函数,可以将reactive返回的对象中的属性都转成ref</li><li>那么我们再次进行结构出来的 name 和 age 本身都是 ref的</li><li>这种做法相当于已经在<code>state.name</code>和r<code>ref.value</code>之间建立了 链接,任何一个修改都会引起另外一个变化</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reavtive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//const &#123;name,age&#125;=state//这种不能做到响应式</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h4><blockquote><p>只希望转换一个<code>reactive</code>对象中的属性为ref</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> age<span class="token operator">=</span><span class="token function">toRef</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ref的其它api"><a href="#ref的其它api" class="headerlink" title="ref的其它api"></a>ref的其它api</h4><ul><li><code>isRef</code><ul><li>判断值是否是一个ref对象。</li></ul></li><li><code>unref</code><ul><li>如果我们想要获取一个ref引用中的value,那么也可以通过unref方法</li><li>如果<span style="color:red">参数是一个 ref,则返回内部值,否则返回参数本身</span></li><li>这是 <code>val = isRef(val) ? val.value : val</code> 的语法糖函数</li></ul></li><li><code>shallowRef</code><ul><li>创建一个浅层的ref对象</li></ul></li><li><code>triggerRef</code><ul><li>手动触发和 <code>shallowRef</code> 相关联的副作用</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> info <span class="token operator">=</span><span class="token function">shallowRef</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeName</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  info<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"lisi"</span>  <span class="token comment">//手动修改</span>  <span class="token function">triggerRef</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h4><ul><li><p>创建一个自定义的ref,并对其依赖项跟踪和更新触发进行显示控制</p><ul><li>它需要一个工厂函数,该函数接受 track 和 trigger 函数作为参数</li><li>并且应该返回一个带有 get 和 set 的对象</li></ul></li><li><p>简单的防抖操作</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> customRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">300</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">customRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">track<span class="token punctuation">,</span> trigger</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>          <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h2><ul><li><p><code>readonly</code>返回的对象都是不允许修改的</p></li><li><p>但是经过<code>readonly</code>处理的原来的对象是允许被修改的</p><ul><li>例如<code>const info = readonly(obj)</code>,info对象是不允许被修改的,但是obj对象可以修改</li><li>本质上就是readonly返回的对象的setter方法被劫持了</li></ul></li><li><p>传递readonly处理过的对象(<code>info</code>)给子组件,父组件可以通过修改原来的对象(<code>obj</code>)来达到响应式</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.普通对象</span><span class="token keyword">const</span> info1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> readonlyInfo1 <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>info1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.响应式的对象reactive</span><span class="token keyword">const</span> info2 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> readonlyInfo2 <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>info2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.响应式的对象ref</span><span class="token keyword">const</span> info3 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"why"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readonlyInfo3 <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>info3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reactive判断的API"><a href="#reactive判断的API" class="headerlink" title="reactive判断的API"></a>reactive判断的API</h2><ul><li><code>isProxy</code>: 检查对象是否是由<code>reactive</code> 或 <code>readonly</code>创建的 proxy</li><li><code>isReactive</code>:<ul><li>检查对象是否是由 <code>reactive</code>创建的响应式代理：</li><li>如果该代理是 <code>readonly</code> 建的,但包裹了由 <code>reactive</code> 创建的另一个代理,它也会返回 true</li></ul></li><li><code>isReadonly</code>:检查对象是否是由 <code>readonly</code> 创建的只读代理。</li><li><code>toRaw</code>:返回 <code>reactive</code> 或 <code>readonly</code> 代理的原始对象(<span style="color:red">不建议保留对原始对象的持久引用。请谨慎使用</span>)。</li><li><code>shallowReactive</code>: 创建一个响应式代理,它跟踪其自身 <code>property</code> 的响应性,但不执行嵌套对象的深层响应式转换 (深层还是原生对象)</li><li><code>shallowReadonly</code>: 创建一个 proxy,使其自身的 property 为只读,但不执行嵌套对象的深度只读转换(深层还是可读、可写的)</li></ul><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><blockquote><p><code>Composition API</code>中, setup 函数中使用 computed 方法来编写一个计算属性</p></blockquote><ul><li>接收一个getter函数,并为 getter 函数返回的值,返回一个不变的 ref 对象</li><li>接收一个具有 get 和 set 的对象,返回一个可变的(可读写)ref 对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fullName<span class="token operator">=</span><span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> lastName<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>firstName<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> fullName<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> lastName<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>firstName<span class="token punctuation">.</span>value  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> names <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    firstName<span class="token punctuation">.</span>value <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    lastName<span class="token punctuation">.</span>value <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="setup中使用ref"><a href="#setup中使用ref" class="headerlink" title="setup中使用ref"></a>setup中使用ref</h2><blockquote><p>只需要定义一个ref对象,绑定到元素或者组件的ref属性上即可</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>哈哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      title    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="监听数据"><a href="#监听数据" class="headerlink" title="监听数据"></a>监听数据</h2><ul><li>watchEffect用于自动收集响应式数据的依赖</li><li>watch需要手动指定侦听的数据源</li></ul><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h3><ul><li>watchEffect传入的函数<span style="color:red">会被立即执行一次,并且在执行的过程中会收集依赖</span></li><li>只有收集的依赖发生变化时,watchEffect传入的函数才会再次执行</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> name<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token keyword">const</span> age<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watchEffect"</span><span class="token punctuation">,</span>name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>age<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="停止监听-可以获取watchEffect的返回值函数-调用该函数"><a href="#停止监听-可以获取watchEffect的返回值函数-调用该函数" class="headerlink" title="停止监听:可以获取watchEffect的返回值函数,调用该函数"></a>停止监听:可以获取watchEffect的返回值函数,调用该函数</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> stopWatch<span class="token operator">=</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watchEffect"</span><span class="token punctuation">,</span>name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>age<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeAge</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  age<span class="token punctuation">.</span>value<span class="token operator">++</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">.</span>value<span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">stopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="watchEffect清除副作用"><a href="#watchEffect清除副作用" class="headerlink" title="watchEffect清除副作用"></a>watchEffect清除副作用</h4><blockquote><ul><li>比如在开发中我们需要在侦听函数中执行网络请求,但是在网络请求还没有达到的时候,我们停止了侦听器,或者侦听器侦听函数被再次执行了</li><li>那么上一次的网络请求应该被取消掉,这个时候我们就可以清除上一次的副作用</li></ul></blockquote><ul><li>在我们给watchEffect传入的函数被回调时,其实可以获取到一个参数：<code>onInvalidate</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> stopWatch<span class="token operator">=</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">onInvalidate</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watchEffect"</span><span class="token punctuation">,</span>name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>age<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token keyword">const</span> timer<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2s后执行"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token function">onInvalidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="watchEffect的执行时机"><a href="#watchEffect的执行时机" class="headerlink" title="watchEffect的执行时机"></a>watchEffect的执行时机</h4><ul><li>setup函数在执行时就会立即执行传入副作用函数,这个时候DOM并没有挂载,打印ref对象的值为null</li><li>当DOM挂载时,会给title的ref对象赋值新的值,副作用函数会再次执行,打印出来对应的元素</li><li>函数执行时机,第二个参数(一个含有flush的对象)<ul><li>默认值是pre,它会在元素 挂载 或者 更新 之前执行；</li><li>首先先打印出来一个空的,当依赖的title发生改变时,就会再次执行一次,打印出元素</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tittle<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  flush<span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>绑定<code>flush:&quot;post&quot;</code>之后并不会在元素挂载之前更新</li></ul><h3 id="watch的使用"><a href="#watch的使用" class="headerlink" title="watch的使用"></a>watch的使用</h3><ul><li>watchEffect的比较,watch允许我们<ol><li>懒执行副作用(第一次不会直接执行)</li><li>更具体的说明当哪些状态发生变化时,触发侦听器的执行</li><li>访问侦听状态变化前后的值</li></ol></li></ul><h4 id="监听单个数据"><a href="#监听单个数据" class="headerlink" title="监听单个数据"></a>监听单个数据</h4><ul><li>一个getter函数：但是该getter函数必须引用可响应式的对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> info<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeName</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  info<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"lisi"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>直接写入一个可响应式的对象,reactive或者ref<ul><li><code>info.name</code></li></ul></li></ul><h4 id="监听多个数据"><a href="#监听多个数据" class="headerlink" title="监听多个数据"></a>监听多个数据</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> name<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token keyword">const</span> age<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span>age<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeName</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  name<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">"lisi"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="监听响应式对象"><a href="#监听响应式对象" class="headerlink" title="监听响应式对象"></a>监听响应式对象</h4><ul><li>侦听一个数组或者对象,那么可以使用一个getter函数,并且对可响应对象进行解构</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> info<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span>lisi<span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"zhagnsan"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">[</span><span class="token operator">...</span>info<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeName</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  info<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"wangba"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="watch的选项"><a href="#watch的选项" class="headerlink" title="watch的选项"></a>watch的选项</h4><ul><li>第三个参数,传入一个对象<ul><li><code>deep:true</code>,深层监听</li><li><code>immediate:true</code> 立即执行</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> info<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>  feiends<span class="token operator">:</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"lisi"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">19</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>deep<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>immediate<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeName</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  info<span class="token punctuation">.</span>friends<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"wangwu"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><table><thead><tr><th>optionsAPI</th><th>CompositionAPI</th></tr></thead><tbody><tr><td>beforeCreate</td><td>使用 setup()</td></tr><tr><td>created</td><td>使用 setup()</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeUnmount</td><td>onBeforeUnmount</td></tr><tr><td>unmounted</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr><tr><td>renderTracked</td><td>onRenderTracked</td></tr><tr><td>renderTriggered</td><td>onRenderTriggered</td></tr><tr><td>activated</td><td>onActivated</td></tr><tr><td>deactivated</td><td>onDeactivated</td></tr></tbody></table><h2 id="Provide和Inject"><a href="#Provide和Inject" class="headerlink" title="Provide和Inject"></a>Provide和Inject</h2><ul><li><p>可以通过 provide 方法来提供数据</p></li><li><p>provide可以传入两个参数</p><ul><li>name：提供的属性名称</li><li>value：提供的属性值</li></ul></li><li><p>在后代组件中通过 inject 来注入需要的属性和对应的值</p><ul><li>可以通过 inject 来注入需要的内容</li><li>inject可以传入两个参数</li></ul></li><li><p>使用ref或者reactive包裹数据,使其成为响应式</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> counter <span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">let</span> info <span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">,</span>counter<span class="token punctuation">)</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token comment">//后代组件</span><span class="token keyword">const</span> counter <span class="token operator">=</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">)</span><span class="token keyword">const</span> info <span class="token operator">=</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将修改的方法共享,在后代组件中复用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">changeInfo</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  info<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"lisi"</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">changeInfo</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">"changeInfo"</span><span class="token punctuation">,</span>changeInfo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简单介绍JSX的使用"><a href="#简单介绍JSX的使用" class="headerlink" title="简单介绍JSX的使用"></a>简单介绍JSX的使用</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">increment</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      counter<span class="token punctuation">.</span>value<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token function-variable function">decrement</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      counter<span class="token punctuation">.</span>value<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>h2<span class="token operator">></span>当前计数器<span class="token punctuation">&#123;</span>counter<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>increment<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>decrement<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSX中也可以使用vue组件<a href="https://v3.cn.vuejs.org/guide/render-function.html#jsx">https://v3.cn.vuejs.org/guide/render-function.html#jsx</a></li></ul><h2 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h2><ul><li><p>当封装一个组件A,在另外一个组件B中使使用</p><ul><li>组件A中template的元素,会被挂载到组件B中template的某个位置</li><li>最终的应用会形成一颗DOM树结构</li></ul></li><li><p>将组件从组件树移除挂载,移动组件到Vue app之外的其他位置</p><ul><li>如移动到body元素上,或者我们有其他的<code>div#app</code>之外的元素上</li></ul></li><li><p>关于<code>Teleport</code>:个Vue提供的内置组件</p><ul><li>两个属性:</li><li>to:指定将其中的内容移动到的目标元素,可以使用选择器</li><li>disabled：是否禁用 teleport 的功能</li></ul></li><li><p><span style="color:red">其中teleport也可以使用组件,也可以给他传入一些数据</span></p></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;teleport to&#x3D;&quot;body&quot;&gt;      &lt;Home&gt;&lt;&#x2F;Home&gt;      &lt;h2&gt;你好啊.jack&lt;&#x2F;h2&gt;    &lt;&#x2F;teleport&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span style="color:red">注意:多个teleport应用到同一个目标上(（)to的值相同),那么这些目标会进行合并</span></li></ul><h2 id="vue插件进行编写"><a href="#vue插件进行编写" class="headerlink" title="vue插件进行编写"></a>vue插件进行编写</h2><blockquote><p>向Vue全局添加一些功能时,会采用插件的模式</p></blockquote><ul><li><p>对象类型:一个对象,但是必须包含一个 install 的函数,该函数会在安装插件时执行</p></li><li><p>函数类型：一个function,这个函数会在安装插件时自动执行</p></li><li><p><strong>可以完成的功能</strong></p><ul><li>添加全局方法或者 property,通过把它们添加到 <code>config.globalProperties</code> 上实现；</li><li>添加全局资源：指令/过滤器/过渡等；</li><li>通过全局 mixin 来添加一些组件选项；</li><li>一个库,提供自己的 API,同时提供上面提到的一个或多个功能</li></ul></li><li><p>对象写法</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$name <span class="token operator">=</span><span class="token string">"zhangsan"</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数类型的写法</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在<code>main.js</code>引入插件的包,再用<code>app.use()</code>挂载</li><li>使用compositionApi引入</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getCurrentInstance <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> instance<span class="token operator">=</span><span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>appContext<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$name<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>参考:<a href="https://zyjcould.ltd/2021/09/27/vue3-zi-ding-yi-zhi-ling/">https://zyjcould.ltd/2021/09/27/vue3-zi-ding-yi-zhi-ling/</a></p><h2 id="nexttick"><a href="#nexttick" class="headerlink" title="nexttick"></a>nexttick</h2><blockquote><p>官方解释:将回调推迟到下一个 DOM 更新周期之后执行.在更改了一些数据以等待 DOM 更新后立即使用它</p></blockquote><ol><li><span style="color:red">watch回调函数,组件更新,生命周期回调函数</span>会放入微任务中执行</li><li>同步函数放入<code>nexttick()</code>钩子中,会放入微任务的最后执行</li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3的组件化的使用</title>
      <link href="/2021/09/25/vue3-de-zu-jian-hua-de-shi-yong/"/>
      <url>/2021/09/25/vue3-de-zu-jian-hua-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="理解插槽"><a href="#理解插槽" class="headerlink" title="理解插槽"></a>理解插槽</h2><ul><li>使组件具备更强的通用性,组件中的内容不再限制为固定的div、span等等这些元素</li><li>使用者可以决定某一块区域到底存放什么内容和元素</li><li>定义插槽slot<ul><li>插槽的使用过程其实是抽取共性、预留不同</li><li>我们会将共同的元素、内容依然在组件内进行封装</li><li>同时会将不同的元素使用slot作为占位,让外部决定到底显示什么样的元素</li></ul></li><li>使用插槽<ul><li>Vue中将 &lt;slot&gt; 元素作为承载分发内容的出口</li><li>在封装组件中,使用特殊的元素&lt;slot&gt;就可以为封装组件开启一个插槽</li><li>该插槽插入什么内容取决于父组件如何使用</li></ul></li></ul><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><blockquote><p>当插槽内部不具有name属性时,vue会自动给一个隐式名称<code>name:default</code></p><blockquote><p>且子组件不管有多少个插槽,每个插槽都会显示一样的内容</p></blockquote></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"> 父组件中<span class="token operator">:</span><span class="token operator">&lt;</span>Category<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>子组件中<span class="token operator">:</span><span class="token operator">&lt;</span>template<span class="token operator">></span>   <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定义插槽<span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>slot<span class="token operator">></span>插槽默认值<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><ul><li>具名插槽顾名思义就是给插槽起一个名字,&lt;slot&gt; 元素有一个特殊的 <code>attribute：name</code></li><li>一个不带 name 的slot,会带有隐含的名字 default</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//父组件中</span><span class="token operator">&lt;</span>Footer<span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>footer<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      你好    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Footer<span class="token operator">></span><span class="token comment">//子组件中</span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>插槽默认值<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>动态插槽名</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[name]</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    你好  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token operator">...</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span><span class="token string">"footer"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>具名插槽的缩写<ul><li>把参数之前的所有内容<code>(v-slot:)</code>替换为字符 <code>#</code><ul><li>例如 <code>#footer</code>或者<code>#[name]</code></li></ul></li></ul></li></ul><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><ul><li><p>vue渲染作用域:</p><ul><li>父级模板里的所有内容都是在父级作用域中编译的</li><li>子模板里的所有内容都是在子作用域中编译的</li></ul></li><li><p>希望插槽可以访问到子组件中的内容</p><ul><li>当一个组件被用来渲染一个数组元素时,我们使用插槽,并且希望插槽中没有显示每项的内容</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 子组件中:有一个names的数组 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in names<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 具名插槽与作用域插槽 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#footer</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>&#123;&#123;slotProps.item&#125;&#125;-&#123;&#123;slotProps.index&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Footer</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>独占默认插槽<ul><li>当默认插槽和作用域插槽简写,如果还有其它具名插槽那么简写方式不可以</li><li>子组件中的&lt;slot&gt;标签不能有name属性</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>Foot v<span class="token operator">-</span>slot<span class="token operator">=</span><span class="token string">"slotProps"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>slotProps<span class="token punctuation">.</span>item<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>slotProps<span class="token punctuation">.</span>index<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Footer<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><blockquote><p>动态组件是使用 <code>component</code> 组件,通过一个特殊的<code>attribute is</code> 来实现,is属性是一个组件</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span>   <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTab<span class="token punctuation">"</span></span>   <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span>   <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span>   <span class="token attr-name">@pageClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意点:<ol><li>currentTab可以是通过component函数注册的组件</li><li>currentTab可以是在一个组件对象的components对象中注册的组件</li><li>动态组件的传值和其它组件的传值 是一样的</li></ol></li></ul><h2 id="缓存组件keep-alive"><a href="#缓存组件keep-alive" class="headerlink" title="缓存组件keep-alive"></a>缓存组件keep-alive</h2><blockquote><p>默认情况下,我们在切换组件后,组件会被销毁掉,再次回来时会重新创建组件</p><blockquote><p>然而某些情况我们希望继续保持组件的状态,而不是销毁掉,这个时候我们就可以使用一个内置组件:<code>keep-alive</code></p></blockquote></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home,about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span>     <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTab<span class="token punctuation">"</span></span>     <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span>     <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span>     <span class="token attr-name">@pageClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="keep-alive的一些属性"><a href="#keep-alive的一些属性" class="headerlink" title="keep-alive的一些属性"></a>keep-alive的一些属性</h3><ul><li><p><code>include</code>:可以使用<code>string</code>|<code>RegExp</code>|<code>Array</code>.只有名称匹配的组件会被缓存</p><ul><li>string:<code>include:&quot;a,b&quot;</code></li><li>RegExp:<code>:include:&quot;/a|b/&quot;</code></li><li>Array:<code>:include:&quot;[&#39;a&#39;,&#39;b&#39;]&quot;</code></li></ul></li><li><p><code>exclude</code> : <code>string</code> | <code>RegExp</code> | <code>Array</code>.任何名称匹配的组件都不会被缓存</p></li><li><p><code>max</code>(不常用) : <code>number</code> | <code>string</code>.最多可以缓存多少组件实例,一旦达到这个数字,那么缓存组件中最近没有被访问的实例会被销毁</p></li></ul><h3 id="缓存组件的生命周期"><a href="#缓存组件的生命周期" class="headerlink" title="缓存组件的生命周期"></a>缓存组件的生命周期</h3><blockquote><p><span style="color:red">对于缓存的组件来说,再次进入时,我们是不会执行created或者mounted等生命周期函数的</span></p></blockquote><ul><li><strong>activated</strong>:在vue对象存活的情况下,进入当前存在<code>activated()</code>函数的页面时,一切到改页面就触发.</li><li><strong>deactivated</strong>:当离开组件A,切到组件B之前,需要对组件A做某些处理,比如清除定时器,这时就需要使用<strong>deactivated</strong></li></ul><h2 id="异步组件的实现-多在路由中用到"><a href="#异步组件的实现-多在路由中用到" class="headerlink" title="异步组件的实现(多在路由中用到)"></a>异步组件的实现(多在路由中用到)</h2><blockquote><p>默认情况下,在构建整个组件树的过程中,因为组件和组件之间是通过模块化直接依赖的,那么webpack在打包时就会将组件模块打包到一起（比如一个app.js文件中）</p></blockquote><h3 id="webpack的代码分包"><a href="#webpack的代码分包" class="headerlink" title="webpack的代码分包"></a>webpack的代码分包</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./utils/math"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vue中实现异步组件"><a href="#vue中实现异步组件" class="headerlink" title="vue中实现异步组件"></a>vue中实现异步组件</h3><ul><li><p>如果我们的项目过大了,对于某些组件我们希望通过异步的方式来进行加载(即进行分包处理),利用vue中的<code>defineAsyncComponent</code>函数</p><ul><li>写成工厂函数,该工厂函数需要返回一个Promise对象</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>defineAsyncComponent<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">const</span> AsyncMain<span class="token operator">=</span><span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/Main.vue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  components<span class="token operator">:</span><span class="token punctuation">&#123;</span>    AsyncMain  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接受一个对象类型,对异步函数进行配置</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> AsyncMain<span class="token operator">=</span><span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token function-variable function">loader</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/Main.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>loadingComponent<span class="token operator">:</span> Loading<span class="token punctuation">,</span>errorComponent<span class="token operator">:</span>Failing<span class="token comment">//在显示loadingComponents组件之前,等待多长时间</span>delay<span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token function-variable function">onError</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>retry<span class="token punctuation">,</span>fail<span class="token punctuation">,</span>attempts</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>loadingComponent</code></td><td>传入一个组件,如果没有加载出异步组件,占位组件会占位</td></tr><tr><td><code>errorComponent</code></td><td>传入一个组件,组件加载失败时显示的组件</td></tr><tr><td><code>delay</code></td><td>在显示loadingComponents组件之前,等待多长时间</td></tr><tr><td><code>onError</code></td><td>传入一个带有四个参数的函数,</td></tr></tbody></table><ul><li><code>onError</code>参数<ul><li><code>err</code>:错误信息</li><li><code>retry</code>:函数,调用retry尝试重新加载</li><li><code>fail</code>:函数,指加载程序结束退出</li><li><code>attempts</code>:记录尝试的次数</li></ul></li></ul><h3 id="异步组件与Suspense-还在实验中-API随时可能修改"><a href="#异步组件与Suspense-还在实验中-API随时可能修改" class="headerlink" title="异步组件与Suspense(还在实验中,API随时可能修改)"></a>异步组件与Suspense(<span style="color:red">还在实验中,API随时可能修改</span>)</h3><ul><li><code>Suspense</code>是一个内置的全局组件,该组件有两个插槽：<ul><li><code>default</code>:如果default可以显示,那么显示default的内容</li><li><code>fallback</code>:如果default无法显示,那么会显示fallback插槽的内容</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AsyncHeader</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AsyncHeader</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#fallback</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用元素和组件"><a href="#引用元素和组件" class="headerlink" title="引用元素和组件"></a>引用元素和组件</h2><ul><li><code>$refs</code>:持有注册过<code>ref attribute</code> 的所有 DOM 元素或者组件实例</li><li><code>$parent</code> 和 <code>$root</code>,获取父元素实例和根元素实例</li></ul><h2 id="组件的v-model"><a href="#组件的v-model" class="headerlink" title="组件的v-model"></a>组件的v-model</h2><blockquote><p>在input中可以使用v-model来完成双向绑定</p><blockquote><p>在封装一个组件,其他地方在使用这个组件时,也可以使用v-model来同时完成这两个功能</p></blockquote></blockquote><ul><li>在&lt;input&gt;中绑定<code>v-model</code>默认帮我们完成的两件事:<ul><li><span style="color:red">v-bind:value的数据绑定和@input的事件监听</span></li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 父组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MainInput</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MainInput</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 组件直接绑定v-model,相当于写成以下模式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MainInput</span> <span class="token attr-name">:modelValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">@update:</span>modelValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message=$event<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MainInput</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 子组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Main的message:&#123;&#123;modelValue&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span><span class="token punctuation">&#123;</span>    modelValue<span class="token operator">:</span>String<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  emits<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"update:modelValue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>    value<span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modelValue      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update:modelValue"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意:<span style="color:red">v-model不能直接绑定到props,props中的属性只读不要改</span></p></li><li><p>绑定多个参数,可以给<code>v-model</code>传参</p><ol><li>默认情况下:v-model其实是绑定了 <code>modelValue</code> 属性和 <code>@update:modelValue</code>的事件</li><li><code>v-model:tittle</code>绑定了<code>title</code>属性,监听了 <code>@update:title</code>的事件</li></ol></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 父组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MainInput</span> <span class="token attr-name"><span class="token namespace">v-model:</span>demo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-model:</span>tittle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tittle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MainInput</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 子组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tittleValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Main的message:&#123;&#123;tittleValue&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demoValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Main的message:&#123;&#123;demoValue&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span><span class="token punctuation">&#123;</span>    demo<span class="token operator">:</span>String<span class="token punctuation">,</span>    tittle<span class="token operator">:</span>String  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  emits<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"update:tittle"</span><span class="token punctuation">,</span><span class="token string">"update:demo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>    tittleValue<span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tittle      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update:tittle"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    demoValue<span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>demo      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update:demo"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3中组件间通信</title>
      <link href="/2021/09/24/vue3-zhong-zu-jian-jian-tong-xin/"/>
      <url>/2021/09/24/vue3-zhong-zu-jian-jian-tong-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="父传子的方式"><a href="#父传子的方式" class="headerlink" title="父传子的方式"></a>父传子的方式</h2><h3 id="使用props"><a href="#使用props" class="headerlink" title="使用props"></a>使用props</h3><ul><li><p>关于props</p><ul><li>Props是你可以在组件上注册一些自定义的attribute；</li><li>父组件给这些attribute赋值，子组件通过attribute的名称获取到对应的值</li></ul></li><li><p>语法</p><ul><li>字符串数组:数组中的字符串就是<code>attribute</code>的名称</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//父组件传递数据</span><span class="token operator">&lt;</span>Demo <span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token operator">/</span><span class="token operator">></span><span class="token comment">//可以动态的绑定</span><span class="token comment">//子组件接收数据</span>props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对象类型，对象类型我们可以在指定attribute名称的同时，可以传入限制<ul><li>指定传入的<span style="color:red">attribute的类型(type)</span></li><li>指定传入的<span style="color:red">attribute是否是必传的(require)</span></li><li>指定没有传入时，<span style="color:red">attribute的默认值(default)</span></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//父组件传递数据</span><span class="token operator">&lt;</span>Demo id<span class="token operator">=</span><span class="token string">"123"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"aaa"</span> tittle<span class="token operator">=</span><span class="token string">"hhh"</span> content<span class="token operator">=</span><span class="token string">"ggg"</span> <span class="token operator">:</span>a<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span><span class="token comment">//子组件接收父组件数据</span>props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  tittle<span class="token operator">:</span> String<span class="token punctuation">,</span>  content<span class="token operator">:</span> String<span class="token punctuation">,</span>  a<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> String<span class="token punctuation">,</span>    require<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"111"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>type类型</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol</li></ul></li><li><p>注意点:类型有关对象的,默认值要写成一个工厂函数(例如<code>Array</code>,<code>Object</code>,<code>Date</code>,<code>Function</code>)<span style="color:red">建议全写成函数</span></p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span><span class="token punctuation">&#123;</span>  type<span class="token operator">:</span>Object<span class="token punctuation">,</span>  <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非Prop的Attribute"><a href="#非Prop的Attribute" class="headerlink" title="非Prop的Attribute"></a>非Prop的Attribute</h3><ul><li><p>定义</p><ul><li>当我们传递给一个组件某个属性，但是该属性并没有定义对应的props或者emits时，就称之为 非Prop的Attribute</li><li>常见的包括<code>class</code>,<code>style</code>,<code>id属性</code>等</li></ul></li><li><p><strong>Attribute继承</strong></p><ul><li>当组件有单个根节点时，非Prop的Attribute将自动添加到根节点的Attribute中</li></ul></li><li><p><strong>注意</strong>:</p><ol><li>如果我们<strong>不希望组件的根元素继承attribute</strong>，可以在组件中设置 <strong>inheritAttrs: false</strong><ul><li><span style="color:red">但是<code>class</code> , <code>style</code></span>，不是 的一部分<code>$attrs</code>，仍将应用于组件的根元素</li></ul></li><li>通过 <code>$attrs</code>来访问所有的 非props的attribute</li><li>使用<code>v-bind</code>可以直接解构绑定的对象,而不需要一个个单独传递</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">//父组件传值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-id<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span>//子组件取值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token comment">&lt;!-- 访问所有的属性,且class属性绑定到根节点label上 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs.id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token comment">&lt;!-- 拿到id属性 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  inheritAttrs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>多个根节点的attribute如果没有显示的绑定，那么会报警告，我们必须手动的指定要绑定到哪一个属性上(由于vue3取消div根元素包裹)</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs.class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>伞兵一号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>伞兵2号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>伞兵3号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="子组件传递给父组件"><a href="#子组件传递给父组件" class="headerlink" title="子组件传递给父组件"></a>子组件传递给父组件</h2><ul><li><p>使用情景</p><ul><li>当子组件有一些事件发生的时候，比如在组件中发生了点击，父组件需要切换内容</li><li>子组件有一些内容想要传递给父组件的时候</li></ul></li><li><p>流程</p><ul><li>我们需要在子组件中定义好在某些情况下触发的事件名称<ol><li>emits使用数组的形式注册:<code>emits: [&quot;add&quot;, &quot;sub&quot;,&quot;addN&quot;]</code></li><li>emits使用对象的形式注册:<ul><li>接收一个函数:<span style="color:red">返回值必须是布尔类型</span>,用来判断内容</li><li>在子组件中使用注册过的方法</li></ul></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//emits: ["add", "sub","addN"],</span>  emits<span class="token operator">:</span><span class="token punctuation">&#123;</span>    add<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>    sub<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token function-variable function">addN</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>payload<span class="token operator">===</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">&#123;</span>      num<span class="token operator">:</span><span class="token number">10</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"sub"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">incrementN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"addN"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token comment">//可以传入多个参数</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在父组件中以v-on的方式传入要监听的事件名称，并且绑定到对应的方法中</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Main</span> <span class="token attr-name">@add</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addOne<span class="token punctuation">"</span></span> <span class="token attr-name">@sub</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subOne<span class="token punctuation">"</span></span> <span class="token attr-name">@addN</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addNum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>当前计数:&#123;&#123;counter&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">addNum</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">+=</span>num<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在子组件中发生某个事件的时候，根据事件名称触发对应的事件</li></ul></li></ul><h2 id="provide和inject"><a href="#provide和inject" class="headerlink" title="provide和inject"></a>provide和inject</h2><blockquote><p>用于深层嵌套的组件,子组件想获取父组件甚至父父的部分内容</p></blockquote><ul><li>父组件有一个 <code>provide</code> 选项来提供数据(强烈建议写成函数的形式)<ul><li><span style="color:red">写成对象模式,这里的this并不会绑定到vm身上,而是一个未定义</sapn></li></ul></li><li>子组件有一个 <code>inject</code>选项来开始使用这些数据</li><li>组件层级<code>App.vue-&gt;Home.vue-&gt;HomeContent.vue</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//App组件</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      names<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>      names<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span>length      <span class="token comment">//names:computed(()=>this.names.length)响应式的数据</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//HomeContent组件</span>  inject<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"names"</span><span class="token punctuation">]</span>  <span class="token comment">//names.value拿取数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>关于响应式数据的处理</strong></p></li><li><p><span style="color:red">修改了<code>this.names</code>的内容，使用length的子组件会并不会不会是响应式的</span></p></li><li><p>provide中的内容并不是响应式的,而是及时通信,修改内容后并不会引起子组件反应</p></li><li><p>解决:</p><ul><li>使用vue3中的<code>computed</code>函数,他返回的是一个ref对象,需要用value取出</li></ul></li></ul><h2 id="全局事件总线mitt"><a href="#全局事件总线mitt" class="headerlink" title="全局事件总线mitt"></a>全局事件总线mitt</h2><ul><li><p>Vue3从实例中移除了 <code>$on</code>、<code>$off</code> 和 <code>$once</code> 方法</p></li><li><p>安装mitt库:<code>npm install mitt</code></p></li><li><p>在utils中封装一个<code>eventbus.js</code>工具</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> mitt <span class="token keyword">from</span> <span class="token string">'mitt'</span><span class="token keyword">const</span> emitter<span class="token operator">=</span><span class="token function">mitt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> emitter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>监听与取消监听</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//Header组件中传入数据</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击Header"</span><span class="token punctuation">)</span>      emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"why"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"why"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//Footer组件中接收数据</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">infomation</span><span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"why"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>infomation<span class="token punctuation">)</span><span class="token punctuation">;</span>    emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> info<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//取消单独事件监听</span>  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    emitter<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"why"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>infomation<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>是通配符打印所有事件,type是接收类型即(“why”),info是传入信息</li><li>取消所有监听<code>emitter.all.clear</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite的创建与使用</title>
      <link href="/2021/09/23/vite-de-chuang-jian-yu-shi-yong/"/>
      <url>/2021/09/23/vite-de-chuang-jian-yu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="关于用vite创建的坑"><a href="#关于用vite创建的坑" class="headerlink" title="关于用vite创建的坑"></a>关于用vite创建的坑</h2><ul><li><p>目前网上还有很多已经弃用有关vite的包,但是某些旧文章以及根据视频整理文章的作者,有着大片误导性的操作,和弃用的包.</p></li><li><p>已弃用包1 <code>@vitejs/create-app</code><br><img src="%E5%BC%83%E7%94%A81.png" alt="弃用包"></p></li><li><p>已弃用包2<code>create-vite-app</code><br><img src="%E5%BC%83%E7%94%A82.png" alt="弃用包"></p><ul><li>弃用包2是网上经常遇到的用来创建vite的包.</li></ul></li><li><p>vite生产阶段并不是跳过编译</p><ol><li>嵌套导入会导致额外的网络往返,在生产环境中发布未打包的 ESM 仍然效率低下</li><li>为了在生产环境中获得最佳的加载性能</li></ol></li></ul><h2 id="关于vite"><a href="#关于vite" class="headerlink" title="关于vite"></a>关于vite</h2><ul><li>vite是一个打包工具,官方给出vite的解释:是下一代打包工具.(夸没夸大不好说,反正挺好用)<ul><li>关于<code>webpack</code>,<code>Rollup</code>和<code>Parcel</code>等工具打包,当项目越来越大型时,js代码量也会呈现指数级增长</li><li>vite利用的是浏览器开始原生支持ES模块的特性</li><li>vite天生支持ts文件,支持ts文件转译</li></ul></li></ul><h2 id="使用vite构建vue项目"><a href="#使用vite构建vue项目" class="headerlink" title="使用vite构建vue项目"></a>使用vite构建vue项目</h2><ul><li>注意：Vite本身也是依赖Node的,所以也需要安装好Node环境<ul><li>并且Vite要求Node版本是大于12版本的</li></ul></li></ul><ol><li>安装方式一:(官方)<ul><li><code>npm init vite@latest my-vue-app --template vue</code></li><li>默认直接安装<span style="color:red">带有vite</span>的vue项目</li><li>注意:要<code>npm install</code>初始化项目</li></ul></li><li>安装方式二:<ul><li>首先:<code>npm init create-vite -g</code>全局安装项目构造工具</li><li><code>create-vite my-vue-app</code>:选择vue,如果使用ts,继续选择vue-ts<ul><li>vanilla</li><li>vue</li><li>react</li><li>preact</li><li>lit-element</li><li>svelte</li></ul></li><li><code>npm install</code>:初始化项目</li></ul></li></ol><ul><li><p><strong>了解vite快速构建</strong></p><ol><li><p>浏览器原生支持ES模块的特性,构建的项目中会将<code>script</code>标签的<code>type</code>属性设置为<code>module</code></p></li><li><p>如果我们查看浏览器中的请求,会发现请求的依然是ts的文件：</p><ul><li>这是因为vite中的服务器Connect会对我们的请求进行转发；</li><li>获取ts编译后的代码,给浏览器返回,浏览器可以直接进行解析<ul><li>且大多数逻辑靠插件钩子而不是中间件完成,对中间件的需求大大减小<br><img src="vite%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8E%9F%E7%90%86.png" alt="vite服务器原理"></li></ul></li></ul></li><li><p>官方的解释:</p><ul><li>冷启动开发服务器,其中模块被区分为<strong>依赖</strong>和<strong>源码</strong><ul><li>依赖:Vite 将会使用 esbuild 预构建依赖</li><li>源码:Vite 只需要在浏览器请求源码时进行转换并按需提供源码<span style="color:red">(按需加载)</span><ul><li>源码 通常包含一些并非直接是 JavaScript 的文件,需要转换(例如 JSX,CSS 或者 Vue/Svelte 组件),时常会被编辑.且不是所有的源码都需要同时被加载(路由)</li></ul></li></ul></li><li>热更新(HMR):<ul><li>注意,非常重要一点:<ol><li>Vite 同时利用 HTTP 头来加速整个页面的重新加载(再次让浏览器为我们做更多事情)</li><li>源码模块的请求会根据 304 Not Modified 进行协商缓存,而依赖模块请求则会通过 Cache-Control: max-age=31536000,immutable 进行强缓存,<span style="color:red">因此一旦被缓存它们将不需要再次请求</span></li></ol></li></ul></li></ul></li><li><p>具体,官方文档<a href="https://cn.vitejs.dev/guide/why.html">https://cn.vitejs.dev/guide/why.html</a></p></li></ol></li></ul><h2 id="使用vite"><a href="#使用vite" class="headerlink" title="使用vite"></a>使用vite</h2><ul><li>在<code>package.json</code>文件中</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vue-tsc --noEmit &amp;&amp; vite build"</span><span class="token punctuation">,</span>    <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"vite preview"</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>npm run dev</code>启动开发服务器</li><li><code>npm run build</code>为生产环境构建产物<ul><li><code>vue-tsc --noEmit</code>类型检查工具</li></ul></li><li><code>npm run serve</code>本地预览生产构建产物</li></ol><h2 id="vite使用ESBuild打包而不是Babel"><a href="#vite使用ESBuild打包而不是Babel" class="headerlink" title="vite使用ESBuild打包而不是Babel"></a>vite使用ESBuild打包而不是Babel</h2><ul><li><p>ESBuild的特点</p><ul><li>超快的构建速度,并且不需要缓存</li><li>支持ES6和CommonJS的模块化</li><li>支持ES6的Tree Shaking</li><li>支持Go,JavaScript的API</li><li>支持TypeScript,JSX等语法编译</li><li>支持SourceMap</li><li>支持代码压缩</li><li>支持扩展其他插件</li></ul></li><li><p>ESBuild快速打包的原因:</p><ul><li>使用Go语言编写的，可以直接转换成机器代码，而无需经过字节码</li><li>ESBuild可以充分利用CPU的多内核，尽可能让它们饱和运行</li><li>ESBuild的所有内容都是从零开始编写的，而不是使用第三方，所以从一开始就可以考虑各种性能问题</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
            <tag> config </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于axios的使用</title>
      <link href="/2021/09/22/axios/"/>
      <url>/2021/09/22/axios/</url>
      
        <content type="html"><![CDATA[<h2 id="理解原生Ajax"><a href="#理解原生Ajax" class="headerlink" title="理解原生Ajax"></a>理解原生Ajax</h2><blockquote><p>ajax本质是在 HTTP 协议的基础上以异步的方式与服务器进行通信.</p><blockquote><p>异步：指某段程序执行时不会阻塞其它程序执行，其表现形式为程序的执行顺序不依赖程序本身的书写顺序，相反则为同步.</p></blockquote></blockquote><ul><li>使用<code>XMLHttpRequest</code> 对象的 <code>open()</code> 和 <code>send()</code> 方法</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>open(method,url,async)</code></td><td>规定请求的类型、URL 以及是否异步处理请求,method：请求的类型.url：文件在服务器上的位置.async：true（异步）或 false（同步）</td></tr><tr><td><code>send(string)</code></td><td>将请求发送到服务器。string：适用于 POST 请求</td></tr></tbody></table><ul><li>其它的属性</li></ul><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>status</code></td><td>200: “OK”</td></tr><tr><td><code>responseText</code></td><td>获得字符串形式的响应数据。</td></tr><tr><td><code>responseXML</code></td><td>获得 XML 形式的响应数据。</td></tr><tr><td><code>setRequestHeader</code></td><td>设置请求头</td></tr><tr><td><code>readyState</code></td><td>存有 XMLHttpRequest 的状态。请求发送到后台后，状态会从 0 到 4 发生变化</td></tr><tr><td><code>onreadystatechange</code></td><td>绑定readyState改变监听</td></tr><tr><td><code>reponseType</code></td><td>指定响应函数的数据类型，如果是json，得到响应后自动解析响应体函数</td></tr><tr><td><code>response</code></td><td>响应体数据，类型取决于responseType的指定</td></tr><tr><td><code>timeout</code></td><td>指定请求超时时间，默认为0代表没有限制</td></tr><tr><td><code>ontimeout</code></td><td>绑定超时的监听</td></tr><tr><td><code>onerror</code></td><td>绑定请求网络错误的监听</td></tr><tr><td><code>abort()</code></td><td>中断请求</td></tr><tr><td><code>getResponseHeader(name)</code></td><td>获取指定名称的响应头值</td></tr><tr><td><code>getAllResponseHeaders()</code></td><td>获取所有的响应头组成的字符串</td></tr></tbody></table><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><blockquote><p>关于axios:是用promise对ajax的封装,支持promise的API</p></blockquote><ul><li>关于axios的特点<ol><li>基本promise的异步ajax请求库</li><li>浏览器端/node端都可以使用</li><li>支持请求/响应拦截器</li><li>支持请求取消</li><li>请求/响应数据转换</li><li>批量发送多个请求</li></ol></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>axios.dafaults.xxx</td><td>请求的默认全局配置</td></tr><tr><td>axios.create([config])</td><td>创建一个新的axios(他没有下面的功能)</td></tr><tr><td>axios.Cannel()</td><td>用于创建取消请求的错误对象</td></tr><tr><td>axios.CannelToken()</td><td>是否创建取消请求的token对象</td></tr><tr><td>axios.isCannel()</td><td>是否是一个取消请求的错误</td></tr><tr><td>axios.all()</td><td>用于批量执行多个异步请求</td></tr><tr><td>axios.spread()</td><td>用来指定接受所有成功的数据的回调函数的方法</td></tr></tbody></table><h3 id="Axios请求的方法"><a href="#Axios请求的方法" class="headerlink" title="Axios请求的方法"></a>Axios请求的方法</h3><ul><li><p>以函数的形式发请求</p><ul><li>语法: <code>axios(config)</code>,config是一个对象{}</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">//请求的地址为:"http://localhost:3000/posts?id=1"</span>  url<span class="token operator">:</span><span class="token string">"http://localhost:3000/posts"</span><span class="token punctuation">,</span>  method<span class="token operator">:</span><span class="token string">"GET"</span><span class="token punctuation">,</span>  params<span class="token operator">:</span><span class="token punctuation">&#123;</span>    id<span class="token operator">:</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">response</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以对象的形式发送请求</p><ul><li>语法:<code>axios.get(config)</code>,config是一个对象{}</li></ul></li></ul><blockquote><p>常用的请求</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>get</td><td>GET请求是可以缓存的,且GET请求有长度限制，仅用于请求数据(不修改)</td></tr><tr><td>post</td><td>用于将数据发送到服务器以创建或更新资源(非等幂的),多次调用会产生不同的结果</td></tr><tr><td>put</td><td>用于将数据发送到服务器以创建或更新资源(等幂的),多次调用不会产生不同的结果</td></tr><tr><td>delete</td><td>用来删除指定的资源，它会删除URI给出的目标资源的所有当前内容。</td></tr></tbody></table><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p><img src="%E6%8B%A6%E6%88%AA%E5%99%A8.png" alt="拦截器"></p><h4 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h4><ul><li><p>请求拦截器的作用</p><ul><li><span style="color:red">添加加载动画或者将本地的token, 携带在请求头给后台…</span></li></ul></li><li><p>语法:</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>      <span class="token parameter">config</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>        <span class="token keyword">return</span> config      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h4><ul><li><p>响应拦截器的作用</p><ul><li><span style="color:red">服务器返回登录状态失效，需要重新登录的时候，跳转到登录页…</span></li></ul></li><li><p>语法:</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>      <span class="token parameter">response</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>        <span class="token keyword">return</span> response      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用js对axios的二次封装"><a href="#使用js对axios的二次封装" class="headerlink" title="使用js对axios的二次封装"></a>使用js对axios的二次封装</h3><ol><li>根据指定配置创建一个新的axios，也就是每个新的axios都有自己的配置</li><li>新axios只是没有<span style="color:red">取消请求和批量发请求</span>的方法，其它所有的语法都是一致的</li><li>由于项目中有部分接口需要的配置与另一个部分接口需要的配置不太一样<ul><li>解决：创建2个新的axios，每个都有自己特有的配置，分别应用到不同要求的接口请求中</li></ul></li></ol><ul><li>在index.js设置axios的实例</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  baseURL<span class="token operator">:</span> <span class="token string">"http://localhost:4000"</span><span class="token punctuation">,</span>  timeout<span class="token operator">:</span> <span class="token number">8000</span><span class="token punctuation">,</span>  <span class="token comment">//设置cors跨域,并设置访问权限,允许跨域携带cookie信息</span>  <span class="token comment">/* withCredentials为true的情况下，  后端要设置Access-Control-Allow-Origin为你的源地址，  例如http://localhost:8080，不能是*，  而且还要设置header(‘Access-Control-Allow-Credentials: true’); */</span>  withCredentials<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认值false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//对于拦截器的设定</span><span class="token keyword">export</span> <span class="token keyword">default</span> service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在axios.js中设置请求的方法</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> service <span class="token keyword">from</span> <span class="token string">"./index"</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>params</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      method<span class="token operator">:</span><span class="token string">"GET"</span><span class="token punctuation">,</span>      url<span class="token punctuation">,</span>      params    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      <span class="token parameter">response</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">//console.log("get请求成功")</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token parameter">reason</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">//console.log("get请求失败")</span>        <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在service.js中配置api接口</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>  get <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./axios"</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getUserList</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用ts对axios封装"><a href="#使用ts对axios封装" class="headerlink" title="使用ts对axios封装"></a>使用ts对axios封装</h3><ul><li>拦截器存在的位置:<ol><li>全局拦截器,所有请求必须经过</li><li>实例拦截器:在实例中使用的拦截器</li><li>请求拦截器:只有特定的请求中才能拦截</li></ol></li></ul><h4 id="拦截器-interceptors-接口封装"><a href="#拦截器-interceptors-接口封装" class="headerlink" title="拦截器(interceptors)接口封装"></a>拦截器(interceptors)接口封装</h4><blockquote><ul><li>对于实例拦截器和请求拦截器并不是必须的,在这里使用可选链进行封装</li><li>由于请求中传入传入的数据并不能确定,接口需要用泛型</li></ul></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import type &#123; AxiosResponse, AxiosRequestConfig &#125; from &#39;axios&#39;export interface RequestInterceptors&lt;T &#x3D; AxiosResponse&gt; &#123;  requestInterceptor?: (config: AxiosRequestConfig) &#x3D;&gt; AxiosRequestConfig  requestInterceptorCatch?: (error: any) &#x3D;&gt; any  responseInterceptor?: (config: T) &#x3D;&gt; T  responseInterceptorCatch?: (error: any) &#x3D;&gt; any&#125;export interface RequestConfig&lt;T &#x3D; AxiosResponse&gt; extends AxiosRequestConfig &#123;  interceptors?: RequestInterceptors&lt;T&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="axios类的封装"><a href="#axios类的封装" class="headerlink" title="axios类的封装"></a>axios类的封装</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import axios, &#123; AxiosInstance &#125; from &#39;axios&#39;import &#123; RequestInterceptors, RequestConfig &#125; from &#39;.&#x2F;interceptors&#39;class Service &#123;  service: AxiosInstance  interceptors?: RequestInterceptors  constructor(config: RequestConfig) &#123;    &#x2F;&#x2F;创建axios实例    this.service &#x3D; axios.create(config)    &#x2F;&#x2F;保存基本信息    this.interceptors &#x3D; config.interceptors    &#x2F;&#x2F;实例才有的拦截器    this.service.interceptors.request.use(      this.interceptors?.requestInterceptor,      this.interceptors?.requestInterceptorCatch    )    this.service.interceptors.response.use(      this.interceptors?.responseInterceptor,      this.interceptors?.responseInterceptorCatch    )    &#x2F;&#x2F;添加所有的实例都有的拦截器    this.service.interceptors.request.use(      (config) &#x3D;&gt; &#123;        console.log(&#39;所有的实例都有&#39;)        return config      &#125;,      (error) &#x3D;&gt; &#123;        return error      &#125;    )    this.service.interceptors.response.use(      (res) &#x3D;&gt; &#123;        const &#123; data &#125; &#x3D; res        if (data &#x3D;&#x3D;&#x3D; &#39;-10001&#39;) &#123;          console.log(&#39;失败&#39;)        &#125; else &#123;          return data        &#125;      &#125;,      (error) &#x3D;&gt; &#123;        if (error.response.status &#x3D;&#x3D;&#x3D; 404) &#123;          console.log(&#39;404&#39;)        &#125;        return error      &#125;    )  &#125;  request&lt;T&gt;(config: RequestConfig&lt;T&gt;): Promise&lt;T&gt; &#123;    return new Promise((reslove, reject) &#x3D;&gt; &#123;      &#x2F;&#x2F;请求拦截器      if (config.interceptors?.requestInterceptor) &#123;        config &#x3D; config.interceptors.requestInterceptor(config)      &#125;      this.service        .request&lt;any, T&gt;(config)        .then((res) &#x3D;&gt; &#123;          &#x2F;&#x2F;响应拦截器          if (config.interceptors?.responseInterceptor) &#123;            res &#x3D; config.interceptors.responseInterceptor(res)          &#125;          &#x2F;&#x2F;数据向下传递          reslove(res)        &#125;)        .catch((err) &#x3D;&gt; &#123;          &#x2F;&#x2F;错误向下传递          reject(err)        &#125;)    &#125;)  &#125;  get&lt;T&gt;(config: RequestConfig&lt;T&gt;): Promise&lt;T&gt; &#123;    return this.request&lt;T&gt;(&#123; ...config, method: &#39;GET&#39; &#125;)  &#125;  post&lt;T&gt;(config: RequestConfig&lt;T&gt;): Promise&lt;T&gt; &#123;    return this.request&lt;T&gt;(&#123; ...config, method: &#39;POST&#39; &#125;)  &#125;  delete&lt;T&gt;(config: RequestConfig&lt;T&gt;): Promise&lt;T&gt; &#123;    return this.request&lt;T&gt;(&#123; ...config, method: &#39;DELETE&#39; &#125;)  &#125;  patch&lt;T&gt;(config: RequestConfig&lt;T&gt;): Promise&lt;T&gt; &#123;    return this.request&lt;T&gt;(&#123; ...config, method: &#39;PATCH&#39; &#125;)  &#125;&#125;export default Service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例的封装"><a href="#实例的封装" class="headerlink" title="实例的封装"></a>实例的封装</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import Service from &#39;.&#x2F;request&#x2F;axios&#39;import &#123; BASE_URL, TIME_OUT &#125; from &#39;.&#x2F;request&#x2F;config&#39;const service &#x3D; new Service(&#123;  baseURL: BASE_URL,  timeout: TIME_OUT,  interceptors: &#123;    requestInterceptor: (config) &#x3D;&gt; &#123;      console.log(&#39;qingqiuchengg&#39;)      return config    &#125;,    requestInterceptorCatch: (error) &#x3D;&gt; &#123;      return error    &#125;,    responseInterceptor: (config) &#x3D;&gt; &#123;      return config    &#125;,    responseInterceptorCatch: (config) &#x3D;&gt; &#123;      return config    &#125;  &#125;&#125;)export default service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="出口文件index-ts"><a href="#出口文件index-ts" class="headerlink" title="出口文件index.ts"></a>出口文件index.ts</h4><blockquote><p>我会对各种请求接口统一写入出口文件统一暴露,然后在组件中按需引入</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express使用</title>
      <link href="/2021/09/21/express-shi-yong/"/>
      <url>/2021/09/21/express-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Express基础使用"><a href="#Express基础使用" class="headerlink" title="Express基础使用"></a>Express基础使用</h2><h3 id="nodemon修改完代码自动重启"><a href="#nodemon修改完代码自动重启" class="headerlink" title="nodemon修改完代码自动重启"></a>nodemon修改完代码自动重启</h3><ol><li><code>nodemon</code>基于Node.js开发的一个第三方命令行工具,</li><li>安装<code>npm i nodemon -g</code></li><li>使用<code>nodemon app.js</code>:可以监视你文件的变化(自动重启服务器)</li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>基本配置</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>    app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port port!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>路由</p></blockquote><ul><li>静态路由</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>动态路由</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/admin/:id'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> id<span class="token operator">=</span>req<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>id<span class="token operator">+</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>静态服务</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* 公开指定目录 */</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/public/"</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>request</code>参数上的一些属性<ul><li>get上的请求:<code>req.query</code>,以对象形式接收query参数</li><li>post上的请求:<code>req.body</code>,拿到表单的数据</li></ul></li></ul><h3 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h3><blockquote><p>问题:当挂在了多张表以后,就会出现后面的路由去前面的路由里空跑</p></blockquote><ul><li><p>解决:当你挂在了多个路由表以后,最好使用app.use()进行分类</p><ul><li>用户相关的路由,标识符以/users开头</li><li>商品相关的路由以/goods开头</li><li><code>app.use(&quot;/users&quot;,router1)</code></li><li><code>app.use(&quot;/goods&quot;,router2)</code></li></ul></li><li><p><code>app.use()</code></p><ul><li>第一个参数选填,默认是”*”,我们可以写一个标识符</li><li>表示以这个字符串开头的标识符,使用后面挂载的内容</li><li>第二个参数就是挂载的内容  </li></ul></li><li><p>app:引入路由表</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> router1<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./route/users"</span><span class="token punctuation">)</span><span class="token keyword">const</span> router2<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./route/goods"</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">,</span>router1<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/goods"</span><span class="token punctuation">,</span>router2<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port port!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>router:封装路由表</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token keyword">const</span> router<span class="token operator">=</span>express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/a"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"laji"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/a"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"haoei"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span>router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h2><ul><li>结构图:<img src="%E4%B8%AD%E9%97%B4%E4%BB%B6.png" alt="中间件"></li></ul><blockquote><p>中间件:</p><blockquote><p>在两个事情中间,给你断开,加入一个内容,加入的这个内容,可以做一些事情,可以继续走下一条路next<br>根据加入位置的不同,叫做不同的名字:</p></blockquote></blockquote><ul><li>全局中间件:<code>req,res,next</code><ol><li>所有请求都要经历,直接挂载到app上</li><li><code>app.use(function()&#123;&#125;)</code></li></ol></li><li>路由级中间件<code>req,res,next</code><ol><li>进入路由表,到匹配对应请求表示之间添加的</li><li>只对当前这个路由表生效</li><li><code>app.use(function()&#123;&#125;)</code></li></ol><ul><li>例如:<code>express.Router()</code></li></ul></li><li>路由应用级中间件<code>req,res,next</code><ol><li>书写在路由表中</li><li>再匹配到指定路径标识符以后,事件处理函数事件</li><li>只对匹配到的该路由标识符生效</li><li>router.get(“路径标识符”,中间件函数,路由处理函数)</li></ol></li><li>全局错误处理中间件<code>error,req,res,next</code><ol><li>一般书写在服务的最后</li><li>一般用来返回最终结果</li><li><code>app.use((error,req,res,next)=&gt;&#123;&#125;)</code></li></ol></li></ul><h3 id="全局错误处理中间件"><a href="#全局错误处理中间件" class="headerlink" title="全局错误处理中间件"></a>全局错误处理中间件</h3><blockquote><p>全局错误处理中间件是处理路由产生的错误,所以一定要写在路由表的后面</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>message<span class="token operator">:</span>error<span class="token punctuation">,</span>code<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>username<span class="token operator">:</span>req<span class="token punctuation">.</span>username<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="解析请求体-全局中间件"><a href="#解析请求体-全局中间件" class="headerlink" title="解析请求体(全局中间件)"></a>解析请求体(全局中间件)</h3><ul><li><p>espress对于地址后面的参数做了单独处理</p></li><li><p>get形式的参数,req里有query成员=&gt;里面就是解析好的请求参数</p></li><li><p>使用express内置</p><ul><li>挂载在服务上,在进入路由之前,解析好请求体</li><li>挂载<code>express.urlencoded()</code></li><li>挂载以后,会在req里添加一个新的成员叫做body</li><li>里面就是所有请求的请求体信息</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cors'</span><span class="token punctuation">)</span><span class="token keyword">const</span> testRouter<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./route/test"</span><span class="token punctuation">)</span><span class="token keyword">const</span> app<span class="token operator">=</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//解决跨域</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//直接挂载一个解析请求体的方式</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>testRouter<span class="token punctuation">)</span><span class="token comment">//路由表一定要在最后写</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"chenggong"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>跨域的最终解决方案,<code>cors</code></li></ul><h3 id="文件上传-路由应用级中间件"><a href="#文件上传-路由应用级中间件" class="headerlink" title="文件上传(路由应用级中间件)"></a>文件上传(路由应用级中间件)</h3><ul><li>单文件上传<ul><li>接收文件:在服务器准备一个用来存储文件的文件夹</li><li>需要插件帮助<ol><li>multer  下载  配置  使用multer配置一个接收器</li><li><code>multer(&#123;dest:&quot;存放文件的路径&quot;&#125;)</code></li></ol></li><li>使用接收器:哪一个路由接收文件,配置在哪一个路由上<ol><li>写在路由标识符后面,路由处理函数的前面</li><li>接收器,single(“前端上传的文件key”)  </li></ol></li></ul></li><li><span style="color:red">注意:会把你的文件存储起来,但是没有后缀,随机命名</span></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//导入multer插件</span><span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'multer'</span><span class="token punctuation">)</span><span class="token comment">//使用multer去生成一个接收器(接收文件存储在指定目录)</span><span class="token keyword">const</span> fileUpload<span class="token operator">=</span><span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>dest<span class="token operator">:</span><span class="token string">"../uploads"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span>fileUpload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"chi"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>复杂单文件上传(只需在单文件上传的基础上,配置一个仓库信息即可)<ul><li>生成一个仓库信息</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function-variable function">destitnation</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//设定存储路径</span>  <span class="token function-variable function">filename</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//设定文件名称</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意:<span style="color:red">返回值:一个仓库信息,使用multer生成一个收集器,接收器里配置一个仓库信息,语法:<code>multer(&#123;storage:仓库信息&#125;)</code></span></p><ul><li>参数<ul><li>req,本次请求信息</li><li>file,本次请求的文件</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//使用multer生成一个仓库信息</span><span class="token keyword">const</span> storage<span class="token operator">=</span>multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">destination</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>file<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//callback.回调函数来设定存储路径</span>    <span class="token comment">//第一个参数null,表示不要修改的二进制流文件</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"../uploads"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">filename</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>file<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//callback.回调函数来设定文件名称</span>    <span class="token comment">//从file信息里把后缀名拿出来,自己拼接随机数</span>    <span class="token keyword">const</span> tem<span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>originalname<span class="token punctuation">)</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">avatar_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">+</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tem<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>单名称多文件上传(在复杂单文件基础上改使用方法)<ul><li><code>single</code>方法是专门接收单文件:<span style="color:red">一个名称一个文件</span></li><li><code>array</code> 方法是专门接收多文件:<span style="color:red">一个名称多个文件</span><ul><li>后面的路由处理函数里面就不能接收<code>req.file</code><ul><li>file只是接收单文件</li><li>files接收多文件  (以一个数组的形式接收file信息)</li></ul></li></ul></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span>fileUpload<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"接收请求信息"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多名称多文件(在复杂单文件基础上改使用方法)<ul><li><code>field</code> 方法就是专门接收多文件:多个名称配多个文件</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">fileUpload<span class="token punctuation">.</span><span class="token function">fields</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"avatar"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"photo"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cookie-amp-session-全局中间件"><a href="#cookie-amp-session-全局中间件" class="headerlink" title="cookie&amp;session(全局中间件)"></a>cookie&amp;session(全局中间件)</h3><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><ul><li><p><code>cookie-parser</code> 的使用:专门操作cookie的插件</p></li><li><p>挂载到服务上:会在req上添加一个cookies的成员并且里面有所有的cookie信息.且res上会添加一个叫做cookie的方法</p></li><li><p>设置cookie使用的方法<span style="color:red">挂载到路由的前面<br>使用</span></p><ul><li>获取cookie,用<code>req.cookies()</code><ul><li><code>req.cookies</code>得到一个对象{},里面是所有的cookie信息</li><li>没有cookie得到一个空对象{}  </li></ul></li><li>设置cookie,使用<code>res.cookies()</code><ul><li>语法:<code>res.cookie(key,value,&#123;options&#125;)</code></li><li>options:里面配置  路径 域名  过期时间</li><li><code>res.cookie(&quot;c&quot;,300)</code>,默认会话级别(session)</li><li>maxAge表示过期时间,会按照毫秒计算</li></ul></li></ul></li></ul><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><blockquote><p><code>express-session</code>的插件:专门与express的框架结合生成一个session空间</p></blockquote><ul><li>导入</li><li>挂载到服务上<ul><li><code>express-sessiom</code>会操作cookie,而且自动操作cookie</li><li><code>app.use(session(&#123;对session空间的配置&#125;))</code><ol><li><code>secret</code>:加密口令</li><li><code>saveUninitialized</code>:未初始化的时候要不要存储内容,默认是true</li><li><code>resave</code>:重新存储,一般开城true,表示每一次session修改的时候都会重新存储</li><li><code>name</code>:设置cookie的属性</li><li><code>cookie</code>:设置cookie的存储配置</li></ol></li></ul></li><li>使用<blockquote><p>会在req上添加一个成员叫做session是一个对象空间,我们可以向里面添加一些成员内容.当你第一次存储内容的时候,就已经把内容存进去</p></blockquote><ul><li>解释:<code>express-session</code>插件会自动生成一个session id.自动将这个id分成两半,一半放在cookie里面,一半放在服务器的内存里</li><li>属于服务器的一般session id是存储在内存中,一旦服务器重启,数据就消失</li><li>解决:持久化存储,存储在数据库里,<ul><li><code>express-session</code>有一个配置项叫做store</li><li>依赖于第三方插件 connect-mongo</li></ul></li></ul></li></ul><p><strong>connect-mongo</strong> : 选用3.2.0的数据库</p><ul><li><p>使用<code>connectMongo</code> 和<code>session</code>关联</p></li><li><p>在配置session的时候配置使用</p><ul><li>在session的挂载配置里面添加</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">store<span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">MongoStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  url<span class="token operator">:</span><span class="token string">""</span>你的存储位置<span class="token punctuation">,</span>  touchAfter<span class="token operator">:</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">10</span>z <span class="token comment">//自动延长过期时间.至少设置一天(不推荐设置)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//过期会自动删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> router<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./router/router"</span><span class="token punctuation">)</span><span class="token keyword">const</span> cookieParser<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cookie-parser"</span><span class="token punctuation">)</span><span class="token keyword">const</span> session<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express-session"</span><span class="token punctuation">)</span><span class="token keyword">const</span> MongoStore<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"connect-mongo"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token comment">//关联session</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//挂载到服务上</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//挂载session</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">//进行配置</span>  secret<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  name<span class="token operator">:</span><span class="token string">"sessionid"</span><span class="token punctuation">,</span>  saveUninitialized<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  resave<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  cookie<span class="token operator">:</span><span class="token punctuation">&#123;</span>maxAge<span class="token operator">:</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  store<span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">MongoStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">//你存储到mongodb的哪一个位置</span>    url<span class="token operator">:</span><span class="token string">"mongodb://localhost:27017/db"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port port!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意:</p><ol><li>打开页面就默认登录成功了(默认登录成功)</li><li>在session空间里面有一个数据,表示我登陆成功了</li><li>如果你需要存储,<code>req.session.name=value</code></li></ol></li><li><p>访问session空间</p><ul><li>里面如果有这个信息,表示登陆过,就正常显示页面</li><li>如果没有之前存储的信息,表示没有登录,或者一半session id是假的</li><li>直接跳转回登录页</li><li>在这里<code>req.session.username=&quot;张三&quot;</code>,如果是undefined,回到login</li><li>如果<code>req.session.username===&quot;张三&quot;</code>表示登陆过</li></ul></li></ul><h3 id="token凭证-全局中间件"><a href="#token凭证-全局中间件" class="headerlink" title="token凭证(全局中间件)"></a>token凭证(全局中间件)</h3><h4 id="跨域产生的问题"><a href="#跨域产生的问题" class="headerlink" title="跨域产生的问题"></a>跨域产生的问题</h4><blockquote><p>浏览器的同源策略导致的问题：不允许JS访问跨域的Cookie，所以我们没办法存取值</p></blockquote><ul><li>session 持久化存储:一人一半密码,一半在服务器,一半在cookie</li><li>如果想要持久保持登录状态<ol><li>服务器不能变</li><li>可以设置cookie</li></ol></li><li>session的缺点<ol><li>需要保证同一台服务器,不能更换服务器</li><li>保证cookie可以设置,跨域以后cookie不能设置</li><li>容易被伪造</li></ol></li></ul><blockquote><p>解决跨域问题</p></blockquote><ul><li><p>客户端:需要设置<code>withCredentials</code> 属性为 true</p></li><li><p>服务端:同时服务端的响应中必须携带 <code>Access-Control-Allow-Credentials: true</code> 首部。如果服务端的响应中未携带<code>Access-Control-Allow-Credentials: true</code> 首部，浏览器将不会把响应的内容返回给发送者</p></li><li><p>注意规范中提到，<span style="color:red">如果 XMLHttpRequest 请求设置了withCredentials 属性，那么服务器不得设置 Access-Control-Allow-Origin的值为*</span> ，否则浏览器将会抛出<code>The value of the &#39;Access-Control-Allow-Origin&#39; header in the response must not be the wildcard &#39;*&#39;</code> 错误</p></li></ul><h4 id="token凭证的使用"><a href="#token凭证的使用" class="headerlink" title="token凭证的使用"></a>token凭证的使用</h4><ul><li><p>为什么需要token</p><ol><li>http无状态</li><li>session无法跨服务器</li><li>跨域以后cookie无法使用</li><li>token是三段式的加密字符串:第一段和第三段是不可逆加密哈希散列,第二段是base64可逆</li></ol></li><li><p>token验证登录</p><blockquote><p>三段式加密字符串:xxxxxxx.yyyyyy.zzzzzz</p><blockquote><ul><li>第一段:头,签证:安全信息验证,你的口令,进行不可逆加密</li><li>第二段:你要保存的信息:base64加密后截取的内容</li><li>第三段:额外信息:不可逆加密</li></ul><blockquote><p> 这一段字符串由后端发给前端.在登陆过以后,生成一个token给前端,前端保存这个token如果前端需要登录后查看页面,或者登陆后发送的请求,只要你把token带回来,解密一下</p></blockquote></blockquote></blockquote></li><li><p>jwt的使用</p><ul><li>下载第三方包:npm i jsonwebtoken</li><li>生成:<code>jwt.sign(保存的信息,口令,参数)</code><ul><li>保存的信息  </li><li>口令:加密口令,加密的时候混入信息使用,解密的时候还要这个口令</li><li>参数:是一个对象,<code>&#123;expiresIn:过期事件,单位为秒(&quot;1d&quot;)&#125;</code></li></ul></li><li>解码:<code>jwt.verify(要解析的token,口令,回调函数)</code><ul><li>token:必须是一个指定的token</li><li>口令:必须是加密时候的口令</li><li>回调函数的形式接收结果  </li></ul></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> result<span class="token operator">=</span>jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>usrInfo<span class="token punctuation">,</span><span class="token string">"zhangsanfeng"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>expiresIn<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//console.log(result)</span>jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span><span class="token string">"zhangsanfeng"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>验证token:使用<code>express-jwt</code><ul><li>express框架和jwt结合的第三方中间件</li><li>下载:npm i express-jwt</li><li>使用:注册为中间件:<code>app.use(expressJWT(&#123;配置&#125;).unless(&#123;配置&#125;))</code></li><li>如果要使用express-jet:必须要有一个全局配置错误处理中间件</li><li>注意:<span style="color:red">正常的token返回给前端写成 “Bearer “+ token</span>,<code>Bearer</code>后面一定要由空格</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//注册token验证中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">expressJWT</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">//解析口令,需要和加密的时候一致</span>  secret<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  <span class="token comment">//加密方式:SHA256,加密方式在express-jwt里面叫做HS256</span>  algorithms<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"HS256"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">//不需要验证token的路径标识符</span>  path<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"/banner"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//错误处理中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"错误处理中间件"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务端页面渲染"><a href="#服务端页面渲染" class="headerlink" title="服务端页面渲染"></a>服务端页面渲染</h3><ul><li><p><code>express-art-template</code>插件:专门和express结合的art-template模板引擎</p></li><li><p>注意</p><ul><li>使用:<code>express-art-template</code>插件的时候(只负责与express结合)</li><li>必须下载:<code>art-template</code>插件</li></ul></li><li><p>配置:</p><ul><li>语法:<code>app.engine(后缀名,在引擎上配置哪个内容)</code></li><li>例如:<code>app.engine(&quot;html&quot;,require(&quot;express-art-template&quot;))</code></li><li>其中,在这里配置好<code>express-art-template</code>,会自动引入<code>art-template</code></li></ul></li><li><p>使用:</p><ul><li>在引擎上配置好以后,<code>express-art-template</code>,会在res上添加一个方法叫做<code>render()</code></li><li>语法:res.render(路径,对象)<ul><li>例如:<code>res.render(&quot;./login.html&quot;,&#123;&#125;)</code> </li></ul></li><li>路径:默认是服务器根目录(app.js所在目录)下的views文件夹里面的路径</li><li>a.html–&gt;views/a.html:会自动读取这个匹配的文件</li><li>对象:成员,就是在指定文件里面使用的数据<code>&#123;name:&quot;jack&quot;&#125;</code></li><li>作用:<ol><li>自动取views文件夹里面按照你的路径读取文件</li><li>自动按照 模板引擎 组装好你的页面</li><li>自动把这个拼接好的页面返回给前端</li></ol></li></ul></li></ul><h2 id="MVC开发模型"><a href="#MVC开发模型" class="headerlink" title="MVC开发模型"></a>MVC开发模型</h2><ul><li>结构图:<img src="mvc.png" alt="mvc"></li></ul><blockquote><p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。</p></blockquote><ul><li><p><code>Model</code>（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</p></li><li><p><code>View</code>（视图） - 视图代表模型包含的数据的可视化。</p></li><li><p><code>Controller</code>（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开</p></li><li><p>举例:<img src="mvc%E5%B0%81%E8%A3%85%E5%BC%8F%E5%BC%80%E5%8F%91.png" alt="封装一个项目"></p><ul><li>config:配置</li><li>controllers:路由处理函数控制器</li><li>db:数据库模型封装</li><li>middleware:路由中间件的封装</li><li>model:对数据库操作的封装</li><li>routes:路由表的封装</li><li>utils:工具类</li><li>app:引入</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs及网络请求</title>
      <link href="/2021/09/20/nodejs-ji-wang-luo-qing-qiu/"/>
      <url>/2021/09/20/nodejs-ji-wang-luo-qing-qiu/</url>
      
        <content type="html"><![CDATA[<h2 id="nodejs核心模块"><a href="#nodejs核心模块" class="headerlink" title="nodejs核心模块"></a>nodejs核心模块</h2><h3 id="fs读写模块"><a href="#fs读写模块" class="headerlink" title="fs读写模块"></a>fs读写模块</h3><ul><li>读取文件</li><li>使用<code>fs.readFile</code>用来读取文件<ol><li>第一个读取文件的路径</li><li>第二个参数是一个可选参数,字符编码转换:例如:<code>utf-8</code></li><li>第三个参数是一个回调函数<ul><li>成功 <code>data:数据</code>,```error:null``</li><li>失败 <code>data:undefined</code>,<code>error:错误对象</code></li></ul></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./data/hello.txt"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>写入文件</li><li>使用<code>fs.writeFile</code>用来写入文件</li></ul><blockquote><p>第一个参数是文件路径,第二个参数是文件内容,第三个参数是回调函数  </p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"./data/helloworld.txt"</span><span class="token punctuation">,</span><span class="token string">"dajiahao"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>读目录</li><li>使用<code>fs.readDir</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readDir</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>files</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h3><ul><li><code>path.basename</code><ul><li>获取一个路径的文件名(默认包含扩展名)</li></ul></li><li><code>path.dirname</code><ul><li>获取一个路径中的目录部分</li></ul></li><li><code>path.extname</code><ul><li>获取一个路径中的扩展名部分</li></ul></li><li><code>path.parse</code><ul><li>把一个路径转换为对象<ul><li>root:根路径</li><li>dir:目录</li><li>base:包含后缀名的文件名</li><li>ext:后缀名</li><li>name:不包含后缀名的文件名</li></ul></li></ul></li><li><code>path.join</code><ul><li>当你需要进行路径拼接的时候,推荐使用这个方法</li></ul></li><li><code>path.isAbsolute</code>:判断一个路径是否为绝对路径  </li></ul><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><blockquote><p>http模块,用来创建编写服务器:提供服务,发请求,接收请求,处理请求</p></blockquote><ol><li>创建一个Server实例</li><li>注册request请求事件</li><li>绑定端口号,启动服务器</li></ol><ul><li><p>当客户端请求过来,就会自动触发<code>request</code>请求事件,然后执行第二个参数(回调函数函数)</p></li><li><p>request请求事件处理函数.接收两个参数</p><ul><li><p>request: 请求对象</p><p>  请求对象可以用来获取客户端的的一些请求信息.例如请求路径</p></li><li><p>response: 响应对象</p><p>  响应对象可以用来给客户端发送响应消息</p></li></ul></li><li><p><code>response</code> 对象的write方法,可以用来给客户端响应数据</p></li><li><p><code>write</code>可以使用多次,但是最后一定要用end来结束响应,否则客户端会一直等待</p></li><li><p>响应体的两种写法</p><ol><li><code>write&amp;end</code></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//结束响应 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><code>end</code>:<code>response.end(&quot;hello&quot;)</code>发送响应的同时,直接结束</li></ol></li><li><p>Tips:响应内容只能是二进制或者字符串</p><ol><li>如果要响应数字,对象,数组,布尔值,要用JSON.stringify()</li><li><code>response.end(JSON.stringify())</code></li></ol></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> http<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token comment">//使用http.createServer()方法创建一个web服务器</span><span class="token keyword">const</span> server<span class="token operator">=</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到请求"</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token operator">===</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token operator">===</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"hao"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"404"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"3000端口号成功启动"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h3><ul><li><code>parse()</code>:解析地址,第一个参数为地址,第二个可选,默认为false,为true时,query查询参数为对象<ul><li><code>pathname</code>:不带查询参数的请求路径<ul><li>例如: 请求路径为<code>/plugins?name=jack&amp;password=123456</code></li><li>那么<code>pathname=/plugins</code></li></ul></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> url<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token keyword">let</span> u<span class="token operator">=</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/?tn=49055317_4_hao_pg"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">protocol<span class="token operator">:</span> <span class="token string">'https:'</span><span class="token punctuation">,</span>slashes<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>auth<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>host<span class="token operator">:</span> <span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span>port<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>hostname<span class="token operator">:</span> <span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span>      hash<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>search<span class="token operator">:</span> <span class="token string">'?tn=49055317_4_hao_pg'</span><span class="token punctuation">,</span>query<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token operator">:</span> <span class="token keyword">null</span> prototype<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> tn<span class="token operator">:</span> <span class="token string">'49055317_4_hao_pg'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>pathname<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>path<span class="token operator">:</span> <span class="token string">'/?tn=49055317_4_hao_pg'</span><span class="token punctuation">,</span>href<span class="token operator">:</span> <span class="token string">'https://www.baidu.com/?tn=49055317_4_hao_pg'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><ul><li><p>tips:</p><ol><li>用户编写文件模块,相对路径必须加./,不能省略</li><li>node中没有全局作用域,只有模块作用域</li><li>外部访问不到内部,内部也访问不到内部</li></ol></li><li><p><code>require</code> 方法的两个作用:</p><ol><li>加载文件并且执行里面的代码</li><li>拿到被加载文件模块导出的接口对象</li></ol></li><li><p><code>exports</code>:</p><ol><li>在每个文件模块都提供一个对象:exports</li><li>exports默认是一个空对象</li><li>需要把所有需要被外部访问的成员变量挂载到exports上</li></ol></li><li><p>暴露方式</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//第一种暴露方式(暴露对象)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>  msg<span class="token operator">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//第二种暴露方式(暴露函数)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hh"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//第三种暴露方式</span>exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lj"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> module1<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">let</span> module2<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">let</span> module3<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>module1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">module2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>module3<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>原理解析(理解)</p><ul><li><code>exports</code>是<code>module.exports</code>的一个引用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lj"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//等价于</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lj"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports<span class="token operator">===</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内部暴露的是:<code>return module.exports</code></p><ul><li><span style="color:red">默认指向同一个对象,最好不要混用</span></li></ul></li></ul><h3 id="其他成员"><a href="#其他成员" class="headerlink" title="其他成员"></a>其他成员</h3><ul><li><p><code>__dirname</code>和<code>__filename</code></p></li><li><p><code>__dirname</code>:可以获取当前文件模块所属模块的绝对路径</p></li><li><p><code>__filename</code>:可以获取当前文件的绝对路径</p></li></ul><h2 id="服务端与客户端渲染"><a href="#服务端与客户端渲染" class="headerlink" title="服务端与客户端渲染"></a>服务端与客户端渲染</h2><blockquote><p>定义:</p></blockquote><ol><li>服务端渲染：DOM树在服务端生成,然后返回给前端.</li><li>客户端渲染（SSR）：前端去后端取数据生成DOM树.</li></ol><ul><li><p>服务端渲染的优点：</p><ol><li>尽量不占用前端的资源,前端这块耗时少,速度快.</li><li>有利于SEO优化,因为在后端有完整的html页面,所以爬虫更容易爬取信息.</li></ol></li><li><p>服务端渲染的缺点：</p><ol><li>不利于前后端分离,开发的效率降低了.</li><li>对html的解析,对前端来说加快了速度,但是加大了服务器的压力.</li></ol></li><li><p>客户端渲染的优点：</p><ol><li>前后端分离,开发效率高.</li><li>用户体验更好,我们将网站做成SPA（单页面应用）或者部分内容做成SPA,当用户点击时,不会形成频繁的跳转.</li></ol></li><li><p>客户端渲染的缺点：</p><ol><li>前端响应速度慢,特别是首屏,这样用户是受不了的.</li><li>不利于SEO优化,因为爬虫不认识SPA,所以它只是记录了一个页面.</li></ol></li><li><p>服务端和客户端渲染的区别：</p><ol><li>二者本质的区别：是谁来完成了html的完整拼接,服务端渲染是在服务端生成DOM树,客户端渲染是在客户端生成DOM树.</li><li>响应速度：服务端渲染会加快页面的响应速度,客户端渲染页面的响应速度慢.</li><li>SEO优化：服务端渲染因为是多个页面,更有利于爬虫爬取信息,客户端渲染不利于SEO优化.</li><li>开发效率：服务端渲染逻辑分离的不好,不利于前后端分离,开发效率低,客户端渲染是采用前后端分离的方式开发,效率更高,也是大部分业务采取的渲染方式.</li></ol></li><li><p>直观的区分服务端渲染和客户端渲染：</p><ul><li>源码里如果能找到前端页面中的内容文字,那就是在服务端构建的DOM,就是服务端渲染,反之是客户端渲染.</li></ul></li><li><p>应该使用服务端渲染还是客户端渲染：</p><ol><li>我们要根据业务场景去选择渲染的方式.</li><li>如果是企业级网站,主要功能是页面展示,它没有复杂的交互,并且需要良好的SEO,那我们应该使用服务端渲染.</li><li>如果是后台管理页面,交互性很强,它不需要考虑到SEO,那我们应该使用客户端渲染.</li><li>具体使用哪种渲染方式也不是绝对的,现在很多网站使用服务端渲染和客户端渲染结合的方式：首屏使用服务端渲染,其他页面使用客户端渲染.这样可以保证首屏的加载速度,也完成了前后端分离.</li></ol></li></ul><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><ul><li>编码图<br><img src="http%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.jpg" alt="http请求报文"></li><li>结构图<br><img src="%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png" alt="请求报文"></li></ul><blockquote><p>一个请求中会附带一个请求包头,包含一些“隐形”信息.语言、浏览器、操作系统和硬件设备.服务端可以根据这些信息再去生成有正对性的数据.</p></blockquote><ul><li><p>HTTP请求报文由<span style="color:red">请求行(request line),请求头部(header),空行和请求数据(请求体)</span>4个部分组成</p><ul><li>请求行:请求方法字段,url字段和HTTP协议版本<ul><li>例如: <code>GET /index.html HTTP/1.1</code></li><li>GET请求方法<ul><li>GET方法的特点<ul><li>GET请求能够被缓存<ul><li>GET请求会保存在浏览器的浏览记录中</li><li>以GET请求的URL能够保存为浏览器书签</li><li>GET请求有长度限制</li><li>GET请求主要用于获取数据</li></ul></li></ul></li></ul></li><li>GET请求参数<ul><li>例如:<a href="https://www.bilibili.com/video/BV1UE411H71P?p=30&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1UE411H71P?p=30&amp;spm_id_from=pageDriver</a></li><li>其中<code>?p=30&amp;spm_id_from=pageDriver</code>为get的请求参数,用req.query即可拿到</li></ul></li><li>POST<ul><li>POST方法的特点<ul><li>POST请求不能被缓存下来</li><li>POST请求不会保存在浏览器浏览记录中</li><li>以POST请求的URL无法保存为浏览器书签</li><li>POST请求没有长度限制</li><li>请求头(key value的形式):</li></ul></li></ul></li></ul></li><li>请求头<ul><li><code>User-Agent</code>:产生请求的浏览器类型</li><li><code>Accept</code>:客户端可以接收的内容类型列表</li><li><code>Host</code>:主机地址</li><li><code>Referer</code>:表示这个请求是从哪个URL过来的</li><li><code>Cache-Control</code>:对缓存进行控制:如一个请求希望响应返回的内容在客户端要被缓存一年，或不希望被缓存就可以通过这个报文头达到目的。 </li><li><code>Cookie</code>:<span style="color:red">客户端</span>的Cookie就是通过这个报文头属性传给服务端<ul><li><code>Cookie: $Version=1; Skin=new;jsessionid=5F4771183629C9834F8382E23BE13C4C</code></li></ul></li><li>其它属性: <a href="http://en.wikipedia.org/wiki/List_of_HTTP_header_fields">http://en.wikipedia.org/wiki/List_of_HTTP_header_fields</a></li></ul></li><li>请求数据(请求体)<ul><li>一般 <span style="color:red">GET请求没有主体内容</span>,但 <code>POST</code> 请求是有的.<ul><li>get方法会将数据拼接在url后面,传递参数受限</li><li>post方法会把数据以key,value的形式发送请求</li></ul></li><li>POST 请求体最常见的媒体类型是 <code>application/x-www-form-urlendcoded</code>,是键值对集合的简单编码,用 &amp; 分隔（基本上和查询字符串的格式一样）.</li><li>如果 POST 请求需要支持文件上传,则媒体类型是 <code>multipart/form-data</code> ,它是一种更为复杂的格式.</li><li>最后是 AJAX 请求,它可以使用 application/json</li></ul></li><li>空行:<ul><li>发送回测回复和换行符,通知服务器以下不再有请求头</li></ul></li></ul></li><li><p>例如请求数据：</p></li></ul><table><thead><tr><th>标号</th><th>请求报文</th></tr></thead><tbody><tr><td>1</td><td>GET/sample.jspHTTP/1.1</td></tr><tr><td>2</td><td>Accept:  image/gif.image/jpeg,/</td></tr><tr><td>3</td><td>Accept-Language: zh-cn</td></tr><tr><td>4</td><td>Connection:  Keep-Alive</td></tr><tr><td>5</td><td>Host:</td></tr><tr><td>6</td><td>User-Agent:  Mozila/4.0(compatible;MSIE5.01;Window NT5.0)</td></tr><tr><td>7</td><td>Accept-Encoding: gzip,deflate</td></tr><tr><td>8</td><td></td></tr><tr><td>9</td><td>username=jinqiao&amp;password=1234</td></tr></tbody></table><ul><li>第一行为http请求行，包含方法，URL 和http版本</li><li>2-7为请求头，包含浏览器，主机，接受的编码方式和压缩方式</li><li>第8行表示一个空行 表示请求头结束 这个空行是必须的</li><li>第9行是数据体，比如是需要查询的信息。</li></ul><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><ul><li>编码图<br><img src="%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.jpg" alt="响应报文"></li></ul><blockquote><p>服务器响应回传一些浏览器没必要渲染和显示的信息,通常是元数据和服务器信息.它告诉浏览器正在被传输的内容类型（网页、图片、样式表、客户端脚本等）.</p></blockquote><ul><li><p>http响应体由三部分组成：</p><ul><li>http响应由三个部分组成分别是<span style="color:red">状态行，响应头，响应正文</span></li><li>状态行是由：<code>HTTP-Version+Status-Code+Reason-Phrase</code><ul><li><code>HTTP-Version</code>表示服务器HTTP协议的版本；<code>Status-Code</code>表示服务器发回的响应状态代码；<code>Reason-Phrase</code>表示状态代码的文本描述。<code>Status-Code</code>由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。</li></ul></li><li>比如：HTTP/1.1 200 ok<ul><li>分别表示http版本 + 状态码 + 状态代码的文本描述</li></ul></li></ul></li><li><p>状态码描述</p><ul><li>1xx：指示信息–表示请求已接收，继续处理。</li><li>2xx：成功–表示请求已被成功接收、理解、接受。</li><li>3xx：重定向–要完成请求必须进行更进一步的操作。</li><li>4xx：客户端错误–请求有语法错误或请求无法实现。</li><li>5xx：服务器端错误–服务器未能实现合法的请求。</li></ul></li><li><p>常见状态代码、状态描述的说明如下。</p><ul><li><code>200 OK</code>：客户端请求成功。</li><li><code>400 Bad Request</code>：客户端请求有语法错误，不能被服务器所理解。</li><li><code>401 Unauthorized</code>：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。</li><li><code>403 Forbidden</code>：服务器收到请求，但是拒绝提供服务。</li><li><code>404 Not Found</code>：请求资源不存在，举个例子：输入了错误的URL。</li><li><code>500 Internal Server Error</code>：服务器发生不可预期的错误。</li><li><code>503 Server Unavailable</code>：服务器当前不能处理客户端的请求，一段时间后可能恢复正常，举个例子：HTTP/1.1 200 OK（CRLF）。</li></ul></li></ul><h4 id="常见的响应报文头属性"><a href="#常见的响应报文头属性" class="headerlink" title="常见的响应报文头属性"></a>常见的响应报文头属性</h4><p><strong>Cache-Control</strong>:响应输出到客户端后，服务端通过该报文头属告诉客户端如何控制响应内容的缓存</p><ul><li>例如:<code>Cache-Control: max-age=3600</code></li></ul><p><strong>Set-Cookie</strong>:服务端可以设置客户端的Cookie，其原理就是通过这个响应报文头属性实现的 </p><ul><li>例如:<code>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</code></li></ul><p><strong>Content-type</strong>:在响应体中设置</p><ol><li>服务端默认发送的数据,默认是utf-8的内容</li><li>浏览器不知道服务器端响应的是utf-8的编码,会默认使用当前操作系统的默认编码区解析</li><li>中文默认是gbk</li><li>在http协议中,<code>Content-type</code>是用来告诉对方,服务端发送的数据内容是什么类型</li></ol><ul><li><p>语法:<code>response.setHeader(&quot;Content-type&quot;,&quot;text/plain;charset=utf-8&quot;)</code></p></li><li><p>注意:在html中使用<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>也可以转换编码</p></li><li><p><code>Content-type</code>的类型</p></li></ul><table><thead><tr><th>text/html</th><th>HTML格式</th></tr></thead><tbody><tr><td>text/plain</td><td>纯文本格式</td></tr><tr><td>text/xml</td><td>XML格式</td></tr><tr><td>text/css</td><td>.css</td></tr><tr><td>image/gif</td><td>gif图片格式</td></tr><tr><td>image/jpeg</td><td>jpg图片格式</td></tr><tr><td>image/png</td><td>png图片格式</td></tr><tr><td>application/x-javascript</td><td>.js</td></tr><tr><td>audio/mp3</td><td>.mp3</td></tr><tr><td>video/mpeg4</td><td>.mp4</td></tr><tr><td>application/pdf</td><td>.pdf</td></tr></tbody></table><p><strong>其它响应报文头属性</strong>:<a href="http://en.wikipedia.org/wiki/List_of_HTTP_header_fields">http://en.wikipedia.org/wiki/List_of_HTTP_header_fields</a>  </p><h3 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h3><blockquote><p>请求对象（通常传递到回调方法,这意味着你可以随意命名,通常命名为 req 或 request ）的生命周期始于 Node 的一个核心对象 <code>http.IncomingMessage</code> 的实例.</p></blockquote><ul><li><p>Express 添加了一些附加功能.（除了来自 Node 的 <code>req.headers</code> 和<code>req.url</code> ,所有这些方法都由 Express 添加）.</p></li><li><p><code>req.params</code></p><ul><li>一个数组,包含命名过的路由参数.</li></ul></li><li><p><code>req.param(name)</code></p><ul><li>返回命名的路由参数,或者 GET 请求或 POST 请求参数.(建议你忽略此方法)</li></ul></li><li><p><code>req.query</code></p><ul><li>一个对象,包含以键值对存放的查询字符串参数（通常称为 GET 请求参数）</li></ul></li><li><p><code>req.body</code></p><ul><li>一个对象,包含 POST 请求参数.这样命名是因为 POST 请求参数在 REQUEST 正文中传递,而不像查询字符串在 URL 中传递.要使 req.body 可用,需要中间件能够解析请求正文内容类型.</li></ul></li><li><p><code>req.route</code></p><ul><li>关于当前匹配路由的信息.主要用于路由调试.</li></ul></li><li><p><code>req.cookies/req.singnedCookies</code></p><ul><li>一个对象,包含从客户端传递过来的 cookies 值.</li></ul></li><li><p><code>req.headers</code></p><ul><li>从客户端接收到的请求报头.</li></ul></li><li><p><code>req.accepts([types])</code></p><ul><li>一个简便的方法,用来确定客户端是否接受一个或一组指定的类型（可选类型可以是单个的 MIME 类型,如 <code>application/json</code> 、一个逗号分隔集合或是一个数组）,假定浏览器默认始终接受 HTML.</li></ul></li><li><p><code>req.ip</code></p><ul><li>客户端的 IP 地址.</li></ul></li><li><p><code>req.path</code></p><ul><li>请求路径（不包含协议、主机、端口或查询字符串）.</li></ul></li><li><p><code>req.host</code></p><ul><li>一个简便的方法,用来返回客户端所报告的主机名.这些信息可以伪造,所以不应该用于安全目的.</li></ul></li><li><p><code>req.xhr</code></p><ul><li>一个简便属性,如果请求由 Ajax 发起将会返回 true .</li></ul></li><li><p><code>req.protocol</code></p><ul><li>用于标识请求的协议（ http 或 https ）.</li></ul></li><li><p><code>req.secure</code></p><ul><li>一个简便属性,如果连接是安全的,将返回 true .等同于 <code>req.protocol===&#39;https&#39;</code> .</li></ul></li><li><p><code>req.url/req.originalUrl</code></p><ul><li>这些属性返回了路径和查询字符串（它们不包含协议、主机或端口）.</li></ul></li><li><p><code>req.url</code></p><ul><li>若是出于内部路由目的,则可以重写,但是 req.orginalUrl 旨在保留原始请求和查询字符串.</li></ul></li><li><p><code>req.acceptedLanguages</code></p><ul><li>一个简便方法,用来返回客户端首选的一组（人类的）语言.这些信息是从请求报头中解析而来的.</li></ul></li></ul><h3 id="响应对象"><a href="#响应对象" class="headerlink" title="响应对象"></a>响应对象</h3><blockquote><p>响应对象（通常传递到回调方法,这意味着你可以随意命名它,通常命名为 res 、 resp 或response ）的生命周期始于 Node 核心对象 <code>http.ServerResponse</code> 的实例.</p></blockquote><ul><li><p><strong>Express</strong> 添加了一些附加功能.下面列举了响应对象中最有用的属性和方法（所有这些方法都是由 Express添加的）.</p></li><li><p><strong>res.status(code)</strong></p><ul><li>设置 HTTP 状态代码.Express 默认为 200（成功）,所以你可以使用这个方法返回状态404（页面不存在）或 500（服务器内部错误）.</li></ul></li><li><p><strong>res.set(name,value)</strong></p><ul><li>设置响应头.这通常不需要手动设置.</li></ul></li><li><p><strong>res.cookie（name,vaue,[options]）,res.clearCookie(name,[options])</strong></p><ul><li>设置或清除客户端 cookies 值.需要中间件支持.</li></ul></li><li><p><strong>res.redirect([status],url)</strong></p><ul><li>重定向浏览器.默认重定向代码是 302（建立）.通常,你应尽量减少重定向,除非永久移动一个页面,这种情况应当使用代码 301（永久移动）.</li></ul></li><li><p><strong>res.send(body),res.send(status,body)</strong></p><ul><li>向客户端发送响应及可选的状态码.Express 的默认内容类型是 <code>text/html</code> .如果你想改为 <code>text/plain</code> ,需要在 res.send 之前调用<code>res.set(‘Content-Type’,’text/plain&#39;)</code> .如果 body 是一个对象或一个数组,响应将会以 JSON 发送（内容类型需要被正确设置）,不过既然你想发送 JSON,我推荐你调用 res.json .</li></ul></li><li><p><strong>res.json(json),res.json(status,json)</strong></p><ul><li>向客户端发送 JSON 以及可选的状态码.</li></ul></li><li><p><strong>res.jsonp()</strong></p><ul><li>发送带有JSONP支持的JSON格式数据响应</li></ul></li><li><p><strong>res.type(type)</strong></p><ul><li>一个简便的方法,用于设置<code>Content-Type</code> 头信息.基本上相当于 <code>res.set(‘Content-Type’,’type’)</code> ,只是如果你提供了一个_没有斜杠_的字符串,它会试图把其当作文件的扩展名映射为一个互联网媒体类型.比如, <code>res.type(&#39;txt&#39;)</code> 会将 Content-Type 设为<code>text/plain</code> .</li></ul></li><li><p><strong>res.format(object)</strong></p><ul><li>这个方法允许你根据接收请求报头发送不同的内容.这是它在 API 中的主要用途.这里有一个非常简单的例子：</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'text/plain'</span><span class="token operator">:</span><span class="token string">'hi there'</span><span class="token punctuation">,</span><span class="token string">'text/html'</span><span class="token operator">:</span><span class="token string">'&lt;b>hi there&lt;/b>'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>res.attachment([filename]),res.download(path,[filename],[callback])</strong></p><ul><li>这两种方法会将响应报头 <code>Content-Disposition</code> 设为 <code>attachment</code> ,这样浏览器就会选择下载而不是展现内容.你可以指定 filename 给浏览器作为对用户的提示.用 re<code>s.download</code> 可以指定要下载的文件,而 <code>res.attachment</code> 只是设置报头.另外,你还要将内容发送到客户端.</li></ul></li><li><p><strong>res.sendFile(path,[option],[callback])</strong></p><ul><li>这个方法可根据路径读取指定文件并将内容发送到客户端.使用该方法很方便.使用静态中间件,并将发送到客户端的文件放在公共目录下.</li></ul></li><li><p><strong>res.links(links)</strong></p><ul><li>设置链接响应报头.这是一个专用的报头,在大多数应用程序中几乎没有用处.</li></ul></li><li><p><strong>res.locals,res.render(view,[locals],callback)</strong></p><ul><li><code>res.locals</code> 是一个对象,包含用于渲染视图的默认上下文. <code>res.render</code> 使用配置的模板引擎渲染视图, <code>res.render</code>的默认响应代码为 200,使用 <code>res.status</code> 可以指定一个不同的代码.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS的模块化</title>
      <link href="/2021/09/14/js-mo-kuai-hua/"/>
      <url>/2021/09/14/js-mo-kuai-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="IIFE模式"><a href="#IIFE模式" class="headerlink" title="IIFE模式"></a><code>IIFE</code>模式</h2><ul><li>模块化</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//这里的window可写可不写</span><span class="token keyword">let</span> msg<span class="token operator">=</span><span class="token string">"module"</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span>module<span class="token operator">=</span><span class="token punctuation">&#123;</span>foo<span class="token punctuation">&#125;</span><span class="token comment">//将foo挂载到window对象</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token comment">//这里的window可写可不写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  module<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="commonjs模块化"><a href="#commonjs模块化" class="headerlink" title="commonjs模块化"></a>commonjs模块化</h2><ul><li><p>tips:</p><ol><li>用户编写文件模块,相对路径必须加./,不能省略</li><li>node中没有全局作用域,只有模块作用域</li><li>外部访问不到内部,内部也访问不到内部</li></ol></li><li><p><code>require</code> 方法的两个作用:</p><ol><li>加载文件并且执行里面的代码</li><li>拿到被加载文件模块导出的接口对象</li></ol></li><li><p><code>exports</code>:</p><ol><li>在每个文件模块都提供一个对象:exports</li><li>exports默认是一个空对象</li><li>需要把所有需要被外部访问的成员变量挂载到exports上</li></ol></li><li><p>暴露方式</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//第一种暴露方式(暴露对象)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>  msg<span class="token operator">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//第二种暴露方式(暴露函数)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hh"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//第三种暴露方式</span>exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lj"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> module1<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">let</span> module2<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">let</span> module3<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>module1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">module2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>module3<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AMD-异步模块定义"><a href="#AMD-异步模块定义" class="headerlink" title="AMD(异步模块定义)"></a>AMD(异步模块定义)</h2><blockquote><ul><li>专门用于浏览器端,模块的加载是异步的</li><li>依赖于<code>Requirejs</code>,<span style="color:red">需要下载依赖</span></li></ul></blockquote><ul><li>语法:<ul><li>定义没有依赖的模块<ul><li><code>define(function()&#123;return 模块&#125;)</code></li></ul></li><li>定义有依赖模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"module1"</span><span class="token punctuation">,</span><span class="token string">"module2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> 模块<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="CMD-通用模块定义"><a href="#CMD-通用模块定义" class="headerlink" title="CMD(通用模块定义)"></a>CMD(通用模块定义)</h2><blockquote><ul><li>专门用于浏览器端,模块的加载是异步的</li><li>模块使用时才会加载</li><li>依赖于<code>Sea.js</code></li></ul></blockquote><ul><li><p>语法:</p><ul><li><p>定义没有依赖的模块</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span>exports<span class="token punctuation">,</span>module</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  exports<span class="token punctuation">.</span>xxx<span class="token operator">=</span>value  module<span class="token punctuation">.</span>exports<span class="token operator">=</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义有依赖模块</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span>exports<span class="token punctuation">,</span>module</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//引入依赖模块(同步)</span>    <span class="token keyword">let</span> module2<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment">//引入依赖模块(异步)</span>    require<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//m3是形参,注册成功注入回调函数函数</span>    <span class="token comment">//暴露模块</span>    exports<span class="token punctuation">.</span>xxx<span class="token operator">=</span>value  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><ol><li>导出模块<code>export</code></li><li>导入模块<code>import</code></li></ol><h3 id="分别暴露"><a href="#分别暴露" class="headerlink" title="分别暴露"></a>分别暴露</h3><ul><li>暴露模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ba</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">let</span> msg<span class="token operator">=</span><span class="token string">"hh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引入模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>fo<span class="token punctuation">,</span>ba<span class="token punctuation">,</span>msg<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"url"</span><span class="token function">fo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">ba</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="统一暴露"><a href="#统一暴露" class="headerlink" title="统一暴露"></a>统一暴露</h3><ul><li>暴露模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>foo <span class="token punctuation">,</span>bar<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引入模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>foo<span class="token punctuation">,</span>bar<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"url"</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>可以使用<code>*</code>整体加载到某个对象上</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> test <span class="token keyword">from</span> <span class="token string">"url"</span>test<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="默认暴露"><a href="#默认暴露" class="headerlink" title="默认暴露"></a>默认暴露</h3><blockquote><p>可以暴露任意数据类型</p></blockquote><ul><li><p>注意:<span style="color:red">不能写多个<code>export default</code></span></p></li><li><p>暴露模块</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>   msg<span class="token operator">:</span><span class="token string">"桃桃"</span><span class="token punctuation">,</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"桃桃"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引入模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> modules <span class="token keyword">from</span> <span class="token string">"./03默认暴露"</span>modules<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>modules<span class="token punctuation">.</span>msg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="import"><a href="#import" class="headerlink" title="import()"></a>import()</h3><blockquote><p><code>require()</code>是动态加载,即异步加载,而import是静态执行,处于代码的最顶层</p><blockquote><p><code>import()</code>函数实现了异步加载,返回一个<code>promise</code>对象,加载获取的值为then的回调参数</p></blockquote></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>foo <span class="token punctuation">,</span>bar<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加载动态模块(注意要开启server)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>foo<span class="token punctuation">,</span>bar<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./myModule.js"</span><span class="token punctuation">)</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS的基本语法</title>
      <link href="/2021/09/13/ts-de-ji-ben-yu-fa/"/>
      <url>/2021/09/13/ts-de-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="运行编译TS"><a href="#运行编译TS" class="headerlink" title="运行编译TS"></a>运行编译TS</h2><ul><li><p>全局下载typescript,<code>npm i typescript -g</code></p><ul><li>编译ts-&gt;js,<code>tsc hello.ts</code></li><li>简化编译,全局下载ts-node,<code>npm i ts-node -g</code></li><li>编译ts文件,<code>ts-node hello.ts</code></li></ul></li><li><p>问题:</p><ul><li>解决方案一: <code>Do you need to change your target library? Try changing the &#39;lib&#39; compiler option to include &#39;dom&#39;</code>:使用:<code>ts-node -T hello.ts</code></li><li>解决方案二: <code>npm install @types/node --save-dev</code></li></ul></li></ul><h2 id="debug调试工具"><a href="#debug调试工具" class="headerlink" title="debug调试工具"></a><a href="#debug%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7">debug调试工具</a></h2><ol><li>安装<code>typescript,ts-node</code>开发依赖,<code>npm i typescript ts-node -D</code></li><li>配置<code>launch.json</code>文件</li></ol><blockquote><p>参考:<a href="https://zyjcould.ltd/2021/11/17/diao-shi/">https://zyjcould.ltd/2021/11/17/diao-shi/</a></p></blockquote><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="注解类型"><a href="#注解类型" class="headerlink" title="注解类型"></a>注解类型</h3><ul><li>注解类型<code>string,number,boolean,any,unknown,undefined,null,never</code></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>tips:</p><ul><li>尽量不要使用<code>any</code>,它可以赋值给任意变量,尽量不要使用</li><li><code>unknow</code>是一个类型安全any</li><li><code>unknow</code>类型的变量,只会赋值给unknown和any类型,不会赋值给其他变量</li><li><span style="color:red">给变量赋值<code>null</code>和<code>undefined</code>不要使用类型推论</span></li><li><code>never</code>类型表示不存在的:<ul><li>例如:函数中是一个死循环或者抛出一个异常</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let d:any&#x3D;truelet s:string&#x3D;&quot;hh&quot;s&#x3D;d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="联合类型-let-x-string-number"><a href="#联合类型-let-x-string-number" class="headerlink" title="联合类型 :let x:string|number"></a>联合类型 :<code>let x:string|number</code></h4><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><ul><li><p>数组中通常建议存放相同类型的元素，不同类型的元素是不推荐放在数组中</p></li><li><p>元组中每个元素都有自己特性的类型，根据索引值获取到的值可以确定对应的类型</p></li><li><p>作为返回值使用:</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function useState&lt;T&gt;(state: T) &#123;let currentState &#x3D; stateconst changeState &#x3D; (newState: T) &#x3D;&gt; &#123;  currentState &#x3D; newState&#125;const info: [string, number] &#x3D; [&quot;abc&quot;, 18]const tuple: [T, (newState: T) &#x3D;&gt; void] &#x3D; [currentState, changeState]return tuple&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="TS类型推论-初始化变量且赋值时"><a href="#TS类型推论-初始化变量且赋值时" class="headerlink" title="TS类型推论:初始化变量且赋值时"></a>TS类型推论:初始化变量且赋值时</h4><ul><li><code>let age=18</code>:可以省略掉类型注解<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let ageage&#x3D;13  &#x2F;&#x2F;这是错误的,不会有类型推论function getsunm(a:number,b:number)&#123;return a+b&#x2F;&#x2F;可以省略类型注解,类型推论为number&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="类型断言和非空类型断言"><a href="#类型断言和非空类型断言" class="headerlink" title="类型断言和非空类型断言"></a>类型断言和非空类型断言</h4><blockquote><p>类型断言语法:</p></blockquote><ul><li>变量 as 类型<ul><li>常量断言和默认类型参数:<strong>获得更精确和不可变的类型</strong></li><li>例如:<code>const 断言</code></li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let a &#x3D; &#123; prop: &quot;hello&quot; &#125;let b &#x3D; &#123; prop: &quot;hello&quot; &#125; as const<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>&lt;类型&gt; 变量</p></li><li><p>非空类型断言:<code>!</code></p><ul><li>传入的message有可能是为<code>undefined</code>的，这个时候是不能执行方法的</li><li>如果确定传入的参数一定是有值的,可以使用<code>!</code></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">elementLength</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token operator">?</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token operator">!</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let s:string | number&#x3D;&quot;hh&quot;let e&#x3D;&quot;ll&quot;s&#x3D;e as strings&#x3D;&lt;string&gt;elet img&#x3D;document.querySelector(&quot;#image&quot;) as HTMLImageElement&#x2F;&#x2F;使用console.dir()打印当前方法的dom值console.log(img)&#x2F;&#x2F;HTMLImageElement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型充补"><a href="#类型充补" class="headerlink" title="类型充补"></a>类型充补</h3><blockquote><p>ES6即以上中的一些规范</p></blockquote><h4 id="可选类型和可选链"><a href="#可选类型和可选链" class="headerlink" title="可选类型和可选链"></a>可选类型和可选链</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Person &#x3D; &#123;  name: string  friend?: &#123;    name: string    age?: number,    girlFriend?: &#123;      name: string    &#125;  &#125;&#125;const info: Person &#x3D; &#123;  name: &quot;why&quot;,  friend: &#123;    name: &quot;kobe&quot;,    girlFriend: &#123;      name: &quot;lily&quot;    &#125;  &#125;&#125;&#x2F;&#x2F;其它文件console.log(info.friend?.girlFriend?.name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="和-的使用"><a href="#和-的使用" class="headerlink" title="??和!!的使用"></a>??和!!的使用</h4><ul><li><code>!!</code>操作符:<ul><li>将一个其他类型转换成boolean类型</li></ul></li><li><code>??</code>操作符:<ul><li>逻辑操作符</li><li><strong>当操作符的左侧是 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数</strong></li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let message: string|null &#x3D; &quot;Hello World&quot;const flag &#x3D; !!messageconst content &#x3D; message ?? &quot;你好啊, 李银河&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="类型别名和字面量类型"><a href="#类型别名和字面量类型" class="headerlink" title="类型别名和字面量类型"></a>类型别名和字面量类型</h4><blockquote><p>在类型注解中编写 <code>对象类型</code> 和 <code>联合类型</code>,想要多次在其他地方使用时,可以起别名<code>type</code></p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type PointType &#x3D; &#123;  x: string  y: number  z?: number&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>字面量类型的意义, 就是必须结合联合类型</p></blockquote><ul><li>注意:字面量类型和值是必须相同的</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; 字面量类型的意义, 就是必须结合联合类型type Alignment &#x3D; &#39;left&#39; | &#39;right&#39; | &#39;center&#39;let align: Alignment &#x3D; &#39;left&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>字面量推理</p></blockquote><pre class="line-numbers language-TS" data-language="TS"><code class="language-TS">type Method &#x3D; &#39;GET&#39; | &#39;POST&#39;function request(url: string, method: Method) &#123;&#125;type Request &#x3D; &#123;  url: string,  method: Method&#125;const options:Request  &#x3D; &#123;  url: &quot;https:&#x2F;&#x2F;www.coderwhy.org&#x2F;abc&quot;,  method: &quot;POST&quot;&#125; &#x2F;&#x2F;as const(这样也可以)request(options.url, options.method)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不给options添加类型别名的时候,options其实是一个<code>&#123;url: string, method: string&#125;</code></li></ul><blockquote><p>如果是导入类型而不是模块,需要标记为类型,处理单个文件的编译器无法知到导入的是值还是类型</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;错误import &#123;BaseType&#125; from &quot;.&#x2F;some-module.js&quot;&#x2F;&#x2F;正确import &#123; someFunc , type BaseType &#125; from &quot;.&#x2F;some-module.js&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类型缩小"><a href="#类型缩小" class="headerlink" title="类型缩小"></a>类型缩小</h4><ul><li><code>typeof</code>的类型缩小<ul><li>typeof是一种类型保护:<code>TypeScript</code> 对如何<code>typeof</code>操作不同的值进行编码</li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type IDType &#x3D; number | stringfunction printID(id: IDType) &#123;  if (typeof id &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;    console.log(id.toUpperCase())  &#125; else &#123;    console.log(id)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>使用Switch或者相等的一些运算符来表达相等性(比如===, !==)</p></li><li><p><code>intanceof</code>:检查一个值是否是另一个值的”实例”</p></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function printTime(time: string | Date) &#123;  if (time instanceof Date) &#123;    console.log(time.toUTCString())  &#125; else &#123;    console.log(time)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>in</strong></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">type Fish &#x3D; &#123;  swimming: () &#x3D;&gt; void&#125;type Dog &#x3D; &#123;  running: () &#x3D;&gt; void&#125;function walk(animal: Fish | Dog) &#123;  if (&#39;swimming&#39; in animal) &#123;    animal.swimming()  &#125; else &#123;    animal.running()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h3><ul><li>有返回值<ul><li><code>function name(num:number):number&#123;return 返回值&#125;</code></li></ul></li><li>默认没有返回值:void可以省略<ul><li><code>function name(num:number):void&#123;&#125;</code></li></ul></li><li>注解函数<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let ageSum:(a:number,b:number)&#x3D;&gt;numberlet ageSum&#x3D;function(a:number,b:number)&#123;  return a+b&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><blockquote><p>在定义形参的数据类型的同时可以传入一个默认值</p></blockquote><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><blockquote><p>剩余参数语法允许我们将一个不定数量的参数放到一个数组中</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function sum(initalNum: number, ...nums: number[]) &#123;  let total &#x3D; initalNum  for (const num of nums) &#123;    total +&#x3D; num  &#125;  return total&#125;console.log(sum(20, 30))&#x2F;&#x2F;30console.log(sum(20, 30, 40))&#x2F;&#x2F;70console.log(sum(20, 30, 40, 50))&#x2F;&#x2F;120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意:剩余参数只能位于形参最后</li></ul><h4 id="匿名函数参数"><a href="#匿名函数参数" class="headerlink" title="匿名函数参数"></a>匿名函数参数</h4><blockquote><p>上下文中的函数可以不加类型注解</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const names &#x3D; [&quot;abc&quot;, &quot;cba&quot;, &quot;nba&quot;]names.forEach(function(item) &#123;  console.log(item.split(&quot;&quot;))&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TypeScript会根据forEach函数的类型以及数组的类型推断出item的类型</li><li>函数执行的上下文可以帮助确定参数和返回值的类型</li></ul><h4 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h4><ul><li>函数重载中,实现函数不能直接调用<ul><li><code>add(&#123;name: &quot;why&quot;&#125;, &#123;age: 18&#125;)</code></li></ul></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function add(num1: number, num2: number): number; &#x2F;&#x2F; 没函数体function add(num1: string, num2: string): string;function add(num1: any, num2: any): any &#123;  if (typeof num1 &#x3D;&#x3D;&#x3D; &#39;string&#39; &amp;&amp; typeof num2 &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;    return num1.length + num2.length  &#125;  return num1 + num2&#125;const result &#x3D; add(20, 30)const result2 &#x3D; add(&quot;abc&quot;, &quot;cba&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意:在开发中尽量使用联合类型</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;联合类型function getLength(args: string | any[]) &#123;  return args.length&#125;&#x2F;&#x2F;实现方式二: 函数的重载function getLength(args: string): number;function getLength(args: any[]): number;function getLength(args: any): number &#123;  return args.length&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数中不确定的this类型"><a href="#函数中不确定的this类型" class="headerlink" title="函数中不确定的this类型"></a>函数中不确定的this类型</h4><ul><li>参考:<a href="https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA">https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA</a></li></ul><h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><ul><li>定义一:<ul><li><code>let names:string[]=[&quot;李四&quot;,&quot;张三&quot;,&quot;王五&quot;]</code></li></ul></li><li>定义二(不推荐,易与React中的jsp混淆):<ul><li><code>let names:Array&lt;string&gt;=[&quot;李四&quot;,&quot;张三&quot;,&quot;王五&quot;]</code></li></ul></li><li>第义三(不推荐):<ul><li><code>let names:string[]=new Array(&quot;李四&quot;,&quot;张三&quot;,&quot;王五&quot;)</code></li></ul></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>创建对象(和js一样)<code>let person=&#123;&#125;</code></li><li>对象的类型注解(对对象的一种约束)</li></ul>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2的生命周期,内置关系</title>
      <link href="/2021/09/09/vue-de-sheng-ming-zhou-qi-nei-zhi-guan-xi/"/>
      <url>/2021/09/09/vue-de-sheng-ming-zhou-qi-nei-zhi-guan-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h2><p><img src="https://www.zyjcould.ltd/img/markdownlifecycle.png" alt="vue生命周期"></p><ol><li><p><code>beforeCreate</code>:在实例初始化之后,数据观测和时间配置之前被调用,此时的组件选项还没有被创建,el和data未初始化</p></li><li><p><code>created</code>:实例已完成以下配置：数据观测、属性和方法的运算，watch/event事件回调，完成了data 数据的初始化，el没有.然而，挂在阶段还没有开始, <code>$el</code>属性目前不可见.此时可以调用<code>methods</code>中的方法，改变<code>data</code>中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取computed中的计算属性等等</p></li></ol><blockquote><p><span style="color:red">注意:这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成</span></p></blockquote><ol start="3"><li><p><code>beforeMounted</code>挂载之前被调用,相关的<code>render</code>函数首次被调用(虚拟DOM),此时data里的数据和模板生成html,el和data初始化完成,但还没有挂载html到页面上</p></li><li><p><code>mounted</code>:挂载完成,将模板中的html渲染到页面,由于mounted只会执行一次,此时一般做些<span style="color:red">ajax,启动定时器,绑定自定义事件,订阅等操作</span></p></li><li><p><code>beforeUpdate</code>:在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子中进一步地更改状态，不会触发附加地重渲染过程</p></li><li><p><code>updated</code>:数据更改会导致地虚拟DOM重新渲染和打补丁就会调用，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环，该钩子在服务器端渲染期间不被调用</p></li><li><p><code>beforeDestory</code>:清除定时器,解绑自定义事件,取消订阅等收尾工作,然而并不会在beforeDestroy操作数据,因为即使操作数据,也不会更新流程,只能用this读到数据</p></li><li><p><code>destroyed</code>:调用后，所以的事件监听器会被移出，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用</p></li></ol><h2 id="缓存组件的两个生命钩子activated和deactivated"><a href="#缓存组件的两个生命钩子activated和deactivated" class="headerlink" title="缓存组件的两个生命钩子activated和deactivated"></a>缓存组件的两个生命钩子<code>activated和deactivated</code></h2><ul><li>思考:当切换不同的组件时，有时会想保持这些组件的状态，以避免反复重渲染导致的性能问题。这时就可以用 &lt;keep-alive&gt;将其动态组件包裹起来.</li></ul><blockquote><p>&lt;keep-alive&gt;包裹的动态组件会被缓存，它是一个抽象组件，它自身不会渲染一个dom元素</p></blockquote><ul><li><strong>activated</strong>：在vue对象存活的情况下，进入当前存在activated()函数的页面时，一切到改页面就触发.</li></ul><blockquote><p><span style="color:red">有的时候我们的单页面在每次切换时需要重新请求数据</span>.由于单页面A切换时只在第一次调用<code>created,mounted</code>这些生命钩子,这时就需要使用activated.在切换到组件B，这时组件A的<code>deactivated</code>的生命周期函数会被触发；在切换回组件A，组件A的<code>activated</code>生命周期函数会被触发.</p></blockquote><ul><li><strong>deactivated</strong>:当离开组件A，切到组件B之前，需要对组件A做某些处理，比如清除定时器，这时就需要使用deactivated.</li></ul><h2 id="路由导航守卫"><a href="#路由导航守卫" class="headerlink" title="路由导航守卫"></a>路由导航守卫</h2><blockquote><p>对路由跳转前后进行一些验证</p></blockquote><table><thead><tr><th>值</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>beforeEach</td><td>全局</td><td>初始化的时候被调用,每次路由切换之前被调用</td></tr><tr><td>afterEach</td><td>全局</td><td>初始化的时候被调用,每次路由切换之后被调用</td></tr><tr><td>beforeRouteEnter</td><td>局部(组件内)</td><td>在路由进入时执行</td></tr><tr><td>beforeRouteUpdate</td><td>局部(组件内)</td><td>在路由更新时执行</td></tr><tr><td>beforeRouteLeave</td><td>局部(组件内)</td><td>在路由离开时执行</td></tr><tr><td>beforeEnter</td><td>局部(路由配置中)</td><td>加载到页面之前执行</td></tr></tbody></table><ul><li><strong>路由守卫参数</strong></li></ul><blockquote><ul><li><code>to :Router</code>：即将要进入的目标 路由对象</li><li><code>from :Router</code>: 当前导航正要离开的路由</li><li><code>next :Function</code>: 执行下一步。 需要注意的是一定要调用next，否则路由对应的组件不会进行渲染</li></ul></blockquote><ol><li><code>next()</code>: 进行下一个路由组件。如果全部钩子执行完了，则导航的状态就是 <code>confirmed</code> (确认的)。</li><li><code>next(false)</code>: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</li><li><code>next(&#39;/&#39;)</code> 或者 <code>next(&#123; path: &#39;/&#39; &#125;)</code>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。可以向 next 传递任意位置对象，且允许设置诸如 <code>replace: true、name: &#39;home&#39;</code> 之类的选项以及任何用在 <code>router-link 的 to prop 或 router.push</code> 中的选项。</li><li>next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给<code>router.onError()</code> 注册过的回调。</li></ol><ul><li><p><span style="color:red">注意:</span>局部的守卫，是在组件内部或路由配置的内部进行使用，而全局的路由守卫是在路由配置项中去使用的</p></li><li><p><code>beforeEach</code>:接收<code>to,from,next</code>.即路由拦截,用来做一些进入页面的限制.比如没有登录，就不能进入某些页面，只有登录了之后才有权限查看某些页面(初始化的时候被调用,每次路由切换之前被调用)</p></li><li><p><code>afterEach</code>:只接受<code>to,from</code>.也是路由拦截,不会接受 <code>next</code> 函数也不会改变导航本身.比如用来清除过期的<code>token</code>(初始化的时候被调用,每次路由切换之后被调用)</p></li><li><p><code>beforeRouteEnter</code>:接收<code>to,from,next</code>,验证用户登录,vip是否到期,权限验证,消息提示.</p><ul><li><span style="color:red">注意: 此时相对应的组件还没有进行渲染,所以无法使用<code>this</code></span></li><li>解决:默认不可以.想要fangwenthis的指向,可以在next这个函数中的参数获取.参数即是实例vm</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requireAuth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">vm</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        vm<span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"login"</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">&#123;</span> toPath<span class="token operator">:</span> to<span class="token punctuation">.</span>path <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>beforeRouteLeave</code>:接收<code>to,from,next</code>.用户支付,答题系统,记录历史记录,注销,切换账号.</p></li><li><p><code>beforeRouteUpdate</code>:接收<code>to,from,next</code>,在组件没有经历创建和销毁，但是路由发生改变的时候需要执行的生命周期.当页面组件没有发生改变，只是路由变化时，<code>created()</code>是不会再次执行，因为这个生命周期只有在组件创建的时候才会调用.</p></li><li><p><code>beforeEnter</code>:接收<code>to,from,next</code>,与全局路由配置一样</p></li></ul><h2 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h2><blockquote><p>常用的两种加载方式:<strong>ES中的import</strong>和<strong>vue异步组件</strong></p></blockquote><ul><li><p>路由懒加载的原因</p><ul><li>官方解释:<ol><li>当打包构建应用时,js的包会非常大,影响页面加载</li><li>如果我们能把不同路由对应的组件分割成不同的代码块.然后当路由被访问的时候才加载对应组件,这样就更加高效</li></ol></li><li>官方的意思<ol><li>首先路由中会定义很多不同的页面</li><li>这个页面打包会在一个js文件中</li><li>然而这就造成页面非常的法,当我们一次性从服务器请求下来这个页面可能需要花费一定的事件,甚至用户的电脑还出现白屏</li></ol></li><li>路由的懒加载:<ol><li>路由的懒加载主要就是将路由对应的组件打包成一个个js代码块</li><li>只有在路由被访问到的时候,才加载对应组件</li></ol></li></ul></li><li><p><strong>未使用路由懒加载</strong></p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"../components/Home"</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">"../components/About"</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span><span class="token string">"/home"</span><span class="token punctuation">,</span>      component<span class="token operator">:</span>Home   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span><span class="token string">"/about"</span><span class="token punctuation">,</span>      component<span class="token operator">:</span>About   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用ES懒加载</strong></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span><span class="token string">"/home"</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/Home"</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span><span class="token string">"/about"</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/About"</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用vue异步组件懒加载</strong></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span><span class="token string">"/home"</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token parameter">resolve</span><span class="token operator">=></span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"../components/Home"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>resolve<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span><span class="token string">"/about"</span><span class="token punctuation">,</span>      <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token parameter">resolve</span><span class="token operator">=></span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"../components/About"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>resolve<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue中重要的内置关系"><a href="#vue中重要的内置关系" class="headerlink" title="vue中重要的内置关系"></a>vue中重要的内置关系</h2><p><img src="https://www.zyjcould.ltd/img/markdown6.vue%E7%BB%84%E4%BB%B6%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB.png" alt="vue生命周期"></p><blockquote><ol><li>一个重要的内置关系:<code>VueComponent.prototype.__proto__===Vue.prototype</code></li><li>为什么要有这个关系:让<span style="color:red">组件实例对象(vc)可以访问到Vue中的原型上的属性,方法</span></li></ol></blockquote><ul><li>关于VueComponent:<ol><li><code>element</code>组件本质是一个名为<code>VueComponent</code>的构造函数,且不是程序员定义的,是Vue.extend生成的</li><li>只需要写&lt;element&gt;</element>或者</element>,Vue解析时就会帮助我们创建<code>element</code>组件的实例对象,即Vue帮我们执行的:<code>new VueComponent(options)</code></li><li>特别注意:每次调用Vue.extend,返回的都是一个全新的VueComponent!!!</li><li>关于this的指向:<ol><li>组件配置中:<br>data函数,methods中的函数,computed中的函数  他们的this指向均是[VueComponent实例对象]</li><li>new Vue()配置中<br>ata函数,methods中的函数,computed中的函数  他们的this指向均是[Vue实例对象]</li></ol></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS布局</title>
      <link href="/2021/09/09/css-bu-ju/"/>
      <url>/2021/09/09/css-bu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="两列布局"><a href="#两列布局" class="headerlink" title="两列布局"></a>两列布局</h3><h4 id="左定宽-右自适应"><a href="#左定宽-右自适应" class="headerlink" title="左定宽,右自适应"></a>左定宽,右自适应</h4><ul><li>float+margin</li></ul><blockquote><p>利用<code>margin-left</code>留出左边的定宽</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span><span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span>left <span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span>12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 18.75rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> rebeccapurple<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 18.75rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 13rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>float+overflow</code>(利用BFC)<ol><li>BFC全称是块级格式化上下文，用于对块级元素排版，默认情况下只有根元素（body）一个块级上下文</li><li>但是如果一个块级元素设置了<code>float:left,overflow:hidden或position:absolute</code>样式，就会为这个块级元素生产一个独立的块级上下文，使这个块级元素内部的排版完全独立。</li><li>如何触发BFC<ul><li>根元素；</li><li><code>float</code>的值不为<code>none</code>；</li><li><code>overflow</code>的值为<code>auto、scroll或hidden</code>；</li><li><code>display</code>的值为<code>table-cell、table-caption和inline-block</code>中的任何一个；</li><li><code>position</code>的值不为<code>relative和static</code>。</li></ul></li></ol></li></ul><blockquote><p>通过<code>overflow:hidden;</code>将块级元素生产除一个独立的块级上下文</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">*</span><span class="token punctuation">&#123;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.left</span><span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">margin-right</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.right</span><span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 给 right 设置 margin-left 的时候记得大于 left直接给 left 设置 margin-right --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>position:absolute</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span><span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> chartreuse<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>       <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token comment">/* 撑大盒子 */</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 绝对定位是边的定位,偏移量取正值,子盒子向里靠拢 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>flex布局</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span><span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token selector">.container</span><span class="token punctuation">&#123;</span>   <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>   <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token selector">.left</span><span class="token punctuation">&#123;</span>   <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token selector">.right</span><span class="token punctuation">&#123;</span>   <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token comment">/* 自适应的分数 */</span>   <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> chartreuse<span class="token punctuation">;</span>   <span class="token property">margin-left</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="右定宽-左自适应"><a href="#右定宽-左自适应" class="headerlink" title="右定宽,左自适应"></a>右定宽,左自适应</h4><ul><li><code>float+margin</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> 7rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> -12.5rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>float+overflow</code></li></ul><blockquote><p>思路:利用<code>float+overflow</code>产生独立的块级上下文</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 浮动会脱标,从而达到固定的效果 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>position:absolute;</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.container</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 13rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>flex布局</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.container</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h3><h4 id="中间自适应"><a href="#中间自适应" class="headerlink" title="中间自适应"></a>中间自适应</h4><ul><li><strong>流体布局</strong></li></ul><blockquote><ul><li>左右模块各自向左右浮动，并设置中间模块的 margin 值使中间模块宽度自适应。</li><li>缺点就是主要内容无法最先加载，当页面内容较多时会影响用户体验。</li></ul></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span><span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 18.75rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.main</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* 外边距增加间隙 */</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 13.75rem<span class="token punctuation">;</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> 13.75rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 18.75rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> cornflowerblue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 18.75rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>BFC三栏布局</strong></li></ul><blockquote><p>缺点跟方法一类似，主要内容模块无法最先加载，当页面中内容较多时会影响用户体验</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">.left</span><span class="token punctuation">&#123;</span>     <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>     <span class="token property">width</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>     <span class="token property">margin-right</span><span class="token punctuation">:</span> .625rem<span class="token punctuation">;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">.right</span><span class="token punctuation">&#123;</span>     <span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>     <span class="token property">width</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>     <span class="token property">margin-left</span><span class="token punctuation">:</span> .625rem<span class="token punctuation">;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> seagreen<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">.main</span><span class="token punctuation">&#123;</span>     <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>     <span class="token comment">/* 隐藏溢出元素 */</span>     <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>圣杯布局</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.container</span><span class="token punctuation">&#123;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 7.5rem<span class="token punctuation">;</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> 13.75rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.main</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 7rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> seagreen<span class="token punctuation">;</span>    <span class="token comment">/* position: relative;    left: -7.5rem; */</span>    <span class="token comment">/* 等同于 */</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -7.5rem<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> -12.5rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> sienna<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 13.75rem<span class="token punctuation">;</span>     <span class="token property">margin-top</span><span class="token punctuation">:</span> -12.5rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>position:absolute</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.container</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.main</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span>0 7.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>双飞翼布局</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.content</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.main</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 5.625rem<span class="token punctuation">;</span>    <span class="token comment">/* margin-top: -12.5rem; */</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span>-100%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12rem<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -12.5rem<span class="token punctuation">;</span>    <span class="token comment">/* margin-top: -12.5rem; */</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> khaki<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>flex布局</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.container</span><span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.main</span><span class="token punctuation">&#123;</span>      <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.left</span><span class="token punctuation">&#123;</span>      <span class="token property">order</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>      <span class="token property">flex</span><span class="token punctuation">:</span>0 1 12.5rem<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">margin-right</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.right</span><span class="token punctuation">&#123;</span>      <span class="token property">flex</span><span class="token punctuation">:</span>0 1 6.25rem<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="两列定宽"><a href="#两列定宽" class="headerlink" title="两列定宽"></a>两列定宽</h4><ul><li><strong>float+margin</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> salmon<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.center</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 18.75rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> sandybrown<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkorchid<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 27rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>float+hidden</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.left</span><span class="token punctuation">&#123;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> darkorchid<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>      <span class="token property">margin-right</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.center</span><span class="token punctuation">&#123;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> darkred<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 18.75rem<span class="token punctuation">;</span>      <span class="token property">margin-right</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.right</span><span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> darkslategrey<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>position:absolute</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkslategrey<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.center</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkturquoise<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 18.75rem<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 7rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> deepskyblue<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 27rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>flex布局</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> deepskyblue<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 8.75rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.center</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> dimgray<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> dodgerblue<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h3><h4 id="多列等宽"><a href="#多列等宽" class="headerlink" title="多列等宽"></a>多列等宽</h4><ul><li><strong>float</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>     <span class="token comment">/* 抵消最左边的盒子的padding-left */</span>     <span class="token property">margin-left</span><span class="token punctuation">:</span> -0.625rem<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">.column</span> <span class="token punctuation">&#123;</span>     <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>     <span class="token comment">/* 改变盒模型宽度影响 保持设置了 padding 也在一行内 */</span>     <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>     <span class="token property">-moz-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>     <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>     <span class="token comment">/* background-clip 只是为了方便看效果，因为 padding 也是有背景色的 */</span>     <span class="token property">background-clip</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>     <span class="token property">width</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> 31.25rem<span class="token punctuation">;</span>     <span class="token comment">/* 不能用 margin-left，会把盒子挤下去，必须 padding 配合 border-box 使用 */</span>     <span class="token property">padding-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">.column:nth-child(2n)</span><span class="token punctuation">&#123;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">.column:nth-child(2n-1)</span><span class="token punctuation">&#123;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>flex布局</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -0.625rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.column</span><span class="token punctuation">&#123;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> .625rem<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.column:nth-child(2n)</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.column:nth-child(2n+1)</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="九宫格布局"><a href="#九宫格布局" class="headerlink" title="九宫格布局"></a>九宫格布局</h4><ul><li><strong>flex布局</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.row</span><span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.item</span><span class="token punctuation">&#123;</span>      <span class="token property">flex</span><span class="token punctuation">:</span>1 0 auto<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>      <span class="token property">padding-right</span><span class="token punctuation">:</span> .625rem<span class="token punctuation">;</span>      <span class="token property">padding-bottom</span><span class="token punctuation">:</span> .625rem<span class="token punctuation">;</span>      <span class="token property">background-clip</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>flex换行(wrap优化)</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">     <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>       <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>       <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>       <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>       <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token selector">.child</span><span class="token punctuation">&#123;</span>       <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>       <span class="token property">width</span><span class="token punctuation">:</span><span class="token function">calc</span><span class="token punctuation">(</span>100%/3<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token property">height</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>       <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>       <span class="token property">-moz-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>       <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>       <span class="token property">padding-right</span><span class="token punctuation">:</span> .625rem<span class="token punctuation">;</span>       <span class="token property">padding-bottom</span><span class="token punctuation">:</span> .625rem<span class="token punctuation">;</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>       <span class="token property">background-clip</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 这种方式不用三个套一行的方式，比较灵活，数量不限制，满足三个 child 自动换行。 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全屏布局"><a href="#全屏布局" class="headerlink" title="全屏布局"></a>全屏布局</h3><ul><li><strong>position:absolute</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span><span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">html,  body,  #parent</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#parent>div</span> <span class="token punctuation">&#123;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#top</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#left</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token comment">/*值大于等于#top的高度*/</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token comment">/*值大于等于#bottom的高度*/</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#right</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token comment">/*值大于等于#left的宽度*/</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token comment">/*值大于等于#top的高度*/</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token comment">/*值大于等于#bottom的高度*/</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#bottom</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>top<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>bottom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Flex布局</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">*</span><span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">html,body,#parent</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#parent</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">div</span><span class="token punctuation">&#123;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#top</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#bottom</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> cadetblue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#middle</span><span class="token punctuation">&#123;</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#left</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> chocolate<span class="token punctuation">;</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#right</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> crimson<span class="token punctuation">;</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>top<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>bottom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ul><li><strong>行内元素居中</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">div</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> crimson<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">span</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkblue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>绿色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>块级元素margin居中</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkcyan<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.son</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkgoldenrod<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>子元素含float(用这个的都是伞兵)</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkgray<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.son</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkgoldenrod<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>flex布局</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> darkcyan<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.son</span><span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> darkgoldenrod<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>position:absolute</strong></p><ul><li><code>left:0;right:0;</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkcyan<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.son</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkgoldenrod<span class="token punctuation">;</span>    <span class="token comment">/* 左右偏移量相同时 */</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>left</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkcyan<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.son</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkgoldenrod<span class="token punctuation">;</span>    <span class="token comment">/* 左右偏移量相同时 */</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>transform</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkcyan<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.son</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkgoldenrod<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ul><li><strong>flex</strong></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> darkcyan<span class="token punctuation">;</span>      <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.son</span><span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> darkgoldenrod<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>绝对定位</strong></p><ul><li><code>top,bottom,left,right=0</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkgray<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.son</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkgreen<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>transform</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.parent</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkgray<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.son</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkgreen<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 3.125rem<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS负值问题</title>
      <link href="/2021/09/08/css-fu-zhi-wen-ti/"/>
      <url>/2021/09/08/css-fu-zhi-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="margin负值"><a href="#margin负值" class="headerlink" title="margin负值"></a>margin负值</h2><ul><li><p>块级元素设置:</p><ol><li><code>margin-top</code>,此元素发生位移</li><li><code>margin-bottom</code> <span style="color:red">会发生位移的是其后边的元素</span></li><li><code>margin-left</code> 块级元素发生位移，块级元素后边的内容不会发生位移，</li></ol></li><li><p>行内元素</p><ol><li>设置<code>margin-top margin-bottom</code> <span style="color:red">都不会发生位移</span><ul><li>解决:添加绝对定位(让其脱离文档流，比如浮动固定定位)，设置margin-top会发生位移</li></ul></li><li>改变<code>vertical-align</code>的设置（middle top），行内块元素设置 <code>margin-top margin-bottom</code> 可以发生位移;</li><li>设置<code>margin-left margin-right</code>行内元素后的内容会发生位移</li></ol></li><li><p>运动方向:<img src="margin%E8%B4%9F%E5%80%BC.png" alt="margin负值"></p></li></ul><h2 id="absolute的负值"><a href="#absolute的负值" class="headerlink" title="absolute的负值"></a>absolute的负值</h2><blockquote><p>子绝父相:父元素使用相对定位,子元素使用绝对定位</p></blockquote><ul><li>Tips:<ol><li>当激活的对象为绝对定位时,必须指定<code>left,right,top,bottom</code>中的至少一个.否则上述属性的默认值为<span style="color:red">auto</span>,这将导致对象遵循HTML布局规则</li><li>下文讲解一律是子元素是绝对定位,父元素为相对定位的情况</li></ol></li></ul><ol><li><p>当元素只设置一个方向元素有值时的运动方向,相对应方向元素的运动是相反的,下图只举例left,top的运动方向<br><img src="%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%A7%BB%E5%8A%A8.png" alt="子元素运动方向"></p></li><li><p>当元素设置对应方向值时,例如<code>left,right</code>和<code>top,bottom</code>,子盒子并不是移动方向,而是改变原有的大小<br><img src="%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E6%89%A9%E5%A4%A7%E7%9B%92%E5%AD%90.png" alt="子盒子大小的改变"></p></li></ol><ul><li>我的理解是:绝对定位是边的定位,相对的边的固定,会使盒子扩大</li></ul><h2 id="transform-translate"><a href="#transform-translate" class="headerlink" title="transform:translate;"></a><code>transform:translate;</code></h2><blockquote><p>理解:当单位为百分比是,<span style="color:red">以自身为基准</span>.当只有一个参数是,沿着x轴运动方向</p></blockquote><ul><li>运动方向与margin一致</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的DOM属性</title>
      <link href="/2021/09/05/js-zhong-de-dom-shu-xing/"/>
      <url>/2021/09/05/js-zhong-de-dom-shu-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="用DOM属性操控文档"><a href="#用DOM属性操控文档" class="headerlink" title="用DOM属性操控文档"></a>用DOM属性操控文档</h2><h3 id="什么是DOM属性"><a href="#什么是DOM属性" class="headerlink" title="什么是DOM属性"></a>什么是DOM属性</h3><blockquote><p>浏览器为我们提供的文档节点对象,这个对象是window属性.可以在页面中直接使用.文档节点代表的是整个网页</p></blockquote><h3 id="文档的加载"><a href="#文档的加载" class="headerlink" title="文档的加载"></a>文档的加载</h3><blockquote><ul><li>浏览器在加载一个页面是是按照自上而下的顺序加载的,读取到一行就运行一行,如果将script标签写到页面上面、在代码执行时,页面还没有加载,页面没有加载DOM对象也没有加载,会导致无法获取到DOM对象</li><li>onload事件会在整个页面加载完成之后才触发:为window绑定一个onload事件,该事件对应的响应函数会在页面加载之后执行.这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了</li></ul></blockquote><h3 id="DOM查询"><a href="#DOM查询" class="headerlink" title="DOM查询"></a>DOM查询</h3><ul><li>方法</li></ul><ol><li><code>getElementById(id)</code>,通过id属性来获取一组元素</li><li><code>getElementByTagName(tag)</code>,通过标签来获取一组元素,此方法会给我们返回一组类数组对象,所有查询到的元素都会封装到对象中.(即使只有一个,也会封装到数组中).</li><li><code>getElementByName(name)</code>,查找name=name的所有节点,返回一个数组</li><li><code>getElementsByClassName(class)</code>:可以根据class属性值获取一组元素节点对象</li><li><code>querySelector()</code>:需要一个选择器的字符串作为参数,可以根据一个CSS选择器来查询一个元素节点对象<ul><li>注意:使用该方法总会返回唯一的一个元素,如果满足条件的有多个,那么它只会返回第一个</li></ul></li><li><code>querySelectorAll()</code>:该方法和querySelector()用法类似,不同的是它会将符合条件的元素封装<ul><li>-即使符合条件的元素只有一个,他也会返回数组</li></ul></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> div<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".box1 div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内容:   div标签中的内容</span><span class="token keyword">var</span> box1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &lt;div> 内容&lt;/div>:标签以及内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性:此属性都是通过<span style="color:red">元素.属性</span>的方式访问到</li></ul><ol><li><p><code>innerHTML&amp;innerText</code>(自结束标签无意义)</p><ul><li><code>innerHTML</code>可以获取当前元素的内容以及标签</li><li><code>innerText</code>只能获取当前元素的内容,自动去除标签</li></ul></li><li><p><code>children</code>属性可以获取当前元素的所有子元素,返回一个数组.通过索引可以获取子元素的属性</p></li><li><p><code>className</code>,语法<code>HTMLElement.className</code>,id,value,name等属性直接访问即可</p></li><li><p><code>firstChild&amp;lastChild</code>,获取到当前元素的第一个/最后一个子节点,可以获取到一个空白文本.(#text)</p></li><li><p><code>firstElementsChild</code>获取当前元素的第一个元素</p></li><li><p><code>parentNode</code>,获取到当前元素的父元素</p></li><li><p><code>previousSibling</code>,获取前一个兄弟节点[也可能获取空白的文本](object Text)</p></li><li><p><code>previousElementSibling</code>,获取前一个兄弟元素[object HTMLLIElement]</p></li><li><p><code>documentElement</code>:保存的是html跟标签</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> html<span class="token operator">=</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//所有标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token parameter">idStr<span class="token punctuation">,</span> fun</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//为id为btn01的按钮绑定一个单机响应函数</span>    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>idStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fun<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//为id为btn01的按钮绑定一个单机响应函数</span>    <span class="token keyword">var</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bj<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//含有tag标签</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn02 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn02<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//查找所有的li节点</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//为id为btn03的按钮绑定一个单机相应函数</span>    <span class="token keyword">var</span> btn03 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn03<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//查找name=gender的所有节点</span>        <span class="token keyword">var</span> inputs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回class的名称</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//为id为btn04的按钮绑定一个单机响应函数</span>    <span class="token keyword">var</span> btn04 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn04"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn04<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为city的元素</span>        <span class="token keyword">var</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取#city下所有的li节点</span>        <span class="token keyword">var</span> lis <span class="token operator">=</span> city<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//为id为btn05的按钮绑定一个单机响应函数</span>    <span class="token keyword">var</span> btn05 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn05"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn05<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为city的节点</span>        <span class="token keyword">var</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> cns <span class="token operator">=</span>city<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>        <span class="token keyword">var</span> cns2 <span class="token operator">=</span> city<span class="token punctuation">.</span>children<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cns2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//HTMLElement</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//为id为btn06的按钮绑定一个单机响应函数</span>    <span class="token keyword">var</span> btn06 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn06"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn06<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> iphone <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"iphone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> fir <span class="token operator">=</span> iphone<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span><span class="token comment">//HTMLText</span>        fir <span class="token operator">=</span> iphone<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//HTMLElement</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//为id为btn07的按钮绑定一个单机响应的函数</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn07"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为bj的节点</span>        <span class="token keyword">var</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回#bj的的父节点</span>        <span class="token keyword">var</span> pn <span class="token operator">=</span> bj<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//HTMLElement</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pn<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//为id为btn08的按钮绑定一个单机响应的函数</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn08"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为android</span>        <span class="token keyword">var</span> and <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回#android的前一个兄弟节点(也可能获取空白的文本)</span>        <span class="token keyword">var</span> ps <span class="token operator">=</span> and<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>        <span class="token comment">//previousElementSibling获取前一个兄弟元素,IE8及以下不支持</span>        <span class="token keyword">var</span> pe <span class="token operator">=</span> and<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object Text]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[object HTMLLIElement]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取#username的value属性值</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn09"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为username的元素</span>        <span class="token keyword">var</span> um <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取um的value</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>um<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcde</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置#username的value属性值</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn10"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为username的元素</span>        <span class="token keyword">var</span> um <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置um的value</span>        um<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">"今天天气好"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回#bj的文本值</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn11"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取id为bj的元素</span>      <span class="token keyword">var</span> bj <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> fc<span class="token operator">=</span>bj<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fc<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                你喜欢哪个城市            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>beijing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>shanghai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>dongjing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>shouer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                你手机的操作系统是            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iphone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ios<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>IOS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Android<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>windows phone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            gender:            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello <span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            Male            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            female            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            name:            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abcde<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查找#bj节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查找所有的li节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查找name=gender的所有节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn04<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查找#city下所有li节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn05<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回#city的所有子节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn06<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回#phone的第一个子节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn07<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回#bj的fujiedian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn08<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回#android的前一个兄弟节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn09<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回#username的value属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>设置#username的value属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回#bj的文本值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dom增删改"><a href="#dom增删改" class="headerlink" title="dom增删改"></a>dom增删改</h3><ul><li><p>方法:</p><ol><li><code>createElement()</code>:可以用于创建一个元素节点对象,他需要一个标签名作为参数,将会根据该标签名创建元素节点对象,并将创建好的对象作为返回值返回</li><li><code>createTextNode()</code>:可以用来创建一个文本节点对象,需要一个文本内容作为参数,将会根据改内容创建文本节点,并将新的文本节点返回</li><li><code>appendChild()</code>:向一个父节点中添加一个新的子节点<ul><li>用法：父节点.appendChild(子节点)</li></ul></li><li><code>insertBefore()</code>:可以再指定的子节点前插入新的子节点<ul><li>语法:父节点.insertBefore(新节点,旧节点);</li></ul></li><li><code>replaceChild()</code>:可以使用指定的子节点替换已有的子节点<ul><li>语法：replaceChild(新节点,旧节点);</li></ul></li><li><code>removeChild()</code>:可以删除一个子节点<ul><li>语法：父节点.removeChild(子节点);</li><li>语法:子节点.parentNode.removeChild(子节点);</li></ul></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建一个“广州”节点,添加到#city下</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> gzText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>gzText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      city<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将“广州”节点插入到#bj前面</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn02"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//创建一个广州</span>      <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> gzText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>gzText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      city<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> bj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用“广州”节点替换#bj节点</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn03"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//创建一个广州</span>      <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> gzText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>gzText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获取id为bj的节点</span>      <span class="token keyword">let</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获取city</span>      <span class="token keyword">var</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      city<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> bj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//删除#bj节点</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn04"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bj<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>bj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取#city内的HTML代码</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn05"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>city<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置#bj内的HTML</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn06"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//获取bj</span>      <span class="token keyword">let</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bj<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"昌平"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//向city中添加广州</span>    <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn07"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> city<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/*       使用innerHTML也可以完成DOM的增删改的相关操作      一般我们会两种方式结合使用      */</span>      <span class="token comment">//city.innerHTML +="&lt;li>广州&lt;/li>";</span>      <span class="token comment">//创建一个li</span>      <span class="token keyword">let</span> li<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//向li中设置文本</span>      li<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"广州"</span><span class="token punctuation">;</span>      <span class="token comment">//将li添加到city</span>      city<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token parameter">idStr<span class="token punctuation">,</span> fun</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>idStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fun<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>              你喜欢哪个城市          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>东京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>首尔<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>创建一个"广州"节点,添加到#city<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>将“广州”节点插入到#bj前面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>使用“广州”节点替换#bj节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn04<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除#bj节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn05<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>读取#city内的HTML代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn06<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>设置#bj内的HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn07<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>创建一个"广州"节点,添加到#city<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="DOM操作CSS"><a href="#DOM操作CSS" class="headerlink" title="DOM操作CSS"></a>DOM操作CSS</h3><ul><li><p>语法：<code>元素.style.样式名=样式值</code></p></li><li><p><span style="color:red">注意:</span></p><ol><li>如果css的样式中含有-,</li><li>这种名称再JS中是不合法的：比如background-color</li><li>需要将这种样式修改为驼峰命名法:去掉-,然后将-后的字母大写</li><li><span style="color:red">通过stytle属性设置的样式都是内联式:而内联式样式有较高的优先级,所以通过JS修改的样式往往会立即显示</span></li><li>如果样式中写了!important,则此时样式会有最高的优先级,即使通过JS也不能覆盖改样式,此时会导致JS修改样式失效,所以尽量不要为样式添加<code>!important</code></li></ol></li><li><p><code>getComputedStyle()</code>:这个方法来获取元素当前的样式,这个方法是window的方法,可以直接使用</p></li><li><p>需要两个参数：</p><ol><li>第一个：要获取样式的元素</li><li>第二个：可以传递一个伪元素,一般传null</li></ol></li><li><p>返回值:该方法会返回一个对象,对象封装了当前元素对应的样式</p><ol><li>可以通过对象.样式名来读取样式</li><li>如果获取的样式没有设置,则会获取到真实的值,而不是默认值</li><li>比如：没有设置width,则不会获取到auto,而是一个长度</li></ol></li></ul><p>注意:<span style="color:red"> 通过<code>getComputedStyle()</code>读取到的样式是只读的,不能修改,如果要修改,必须通过style属性</span></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//点机按钮以后读取box1的样式</span>    <span class="token keyword">let</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>backgroundColor<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>clientWidth &amp; clientHeight</code>:这两个元属性可以获取元素的可见高度和宽度<br><span style="color:red">属性:</span><ol><li>这些属性都是不带px的,返回的都是一个数字,可以直接进行计算</li><li>会获取元素的宽度和高度包括内容区和内边距</li><li>这些属性都是只读的,不能修改</li></ol></li><li><code>offsetWidth &amp; offsetHeight</code>:-获取元素的整个宽度和高度,包括内容区、内边距和边框</li><li><code>offsetParent</code>-可以用来获取当前元素的定位父元素<ul><li>注意:<ol><li>会获取到离当前元素最近的开启了定位的祖先元素</li><li>如果所有的祖先元素都没有开启定位,则返回body</li></ol></li></ul></li><li><code>offsetLeft</code>: -当前元素相对于其定位父元素的水平偏移量</li><li><code>offsetTop</code>: 当前元素相对于其定位父元素的垂直偏移量</li><li><code>scrollWidth &amp; scorllHeight</code>-可以获取元素整个滚动区域的宽度和高度</li><li><code>scrollLeft &amp; scrollTop</code>-可以获取水平和垂直滚动条滚动的距离<ul><li>注意:当满足<code>scrollHeight -scrollTop==clientHeight</code>说明滚动条滚动到底了</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* 如果为表单绑定disabled="disabled"为不可用状态 */</span>  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> .625rem solid yellow<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box2</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 6.25rem<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #bfa<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box4</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #bfa<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box5</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 550px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> box4<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box4"</span><span class="token punctuation">)</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> op <span class="token operator">=</span> box1<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//300px</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//600px</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//283</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//600</span>      <span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>scrollHeight<span class="token operator">-</span>box4<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><ul><li><code>onmousemove</code>-该事件会在鼠标移动时会触发<ol><li><code>clientX</code>可以获取鼠标指针的水平坐标</li><li><code>clientY</code>可以获取鼠标指针的垂直坐标</li></ol></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#areaDiv</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid black<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#showMsg</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid black<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> areaDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"areaDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> showMsg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"showMsg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    areaDiv<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> x <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>      <span class="token keyword">let</span> y <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>      <span class="token comment">//在showMsg中显示鼠标的坐标</span>      showMsg<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"y="</span> <span class="token operator">+</span> y    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>areaDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>onmousewheel</code>鼠标滚轮滚动的事件,会在滚轮滚动时触发,但是火狐不支持<ul><li><code>event.wheelDelta</code>可以获取鼠标滚轮滚动的方向</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取id为box1的div</span>    <span class="token keyword">let</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//为box1绑定一个鼠标滚轮滚动的事件</span>    box1<span class="token punctuation">.</span><span class="token function-variable function">onmousewheel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//判断鼠标滚轮滚动的方向</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>wheelDelta <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> event<span class="token punctuation">.</span>detail <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//向上滚,box1变短</span>          box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> box1<span class="token punctuation">.</span>clientHeight <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//向下滚,box1变长</span>          box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> box1<span class="token punctuation">.</span>clientHeight <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">/*       当滚动条滚动时,如果浏览器有滚动条,滚动条会随之滚动      这是浏览器的默认行为,如果不希望发生,则取消默认行为      */</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ul><li><code>onkeydown</code>-按键被按下<ul><li><span style="color:red">注意:</span><ol><li>对于onkeydown来说如果一直按着某个按键不松手,则事件会一直触发</li><li>当onkeydown连续触发时,第一次和第二次之间隔时间会稍微长一点,防止误操作</li></ol></li></ul></li><li><code>onkeyup</code>-按键被松开:键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document</li><li><code>altKey &amp; ctrlKey &amp; shiftKey</code>:这个用来判断alt ctrl 和shift是否被按下.如果按下则返回true,否则返回false</li></ul><h3 id="事件的冒泡-Bubble"><a href="#事件的冒泡-Bubble" class="headerlink" title="事件的冒泡(Bubble)"></a>事件的冒泡(Bubble)</h3><ol><li>所谓的冒泡指的就是事件的向上传导,当后代的事件被触发时,其祖先元素的相同事件也会被触发</li><li>在开发中大部分情况冒泡都是有用的</li><li>如果不希望发生事件冒泡可以通过事件对象来取消冒泡</li></ol><ul><li>解决:将事件对象的cancelBubble设置为true,即可取消冒泡.<code>event.cancelBubble=true</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#s1</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//为s1绑定一个单机响应函数</span>    <span class="token keyword">let</span> s1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是span的单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//取消冒泡</span>      event<span class="token punctuation">.</span>cancelBubble<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> box1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是div的单机响应函数"</span><span class="token punctuation">)</span>      event<span class="token punctuation">.</span>cancelBubble<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是body的单机响应函数"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        我是box1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            我是span        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h3><blockquote><p>使用 对象.事件=函数的形式绑定响应的函数,他只能同时为一个元素的一个事件绑定一个响应函数.不能绑定多个,如果绑定多个,则后边会覆盖前边的</p></blockquote><ul><li><code>addEventListener()</code>-通过这个方法也可以为元素绑定响应函数<ul><li>-参数<ol><li>事件的字符串，不要on</li><li>回调函数，当事件触发时，该事件触发时该函数会被调用</li><li>是否在捕获阶段触发事件，需要一个布尔值，，一般都传false</li></ol></li><li>注意:<ul><li>使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数.</li><li>这样当事件触发时，响应函数将会按照函数的绑定顺序执行</li></ul></li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     btn01<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//函数调用式</span>    <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> eventStr<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventStr<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>btn01<span class="token punctuation">,</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"sb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h3><blockquote><p>W3C</p></blockquote><ol><li>捕获阶段:-在捕获阶段时，从最外层的祖先元素，向目标元素进行事件捕获，但是默认此时不会触发事件</li><li>目标阶段:-事件捕获到目标元素，捕获结束开始再目标元素上触发事件</li><li>冒泡阶段:-事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件<ul><li>注意:<ol><li>如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true</li><li>一般情况下我们不希望再捕获阶段触发时间，所以这个一般都是false</li></ol></li></ul></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box2</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box3</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> box2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> box3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是box1的单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>box2<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是box2的单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>box3<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是box3的单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> eventStr<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventStr<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h3><blockquote><ul><li>指将事件统一绑定给元素的共同的祖先，这样当后代元素上的事件触发时，会一直冒泡到祖先元素.从而通过祖先元素的响应函数来处理事件</li><li>事件委派是<strong>利用了冒泡</strong>，通过委派可以减少事件的绑定次数，提高程序的性能</li></ul></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//点击按钮以后添加超链接</span>    <span class="token keyword">let</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//创键一个li</span>      <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a href='javascript:;'class='link'>新建超链接一&lt;/a>"</span><span class="token punctuation">;</span>      <span class="token comment">//将li添加到ul中</span>      u1<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token comment">//我们希望只绑定一次事件，即可应用到多个元素上，即使元素是后添加的.我们可以尝试将其绑定给元素的共同祖先元素</span>    u1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//target:-event中的target表示的触发对象</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className<span class="token operator">==</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是单机响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>u1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是p元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:; <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:; <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:; <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h3><ul><li>拖拽的流程<ol><li>当鼠标在被拖拽的元素上按下时，开始拖拽<code>onmousedown</code></li><li>当鼠标移动时被拖拽元素跟随鼠标移动<code>onmousemove</code></li><li>当鼠标松开时，被拖拽元素被固定在当前位置<code>nomousemove</code></li></ol></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box1</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box2</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取box1</span>    <span class="token keyword">let</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//为box1绑定一个鼠标按下事件</span>    box1<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//div的偏移量 鼠标.clientX-offsetLeft</span>      <span class="token comment">//div的偏移量 鼠标.clientY-offsetTop</span>      <span class="token keyword">let</span> ol<span class="token operator">=</span>event<span class="token punctuation">.</span>clientX<span class="token operator">-</span>box1<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>      <span class="token keyword">let</span> ot<span class="token operator">=</span>event<span class="token punctuation">.</span>clientY<span class="token operator">-</span>box1<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>      <span class="token comment">//当鼠标移动时被拖拽元素跟随鼠标移动onmousemove</span>      document<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//当鼠标移动时被拖拽元素跟随鼠标移动onmousemove</span>        <span class="token comment">//获取鼠标的坐标</span>        <span class="token keyword">let</span> left <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX<span class="token operator">-</span>ol<span class="token punctuation">;</span>        <span class="token keyword">let</span> top <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY<span class="token operator">-</span>ot<span class="token punctuation">;</span>        <span class="token comment">//设置div的偏移量</span>        box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">//为元素绑定一个鼠标松开事件</span>      document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//当鼠标松开时，被拖拽元素固定在当前位置onmouseup</span>        <span class="token comment">//取消document的onmousemove事件</span>        document<span class="token punctuation">.</span>onmousemove<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//取消document的onmouseup事件</span>        document<span class="token punctuation">.</span>onmouseup<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>       <span class="token comment">/* 当我们拖拽一个网页时，浏览器会默认去搜索引擎中搜索内容         此时会导致拖拽功能异常，这个是浏览器提供的默认行为         如果不希望这个行为发生，则可以通过return false来取消默认行为*/</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  一段文字  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS的数组</title>
      <link href="/2021/09/04/js-de-shu-zu-ying-yong/"/>
      <url>/2021/09/04/js-de-shu-zu-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="数组原型上的方法"><a href="#数组原型上的方法" class="headerlink" title="数组原型上的方法"></a>数组原型上的方法</h2><h3 id="join-原数组不变"><a href="#join-原数组不变" class="headerlink" title="join():  原数组不变"></a>join():  <span style="color:red">原数组不变</span></h3><blockquote><p>join(separator): 将数组的元素组起一个字符串.以separator为分隔符.省略的话则用默认用逗号为分隔符.<span style="color:red">该方法只接收一个参数：即分隔符.</span></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//1-2-3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//1,2,3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[1,2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过join()方法可以实现重复字符串.只需传入字符串以及重复的次数.就能返回重复后的字符串.函数如下：</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">repeatString</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeatString</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//"abcabcabc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="push-和pop-改变原数组"><a href="#push-和pop-改变原数组" class="headerlink" title="push()和pop(): 改变原数组"></a>push()和pop(): <span style="color:red">改变原数组</span></h3><ol><li>push(): 可以接收任意数量的参数.把它们逐个添加到数组末尾.<span style="color:red">并返回修改后数组的长度.</span></li><li>pop()：数组末尾移除最后一项.减少数组的 length 值.然后返回移除的项.</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token keyword">let</span> count<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//(5)["a","b","c","d","e"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment">//5</span><span class="token keyword">let</span> item<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//(4)["a","b","c","d"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment">//e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：pop（）里面没有参数.即时有参数.也是删除最后一项.</p><h3 id="shift-和-unshift-改变原数组"><a href="#shift-和-unshift-改变原数组" class="headerlink" title="shift() 和 unshift(): 改变原数组"></a>shift() 和 unshift(): <span style="color:red">改变原数组</span></h3><ol><li>shift()：删除原数组第一项.并返回删除元素的值；如果数组为空则返回undefined .</li><li>unshift:将参数添加到原数组开头.并返回数组的长度 .</li></ol><blockquote><p>这组方法和上面的push()和pop()方法正好对应.一个是操作数组的开头.一个是操作数组的结尾.</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">let</span> count<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//(5)["a","b","c","d","e"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment">//5</span><span class="token keyword">let</span> item<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//(4)["b","c","d","e"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment">//a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sort-改变原数组"><a href="#sort-改变原数组" class="headerlink" title="sort(): 改变原数组"></a>sort(): <span style="color:red">改变原数组</span></h3><ul><li>sort()：按升序排列数组项——即最小的值位于最前面.最大的值排在最后面.</li></ul><blockquote><p>在排序时.sort()方法会调用每个数组项的 toString()转型方法.然后比较得到的字符串.以确定如何排序.即使数组中的每一项都是数值. sort()方法比较的也是字符串.因此会出现以下的这种情况：</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[13,24,3,51]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[13,24,3,51](原数组改变)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>为了解决上述问题.sort()方法可以接收一个比较函数作为参数.以便我们指定哪个值位于哪个值的前面.</p></blockquote><ol><li>比较函数接收两个参数.如果第一个参数应该位于第二个之前则返回一个负数.</li><li>如果两个参数相等则返回 0.</li><li>如果第一个参数应该位于第二个之后则返回一个正数.以下就是一个简单的比较函数：</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">value1<span class="token punctuation">,</span>value2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value1<span class="token operator">-</span>value2<span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//(5)[3,10,13,54,87]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reverse-改变原数组"><a href="#reverse-改变原数组" class="headerlink" title="reverse()改变原数组"></a>reverse()<span style="color:red">改变原数组</span></h3><ul><li>reverse()：反转数组项的顺序.</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//(5) [87,10,3,54,13]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//(5) [87,10,3,54,13]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="concat-不改变原数组"><a href="#concat-不改变原数组" class="headerlink" title="concat()不改变原数组"></a>concat()<span style="color:red">不改变原数组</span></h3><blockquote><p>concat() ：将参数添加到原数组中.这个方法会先创建当前数组一个副本.然后将接收到的参数添加到这个副本的末尾.最后返回新构建的数组.在没有给 concat()方法传递参数的情况下.它只是复制当前数组并返回副本.</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[1,3,5,7,9,11,13]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[1,3,5,7](原数组未被修改)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>从上面测试结果可以发现：传入的不是数组.则直接把参数添加到数组后面.如果传入的是数组.则将数组中的各个项添加到数组中.但是如果传入的是一个二维数组呢？</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrCopy<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrCopy<span class="token punctuation">)</span><span class="token comment">//[1,3,5,7,9,Array[2]]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrCopy<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//[11,13]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上述代码中.arrCopy2数组的第五项是一个包含两项的数组.也就是说concat方法只能将传入数组中的每一项添加到数组中.如果传入数组中有些项是数组.那么也会把这一数组项当作一项添加到arrCopy中</p></blockquote><h3 id="slice-不改变原数组"><a href="#slice-不改变原数组" class="headerlink" title="slice() 不改变原数组"></a>slice() <span style="color:red">不改变原数组</span></h3><ul><li>slice()：返回从原数组中指定开始下标到结束下标之间的项组成的新数组.</li></ul><blockquote><p>slice()方法可以接受一或两个参数.<span style="color:red">即要返回项的起始和结束位置.</sapn></p></blockquote><ol><li>在只有一个参数的情况下. slice()方法返回从该参数指定位置开始到当前数组末尾的所有项.</li><li>如果有两个参数.该方法返回起始和结束位置之间的项——但不包括结束位置的项.</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrCopy<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">let</span> arrCopy2<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">let</span> arrCopy3<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> arrCopy4<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[1,3,5,7,9,11]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrCopy<span class="token punctuation">)</span><span class="token comment">//[3,5,7,9,11]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrCopy2<span class="token punctuation">)</span><span class="token comment">//[3,5,7]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrCopy3<span class="token punctuation">)</span><span class="token comment">//[3,5,7]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrCopy4<span class="token punctuation">)</span><span class="token comment">//[5,7,9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>arrCopy只设置了一个参数.也就是起始下标为1.所以返回的数组为下标1（包括下标1）开始到数组最后.</li><li>arrCopy2设置了两个参数.返回起始下标（包括1）开始到终止下标（不包括4）的子数组.</li><li>arrCopy3设置了两个参数.终止下标为负数.当出现负数时.将负数加上数组长度的值（6）来替换该位置的数.因此就是从1开始到4（不包括）的子数组.</li><li>arrCopy4中两个参数都是负数.所以都加上数组长度6转换成正数.因此相当于slice(2,5).</li></ol><h3 id="splice-改变原数组"><a href="#splice-改变原数组" class="headerlink" title="splice()改变原数组"></a>splice()<span style="color:red">改变原数组</span></h3><blockquote><p>splice()：很强大的数组方法.它有很多种用法.可以实现删除、插入和替换.</p></blockquote><ol><li><p>删除：可以删除任意数量的项.只需指定 2 个参数：要删除的第一项的位置和要删除的项数.例如. splice(0,2)会删除数组中的前两项.</p></li><li><p>插入：可以向指定位置插入任意数量的项.只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项.例如.splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6.</p></li><li><p>替换：可以向指定位置插入任意数量的项.且同时删除任意数量的项.只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项.插入的项数不必与删除的项数相等.例如.splice (2,1,4,6)会删除当前数组位置 2 的项.然后再从位置 2 开始插入4和6.</p></li></ol><blockquote><p>splice()方法始终都会返回一个数组.该数组中包含从原始数组中删除的项.如果没有删除任何项.则返回一个空数组.</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrRemove<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[5,7,9,11]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrRemove<span class="token punctuation">)</span><span class="token comment">//[1,3]</span><span class="token keyword">let</span> arrRemove2<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[5,7,4,6,9,11]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrRemove2<span class="token punctuation">)</span><span class="token comment">//[]</span><span class="token keyword">let</span> arrRemove3<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//[5,2,4,4,9,11]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrRemove3<span class="token punctuation">)</span><span class="token comment">//[7]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="indexOf-和-lastIndexOf"><a href="#indexOf-和-lastIndexOf" class="headerlink" title="indexOf()和 lastIndexOf()"></a>indexOf()和 lastIndexOf()</h3><ol><li>indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引.其中. 从数组的开头（位置 0）开始向后查找.</li><li>lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引.其中. 从数组的末尾开始向前查找.</li></ol><blockquote><p>这两个方法都返回要查找的项在数组中的位置.或者在没找到的情况下返回-1.在比较第一个参数与数组中的每一项时.会使用全等操作符.</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="includes判断一个数组是否包含一个指定的值"><a href="#includes判断一个数组是否包含一个指定的值" class="headerlink" title="includes判断一个数组是否包含一个指定的值"></a>includes判断一个数组是否包含一个指定的值</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>searchElement</code></td><td>必须.需要查找的元素值.</td></tr><tr><td><code>fromIndex</code></td><td>可选.从该索引处开始查找,如果为负值,则按升序从 <code>array.length + fromIndex</code> 的索引开始搜索.默认为 0</td></tr></tbody></table><ul><li>注意:<code>fromIndex</code>如果大于大于或等于数组长度,则改数组不会被搜索</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//false</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组的迭代方法"><a href="#数组的迭代方法" class="headerlink" title="数组的迭代方法"></a>数组的迭代方法</h3><blockquote><p>ECMAScript为数组定义了五个迭代方法.每个方法都接收两个参数：要在每一项上面运行的函数和运行该函数的作用域——影响this的值.传入这些方法的函数会接收三个参数（数组项的值.索引.数组本身）</p></blockquote><h4 id="forEach-对数组的每一项运行给定函数-该方法没有返回值-不改变原数组"><a href="#forEach-对数组的每一项运行给定函数-该方法没有返回值-不改变原数组" class="headerlink" title="forEach()  对数组的每一项运行给定函数.该方法没有返回值(不改变原数组)"></a>forEach()  对数组的每一项运行给定函数.该方法没有返回值(<span style="color:red">不改变原数组</span>)</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arry</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>item<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>arry<span class="token punctuation">)</span>   <span class="token comment">/*    0-1-1,2,3,4,5   1-2-1,2,3,4,5   2-3-1,2,3,4,5   3-4-1,2,3,4,5   4-5-1,2,3,4,5    */</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(5)[1,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="some（）：-对数组中的每一项运行给定函数-如果该函数对任一项返回true-则返回true-不改变原数组"><a href="#some（）：-对数组中的每一项运行给定函数-如果该函数对任一项返回true-则返回true-不改变原数组" class="headerlink" title="some（）： 对数组中的每一项运行给定函数.如果该函数对任一项返回true.则返回true(不改变原数组)"></a>some（）： 对数组中的每一项运行给定函数.如果该函数对任一项返回true.则返回true(<span style="color:red">不改变原数组</span>)</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> b<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">//true</span><span class="token keyword">let</span> c<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(5)[1,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="every-对数组中的每一项运行都给定函数-如果该函数对每一项都返回true-则返回true-不改变原数组"><a href="#every-对数组中的每一项运行都给定函数-如果该函数对每一项都返回true-则返回true-不改变原数组" class="headerlink" title="every()  对数组中的每一项运行都给定函数.如果该函数对每一项都返回true.则返回true(不改变原数组)"></a>every()  对数组中的每一项运行都给定函数.如果该函数对每一项都返回true.则返回true(<span style="color:red">不改变原数组</span>)</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> b<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(5)[1,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="filter（）-：对数组的每一项运行给定函数-返回该函数会返回true的项组成的数组-不改变原数组"><a href="#filter（）-：对数组的每一项运行给定函数-返回该函数会返回true的项组成的数组-不改变原数组" class="headerlink" title="filter（） ：对数组的每一项运行给定函数.返回该函数会返回true的项组成的数组(不改变原数组)"></a>filter（） ：对数组的每一项运行给定函数.返回该函数会返回true的项组成的数组(<span style="color:red">不改变原数组</span>)</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> a<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//[4,5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(5)[1,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span style="color:red">注意:</span>对新数组变化不会影响原数组的改变</li></ul><h4 id="map（）-：对数组的每一项运行给定函数-返回每次函数调用结果所组成的数组-不改变原数组"><a href="#map（）-：对数组的每一项运行给定函数-返回每次函数调用结果所组成的数组-不改变原数组" class="headerlink" title="map（） ：对数组的每一项运行给定函数.返回每次函数调用结果所组成的数组(不改变原数组)"></a>map（） ：对数组的每一项运行给定函数.返回每次函数调用结果所组成的数组(<span style="color:red">不改变原数组</span>)</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> a<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> value<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//[3,6,9,12,15]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(5)[1,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><blockquote><p>ES5新增了两个归并数组的方法：reduce（）和 reduceRight().这两个方法都会迭代数组所有的项.然后构建一个最终的值返回.</p></blockquote><ul><li>使用:这两个方法都接收两个参数：一个在每一项上面调用的函数和（可选）作为归并基础的初始值.</li></ul><blockquote><ul><li>给reduce和reduceRight这两个方法的函数都接收四个参数值：前一个值.当前值.索引.数组对象.</li><li>这个函数返回的任何值都会作为第一个参数自动传给下一项.第一次迭代发生在数组的第二项上.因此第一个参数是数组的第一项.第二个参数是数组的第二项.</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> sum<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> pre<span class="token operator">+</span>cur<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//0是初始值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token comment">//15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第0次回调的时候.pre为0,cur为1,第一次执行回调函数的时候.pre为1.cur为2.第二次.pre为3（1加2的结果）.cur为3（数组的第三项）.依次类推.直到将数组的每一项都访问一遍.最后返回结果.</p><ul><li><span style="color:red">注意:</span>reduceRight（）与reduce（）使用一样.只不过是从后往前遍历.</li></ul><h2 id="数组扁平化-flat-不改变原数组"><a href="#数组扁平化-flat-不改变原数组" class="headerlink" title="数组扁平化(flat)(不改变原数组)"></a>数组扁平化(flat)(不改变原数组)</h2><ul><li><code>flat()</code>:默认参数为1<ul><li>可选参数一:整数(拉平几层嵌套)</li><li>可选参数二:<code>Infinity</code>(任意拉平几层嵌套)</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[1,2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Object对象语法-不改变原数组"><a href="#Object对象语法-不改变原数组" class="headerlink" title="Object对象语法(不改变原数组)"></a>Object对象语法(不改变原数组)</h2><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys"></a>Object.keys</h3><blockquote><p>返回一个由一个给定对象的自身可枚举属性(<code>key</code>)组成的数组，数组中属性名的排列顺序和使用 <code>for...in</code> 循环遍历该对象时返回的顺序一致</p></blockquote><ul><li>注意:如果没有key值(数组)则返回索引</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token string">"cd"</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//["a","b","c"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Object-value"><a href="#Object-value" class="headerlink" title="Object.value"></a>Object.value</h3><blockquote><p><code>Object.values()</code> 方法会返回一个由一个给定对象的自身可枚举属性(<code>value</code>)组成的数组，数组中属性值的排列顺序和使用<code>for...of</code>循环遍历该对象时返回的顺序一致</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token string">"cd"</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//["cd",false,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SassScript属性</title>
      <link href="/2021/09/01/sassscript-shu-xing/"/>
      <url>/2021/09/01/sassscript-shu-xing/</url>
      
        <content type="html"><![CDATA[<ul><li><p>在 CSS 属性的基础上 Sass 提供了一些名为 SassScript 的新功能。 SassScript 可作用于任何属性，允许属性使用变量、算数运算等额外功能。</p></li><li><p>弱类型语言, 对语法要求没那么严格</p></li></ul><h2 id="一、注释"><a href="#一、注释" class="headerlink" title="一、注释"></a>一、注释</h2><ol><li><p>Sass 支持标准的 CSS 多行注释 <code>/* */</code>，以及单行注释 <code>//</code>，前者会被完整输出到编译后的 CSS 文件中，而后者则不会。</p></li><li><p>将 <code>!</code> 作为多行注释的第一个字符表示在压缩输出模式下保留这条注释并输出到 CSS 文件中，通常用于添加版权信息。</p></li><li><p>插值语句 (interpolation) 也可写进多行注释中输出变量值</p></li></ol><p>例如：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">/* helloworld!*/</span><span class="token comment">// compile scss files to css</span><span class="token comment">// it's ready to do it.</span><span class="token property"><span class="token variable">$pink</span></span><span class="token punctuation">:</span> #f3e1e1<span class="token punctuation">;</span><span class="token selector">html</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$pink</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token property"><span class="token variable">$author</span></span><span class="token punctuation">:</span> <span class="token string">'gdream@126.com'</span><span class="token punctuation">;</span><span class="token comment">/*!Author: #&#123;$author&#125;.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开发模式编译后:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* helloworld!*/</span><span class="token selector">html</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #f3e1e1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*!Author: 'gdream@126.com'.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>压缩输出模式编译后：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #f3e1e1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*!Author: 'gdream@126.com'.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>变量以美元符号开头，赋值方法与 CSS 属性的写法一样</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$width</span></span><span class="token punctuation">:</span> 1600px<span class="token punctuation">;</span><span class="token property"><span class="token variable">$pen-size</span></span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><p>直接使用变量的名称即可调用变量</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">#app </span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">$width</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$pen-size</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-作用域"><a href="#3-作用域" class="headerlink" title="3.作用域"></a>3.作用域</h3><p>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加 <code>!global</code> 声明</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">#foo </span><span class="token punctuation">&#123;</span>  <span class="token property"><span class="token variable">$width</span></span><span class="token punctuation">:</span> 5em !global<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$width</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#bar </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$width</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#foo</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 5em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#bar</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 5em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h2><p>SassScript 支持 7 种主要的数据类型：</p><ul><li>数字，<code>1, 2, 13, 10px</code></li><li>字符串，有引号字符串与无引号字符串，<code>&quot;foo&quot;, &#39;bar&#39;, baz</code></li><li>颜色，<code>blue, #04a3f9, rgba(255,0,0,0.5)</code></li><li>布尔型，<code>true, false</code></li><li>空值，<code>null</code></li><li>数组 (list)，用空格或逗号作分隔符，<code>1.5em 1em 0 2em, Helvetica, Arial, sans-serif</code></li><li>maps, 相当于 JavaScript 的 object，<code>(key1: value1, key2: value2)</code></li></ul><p>SassScript 也支持其他 CSS 属性值，比如 Unicode 字符集，或 <code>!important</code> 声明。然而Sass 不会特殊对待这些属性值，一律视为无引号字符串。</p><ul><li>判断数据类型的方式：<code>type-of($value)</code></li></ul><h3 id="1-字符串-Strings"><a href="#1-字符串-Strings" class="headerlink" title="1.字符串 (Strings)"></a>1.字符串 (Strings)</h3><p>SassScript 支持 CSS 的两种字符串类型：<code>有引号字符串 (quoted strings)</code>，和<code>无引号字符串 (unquoted strings)</code>。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$name</span></span><span class="token punctuation">:</span> <span class="token string">'Tom Bob'</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$container</span></span><span class="token punctuation">:</span> <span class="token string">"top bottom"</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$what</span></span><span class="token punctuation">:</span> heart<span class="token punctuation">;</span><span class="token comment">// 注：在编译 CSS 文件时不会改变其类型。只有一种情况例外，使用 `#&#123;&#125;` (interpolation) 时，有引号字符串将被编译为无引号字符串，这样便于在 mixin 中引用选择器名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数字-Numbers"><a href="#2-数字-Numbers" class="headerlink" title="2.数字(Numbers)"></a>2.数字(Numbers)</h3><p>SassScript支持两种数字类型：<code>带单位数字</code>和<code>不带单位数字</code>。（可正可负可为零，可正可浮点）</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$my-age</span></span><span class="token punctuation">:</span> 19<span class="token punctuation">;</span><span class="token property"><span class="token variable">$your-age</span></span><span class="token punctuation">:</span> 19.5<span class="token punctuation">;</span><span class="token property"><span class="token variable">$height</span></span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span><span class="token comment">// 注：单位会和数字当做一个整体，进行算数运算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-空值-Null"><a href="#3-空值-Null" class="headerlink" title="3.空值(Null)"></a>3.空值(Null)</h3><p>只有一个取值<code>null</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$value</span></span><span class="token punctuation">:</span> <span class="token null keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 注：由于它代表空，所以不能够使用它与任何类型进行算数运算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-布尔型-Booleans"><a href="#4-布尔型-Booleans" class="headerlink" title="4.布尔型(Booleans)"></a>4.布尔型(Booleans)</h3><p>只有两个取值：<code>true</code>和<code>false</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$a</span></span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$b</span></span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 注：只有自身是false和null才会返回false，其他一切都将返回true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-数组-Lists"><a href="#5-数组-Lists" class="headerlink" title="5.数组 (Lists)"></a>5.数组 (Lists)</h3><p>通过空格或者逗号分隔的一系列的值。事实上，独立的值也被视为数组 —— 只包含一个值的数组。索引从<code>1</code>开始</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$list0</span></span><span class="token punctuation">:</span> 1px 2px 5px 6px<span class="token punctuation">;</span><span class="token property"><span class="token variable">$list1</span></span><span class="token punctuation">:</span> 1px 2px<span class="token punctuation">,</span> 5px 6px<span class="token punctuation">;</span><span class="token property"><span class="token variable">$list2</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>1px 2px<span class="token punctuation">)</span> <span class="token punctuation">(</span>5px 6px<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p>数组中可以包含子数组，比如 <code>1px 2px, 5px 6px</code> 是包含 <code>1px 2px</code> 与 <code>5px 6px</code> 两个数组的数组。如果内外两层数组使用相同的分隔方式，需要用圆括号包裹内层，所以也可以写成 <code>(1px 2px) (5px 6px)</code>。变化是，之前的 <code>1px 2px, 5px 6px</code> 使用逗号分割了两个子数组 (comma-separated)，而 <code>(1px 2px) (5px 6px)</code> 则使用空格分割(space-separated)。</p></li><li><p>当数组被编译为 CSS 时，Sass 不会添加任何圆括号（CSS 中没有这种写法），所以 <code>(1px 2px) (5px 6px)</code> 与 <code>1px 2px, 5px 6px</code> 在编译后的 CSS 文件中是完全一样的，但是它们在 Sass 文件中却有不同的意义，前者是包含两个数组的数组，而后者是包含四个值的数组。</p></li><li><p>用 <code>()</code> 表示不包含任何值的空数组（在 Sass 3.3 版之后也视为空的 map）。空数组不可以直接编译成 CSS，比如编译 <code>font-family: ()</code> Sass 将会报错。如果数组中包含空数组或空值，编译时将被清除，比如 <code>1px 2px () 3px</code> 或 <code>1px 2px null 3px</code>。</p></li><li><p>基于逗号分隔的数组允许保留结尾的逗号，这样做的意义是强调数组的结构关系，尤其是需要声明只包含单个值的数组时。例如 <code>(1,)</code> 表示只包含 <code>1</code> 的数组，而 <code>(1 2 3,)</code> 表示包含 <code>1 2 3</code> 这个以空格分隔的数组的数组。</p></li></ol><h3 id="6-映射-Maps"><a href="#6-映射-Maps" class="headerlink" title="6.映射(Maps)"></a>6.映射(Maps)</h3><p>Maps必须被圆括号包围，可以映射任何类型键值对（任何类型，包括内嵌maps，不过不推荐这种内嵌方式）</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$map</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>   <span class="token property"><span class="token variable">$key1</span></span><span class="token punctuation">:</span> value1<span class="token punctuation">,</span>   <span class="token property"><span class="token variable">$key2</span></span><span class="token punctuation">:</span> value2<span class="token punctuation">,</span>   <span class="token property"><span class="token variable">$key3</span></span><span class="token punctuation">:</span> value3 <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-颜色-Colors"><a href="#7-颜色-Colors" class="headerlink" title="7.颜色 (Colors)"></a>7.颜色 (Colors)</h3><p>CSS原有颜色类型，十六进制、RGB、RGBA、HSL、HSLA和色彩单词</p><p>SCSS提供了内置Colors函数，从而更方便地使用颜色</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$color0</span></span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token property"><span class="token variable">$color1</span></span><span class="token punctuation">:</span> <span class="token function">lighten</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">,</span> 15%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$color2</span></span><span class="token punctuation">:</span> <span class="token function">darken</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">,</span> 15%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$color3</span></span><span class="token punctuation">:</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">,</span> 15%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$color4</span></span><span class="token punctuation">:</span> <span class="token function">desaturate</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">,</span> 15%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$color5</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>green <span class="token operator">+</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、运算"><a href="#四、运算" class="headerlink" title="四、运算"></a>四、运算</h2><h3 id="1-数字运算符"><a href="#1-数字运算符" class="headerlink" title="1.数字运算符"></a>1.数字运算符</h3><p>SassScript 支持数字的加减乘除、取整等运算 (<code>+, -, *, /, %</code>)，如果必要会在不同单位间转换值</p><p>如果要保留运算符号，则应该使用插值语法</p><ul><li><p><code>+</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 纯数字</span><span class="token property"><span class="token variable">$add1</span></span><span class="token punctuation">:</span> 1 <span class="token operator">+</span> 2<span class="token punctuation">;</span>   <span class="token comment">// 3</span><span class="token property"><span class="token variable">$add2</span></span><span class="token punctuation">:</span> 1 <span class="token operator">+</span> 2px<span class="token punctuation">;</span> <span class="token comment">// 3px</span><span class="token property"><span class="token variable">$add3</span></span><span class="token punctuation">:</span> 1px <span class="token operator">+</span> 2<span class="token punctuation">;</span> <span class="token comment">// 3px</span><span class="token property"><span class="token variable">$add4</span></span><span class="token punctuation">:</span> 1px <span class="token operator">+</span> 2px<span class="token punctuation">;</span><span class="token comment">//3px</span><span class="token comment">// 纯字符串</span><span class="token property"><span class="token variable">$add5</span></span><span class="token punctuation">:</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"b"</span><span class="token punctuation">;</span> <span class="token comment">// "ab"</span><span class="token property"><span class="token variable">$add6</span></span><span class="token punctuation">:</span> <span class="token string">"a"</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>  <span class="token comment">// "ab"</span><span class="token property"><span class="token variable">$add7</span></span><span class="token punctuation">:</span> a <span class="token operator">+</span> <span class="token string">"b"</span><span class="token punctuation">;</span>  <span class="token comment">// ab</span><span class="token property"><span class="token variable">$add8</span></span><span class="token punctuation">:</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  <span class="token comment">// ab</span><span class="token comment">// 数字和字符串</span><span class="token property"><span class="token variable">$add9</span></span><span class="token punctuation">:</span> 1 <span class="token operator">+</span> a<span class="token punctuation">;</span>   <span class="token comment">// 1a</span><span class="token property"><span class="token variable">$adda</span></span><span class="token punctuation">:</span> a <span class="token operator">+</span> 1<span class="token punctuation">;</span>   <span class="token comment">// a1</span><span class="token property"><span class="token variable">$addb</span></span><span class="token punctuation">:</span> <span class="token string">"1"</span> <span class="token operator">+</span> a<span class="token punctuation">;</span> <span class="token comment">// "1a"</span><span class="token property"><span class="token variable">$addc</span></span><span class="token punctuation">:</span> 1 <span class="token operator">+</span> <span class="token string">"a"</span><span class="token punctuation">;</span> <span class="token comment">// "1a"</span><span class="token property"><span class="token variable">$addd</span></span><span class="token punctuation">:</span> <span class="token string">"a"</span> <span class="token operator">+</span> 1<span class="token punctuation">;</span> <span class="token comment">// "a1"</span><span class="token property"><span class="token variable">$adde</span></span><span class="token punctuation">:</span> a <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">;</span> <span class="token comment">// a1</span><span class="token property"><span class="token variable">$addf</span></span><span class="token punctuation">:</span> 1 <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">;</span> <span class="token comment">// "11"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 总结：</span>a.纯数字：只要有单位，结果必有单位b.纯字符串：第一个字符串有无引号决定结果是否有引号c数字和字符串：第一位有引号，结果必为引号；第一位对应数字非数字且最后一位带有引号，则结果必为引号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>-</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$add1</span></span><span class="token punctuation">:</span> 1 <span class="token operator">-</span> 2<span class="token punctuation">;</span> <span class="token comment">// -1</span><span class="token property"><span class="token variable">$add2</span></span><span class="token punctuation">:</span> 1 <span class="token operator">-</span> 2px<span class="token punctuation">;</span> <span class="token comment">// -1px</span><span class="token property"><span class="token variable">$add3</span></span><span class="token punctuation">:</span> 1px <span class="token operator">-</span> 2<span class="token punctuation">;</span> <span class="token comment">// -1px</span><span class="token property"><span class="token variable">$add4</span></span><span class="token punctuation">:</span> 1px <span class="token operator">-</span> 2px<span class="token punctuation">;</span><span class="token comment">//-1px</span><span class="token property"><span class="token variable">$sub1</span></span><span class="token punctuation">:</span> a <span class="token operator">-</span> 1<span class="token punctuation">;</span>  <span class="token comment">// a-1</span><span class="token property"><span class="token variable">$sub2</span></span><span class="token punctuation">:</span> 1 <span class="token operator">-</span> a<span class="token punctuation">;</span>  <span class="token comment">// 1-a</span><span class="token property"><span class="token variable">$sub3</span></span><span class="token punctuation">:</span> <span class="token string">"a"</span> <span class="token operator">-</span> 1<span class="token punctuation">;</span><span class="token comment">// "a"-1</span><span class="token property"><span class="token variable">$sub4</span></span><span class="token punctuation">:</span> a <span class="token operator">-</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token comment">// a-"1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 总结：</span>每个字段必须前部分为数字，且两个字段只能一个后部分是字符<span class="token punctuation">(</span>因为此时后缀被当被单位看待了<span class="token punctuation">)</span>。只要其中一个值首位不为数字的，结果就按顺序去除空格后拼接起来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>*</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$num1</span></span><span class="token punctuation">:</span> 1 <span class="token operator">*</span> 2<span class="token punctuation">;</span>    <span class="token comment">// 2</span><span class="token property"><span class="token variable">$mul2</span></span><span class="token punctuation">:</span> 1 <span class="token operator">*</span> 2px<span class="token punctuation">;</span>  <span class="token comment">// 2px</span><span class="token property"><span class="token variable">$num3</span></span><span class="token punctuation">:</span> 1px <span class="token operator">*</span> 2<span class="token punctuation">;</span>  <span class="token comment">// 2px</span><span class="token property"><span class="token variable">$num4</span></span><span class="token punctuation">:</span> 2px <span class="token operator">*</span> 2px<span class="token punctuation">;</span><span class="token comment">// 编译不通过</span><span class="token property"><span class="token variable">$num5</span></span><span class="token punctuation">:</span> 1 <span class="token operator">*</span> 2abc<span class="token punctuation">;</span> <span class="token comment">// 2abc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 总结：</span>每个字段必须前部分为数字，且两个字段只能一个后部分是字符<span class="token punctuation">(</span>因为此时后缀被当被单位看待了<span class="token punctuation">)</span>。其余编译不通过<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>/</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 总结：</span>a.不会四舍五入，精确到小数点后5位b.每个字段必须前部分为数字，且当前者只是单纯数字无单位时，后者<span class="token punctuation">(</span>除数<span class="token punctuation">)</span>后部分不能有字符。其余结果就按顺序去除空格后拼接起来。<span class="token punctuation">(</span>因为此时后缀被当被单位看待了<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>%</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 总结：</span>a.值与<span class="token string">"%"</span>之间必须要有空格，否则会被看做字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a>2.关系运算符</h3><p>大前提：两端必须为<code>数字</code> 或 <code>前部分数字后部分字符</code></p><p>返回值：<code>true</code> or <code>false</code></p><ul><li><p><code>&gt;</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$a</span></span><span class="token punctuation">:</span> 1 <span class="token operator">></span> 2<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>&lt;</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$a</span></span><span class="token punctuation">:</span> 1 <span class="token operator">></span> 2<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>&gt;=</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$a</span></span><span class="token punctuation">:</span> 1 <span class="token operator">>=</span> 2<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>&lt;=</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$a</span></span><span class="token punctuation">:</span> 1 <span class="token operator">&lt;=</span> 2<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-相等运算符"><a href="#3-相等运算符" class="headerlink" title="3.相等运算符"></a>3.相等运算符</h3><p>作用范围：相等运算 <code>==, !=</code> 可用于所有数据类型</p><p>返回值：<code>true</code> or <code>false</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$a</span></span><span class="token punctuation">:</span> 1 <span class="token operator">==</span> 1px<span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token property"><span class="token variable">$b</span></span><span class="token punctuation">:</span> <span class="token string">"a"</span> <span class="token operator">==</span> a<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 总结：</span>前部分为不带引号数字时，对比的仅仅是数字部分；反之，忽略引号，要求字符一一对应<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-布尔运算符"><a href="#4-布尔运算符" class="headerlink" title="4.布尔运算符"></a>4.布尔运算符</h3><p>SassScript 支持布尔型的 <code>and</code> <code>or</code> 以及 <code>not</code> 运算。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$a</span></span><span class="token punctuation">:</span> 1>0 <span class="token operator">and</span> 0>=5<span class="token punctuation">;</span> <span class="token comment">// fasle</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 总结：</span>值与<span class="token string">"and"</span>、<span class="token string">"or"</span>和<span class="token string">"not"</span>之间必须要有空格，否则会被看做字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-颜色值运算"><a href="#5-颜色值运算" class="headerlink" title="5.颜色值运算"></a>5.颜色值运算</h3><p>颜色值的运算是分段计算进行的，也就是分别计算红色，绿色，以及蓝色的值</p><ul><li><p><code>颜色值与颜色值</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">p </span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #010203 <span class="token operator">+</span> #040506<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 计算 01 + 04 = 05 02 + 05 = 07 03 + 06 = 09，然后编译为</span><span class="token comment">// p &#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #050709<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>颜色值与数字</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">p </span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #010203 <span class="token operator">*</span> 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 计算 01 * 2 = 02 02 * 2 = 04 03 * 2 = 06，然后编译为</span><span class="token comment">// p &#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #020406<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>RGB和HSL</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 如果颜色值包含 alpha channel（rgba 或 hsla 两种颜色值），必须拥有相等的 alpha 值才能进行运算，因为算术运算不会作用于 alpha 值。</span><span class="token selector">p </span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.75<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.75<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// p &#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.75<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="6-运算优先级"><a href="#6-运算优先级" class="headerlink" title="6.运算优先级"></a>6.运算优先级</h3><ol start="0"><li><p><code>()</code></p></li><li><p><code>*</code>、<code>/</code>、<code>%</code></p></li><li><p><code>+</code>、<code>-</code></p></li><li><p><code>&gt;</code> 、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code></p></li></ol><h2 id="五、嵌套语法"><a href="#五、嵌套语法" class="headerlink" title="五、嵌套语法"></a>五、嵌套语法</h2><h2 id="六、杂货语法"><a href="#六、杂货语法" class="headerlink" title="六、杂货语法"></a>六、杂货语法</h2><h3 id="1-插值语法"><a href="#1-插值语法" class="headerlink" title="1.插值语法"></a>1.<code>插值语法</code></h3><p>通过 <code>#&#123;&#125;</code> 插值语句可以在选择器、属性名和属性值中使用变量。</p><p>但大多数情况下，这样使用属性值可能还不如直接使用变量方便，但是使用 <code>#&#123;&#125;</code> 可以避免 Sass 运行运算表达式，直接编译 CSS。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$name</span></span><span class="token punctuation">:</span> foo<span class="token punctuation">;</span><span class="token property"><span class="token variable">$attr</span></span><span class="token punctuation">:</span> border<span class="token punctuation">;</span><span class="token selector">p.<span class="token variable">#&#123;$name&#125;</span> </span><span class="token punctuation">&#123;</span>  <span class="token property"><span class="token variable">#&#123;$attr&#125;</span>-color</span><span class="token punctuation">:</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编译后：</span><span class="token selector">p.foo </span><span class="token punctuation">&#123;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> foo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-amp-in-SassScript"><a href="#2-amp-in-SassScript" class="headerlink" title="2.&amp; in SassScript"></a>2.<code>&amp; in SassScript</code></h3><p><code>&amp;</code>为父选择器</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">a </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token selector"><span class="token parent important">&amp;</span>:hover</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector"><span class="token parent important">&amp;</span>:active</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blank<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-default"><a href="#3-default" class="headerlink" title="3.!default"></a>3.<code>!default</code></h3><p>可以在变量的结尾添加 <code>!default</code> 给一个未通过 <code>!default</code> 声明赋值的变量赋值，此时，如果变量已经被赋值，不会再被重新赋值，但是如果变量还没有被赋值，则会被赋予新的值。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$content</span></span><span class="token punctuation">:</span> <span class="token string">"First content"</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$content</span></span><span class="token punctuation">:</span> <span class="token string">"Second content?"</span> <span class="token statement keyword">!default</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$new_content</span></span><span class="token punctuation">:</span> <span class="token string">"First time reference"</span> <span class="token statement keyword">!default</span><span class="token punctuation">;</span><span class="token selector">#main </span><span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token variable">$content</span><span class="token punctuation">;</span>  <span class="token property">new-content</span><span class="token punctuation">:</span> <span class="token variable">$new_content</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编译为：</span><span class="token selector">#main </span><span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"First content"</span><span class="token punctuation">;</span>  <span class="token property">new-content</span><span class="token punctuation">:</span> <span class="token string">"First time reference"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：变量是 null 空值时将视为未被 <code>!default</code> 赋值。</p><h3 id="3-global"><a href="#3-global" class="headerlink" title="3.!global"></a>3.<code>!global</code></h3><p>将局部变量提升为全局变量</p><h3 id="4-optional"><a href="#4-optional" class="headerlink" title="4.!optional"></a>4.<code>!optional</code></h3><p>如果 <code>@extend</code> 失败会收到错误提示，比如，这样写 <code>a.important &#123;@extend .notice&#125;</code>，当没有 <code>.notice</code> 选择器时，将会报错，只有 <code>h1.notice</code> 包含 <code>.notice</code> 时也会报错，因为 <code>h1</code> 与 <code>a</code> 冲突，会生成新的选择器。</p><p>如果要求 <code>@extend</code> 不生成新选择器，可以通过 <code>!optional</code> 声明达到这个目的.</p><p>简而言之：当<code>@extend</code>相关代码出现语法错误时，编译器可能会给我们”乱”编译为css，我们加上这个参数可以在出现问题后不让他编译该部分代码</p><h2 id="七、-Rules与指令"><a href="#七、-Rules与指令" class="headerlink" title="七、@-Rules与指令"></a>七、@-Rules与指令</h2><h3 id="1-import"><a href="#1-import" class="headerlink" title="1.@import"></a>1.<code>@import</code></h3><p>Sass 拓展了 <code>@import</code> 的功能，允许其导入 SCSS 或 SASS 文件。被导入的文件将合并编译到同一个 CSS 文件中，另外，被导入的文件中所包含的变量或者混合指令 (mixin) 都可以在导入的文件中使用。</p><p>通常，<code>@import</code> 寻找 Sass 文件并将其导入，但在以下情况下，<code>@import</code> 仅作为普通的 CSS 语句，不会导入任何 Sass 文件。</p><ul><li>文件拓展名是 <code>.css</code>；</li><li>文件名以 <code>http://</code> 开头；</li><li>文件名是 <code>url()</code>；</li><li><code>@import</code> 包含 media queries。</li></ul><p>如果不在上述情况内，文件的拓展名是 <code>.scss</code> 或 <code>.sass</code>，则导入成功。没有指定拓展名，Sass 将会试着寻找文件名相同，拓展名为 <code>.scss</code> 或 <code>.sass</code> 的文件并将其导入。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@import</span> <span class="token string">"foo.scss"</span><span class="token punctuation">;</span><span class="token keyword">@import</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span class="token comment">// 以上两种方式均可</span><span class="token comment">// 以下方式均不可行</span><span class="token keyword">@import</span> <span class="token string">"foo.css"</span><span class="token punctuation">;</span><span class="token keyword">@import</span> <span class="token string">"foo"</span> screen<span class="token punctuation">;</span><span class="token keyword">@import</span> <span class="token string">"http://foo.com/bar"</span><span class="token punctuation">;</span><span class="token keyword">@import</span> <span class="token url">url</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Sass 允许同时导入多个文件，例如同时导入 rounded-corners 与 text-shadow 两个文件：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@import</span> <span class="token string">"rounded-corners"</span><span class="token punctuation">,</span> <span class="token string">"text-shadow"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入文件也可以使用 <code>#&#123; &#125;</code> 插值语句，但不是通过变量动态导入 Sass 文件，只能作用于 CSS 的 <code>url()</code> 导入方式：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$family</span></span><span class="token punctuation">:</span> <span class="token function">unquote</span><span class="token punctuation">(</span><span class="token string">"Droid+Sans"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">@import</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">"http://fonts.googleapis.com/css?family=\#&#123;$family&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 编译为：</span><span class="token keyword">@import</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">"http://fonts.googleapis.com/css?family=Droid+Sans"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>如果你有一个 SCSS 或 Sass 文件需要引入， 但是你又不希望它被编译为一个 CSS 文件， 这时，你就可以在文件名前面加一个下划线，就能避免被编译。 这将告诉 Sass 不要把它编译成 CSS 文件。 然后，你就可以像往常一样引入这个文件了，而且还可以省略掉文件名前面的下划线。</p></li><li><p>除此之外，还支持嵌套 @import,但是不可以在混合指令 (mixin) 或控制指令 (control directives) 中嵌套 <code>@import</code>。</p></li></ol><h3 id="2-media"><a href="#2-media" class="headerlink" title="2.@media"></a>2.<code>@media</code></h3><p>Sass 中 <code>@media</code> 指令与 CSS 中用法一样，只是增加了一点额外的功能：允许其在 CSS 规则中嵌套。如果 <code>@media</code> 嵌套在 CSS 规则内，编译时，<code>@media</code> 将被编译到文件的最外层，包含嵌套的父选择器。这个功能让 <code>@media</code> 用起来更方便，不需要重复使用选择器，也不会打乱 CSS 的书写流程。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.sidebar </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token atrule"><span class="token rule">@media</span> screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编译为</span><span class="token selector">.sidebar </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token atrule"><span class="token rule">@media</span> screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@media</code>的 queries 允许互相嵌套使用，编译时，Sass 自动添加 <code>and</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token atrule"><span class="token rule">@media</span> screen</span> <span class="token punctuation">&#123;</span>  <span class="token selector">.sidebar </span><span class="token punctuation">&#123;</span>    <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编译为：</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.sidebar </span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@media</code> 甚至可以使用 SassScript（比如变量，函数，以及运算符）代替条件的名称或者值</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$media</span></span><span class="token punctuation">:</span> screen<span class="token punctuation">;</span><span class="token property"><span class="token variable">$feature</span></span><span class="token punctuation">:</span> -webkit-min-device-pixel-ratio<span class="token punctuation">;</span><span class="token property"><span class="token variable">$value</span></span><span class="token punctuation">:</span> 1.5<span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token variable">#&#123;$media&#125;</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property"><span class="token variable">$feature</span></span><span class="token punctuation">:</span> <span class="token variable">$value</span><span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.sidebar </span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编译为：</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">-webkit-min-device-pixel-ratio</span><span class="token punctuation">:</span> 1.5<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.sidebar </span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-extend"><a href="#3-extend" class="headerlink" title="3.*@extend"></a>3.<code>*@extend</code></h3><p><code>@extend</code>即<code>继承</code>。在设计网页的时候常常遇到这种情况：一个元素使用的样式与另一个元素完全相同，但又添加了额外的样式。</p><p>总的来看：支持层叠继承、多继承、允许延伸任何定义给单个元素的选择器（但是允许不一定好用）</p><p>a. <code>基本延伸</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.error </span><span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px #f00<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fdd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.seriousError </span><span class="token punctuation">&#123;</span>  <span class="token keyword">@extend</span> .error<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 上面代码的意思是将 .error 下的所有样式继承给 .seriousError，border-width: 3px; 是单独给 .seriousError 设定特殊样式，这样，使用 .seriousError 的地方可以不再使用 .error。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@extend</code> 的作用是将重复使用的样式 (<code>.error</code>) 延伸 (extend) 给需要包含这个样式的特殊样式（<code>.seriousError</code>）</p><p>注意理解以下情况：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.error </span><span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px #f00<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fdd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.error.intrusion </span><span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">"/image/hacked.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.seriousError </span><span class="token punctuation">&#123;</span>  <span class="token keyword">@extend</span> .error<span class="token punctuation">;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// .error, .seriousError &#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px #f00<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fdd<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.error.intrusion, .seriousError.intrusion </span><span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">"/image/hacked.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.seriousError </span><span class="token punctuation">&#123;</span>  <span class="token property">border-width</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当合并选择器时，<code>@extend</code> 会很聪明地避免无谓的重复，<code>.seriousError.seriousError</code> 将编译为 <code>.seriousError</code>，不能匹配任何元素的选择器也会删除。</p><p>b.  <code>延伸复杂的选择器</code>：Class 选择器并不是唯一可以被延伸 (extend) 的，Sass 允许延伸任何定义给单个元素的选择器，比如 <code>.special.cool</code>，<code>a:hover</code> 或者 <code>a.user[href^=&quot;http://&quot;]</code> 等</p><p>c. <code>多重延伸</code>：同一个选择器可以延伸给多个选择器，它所包含的属性将继承给所有被延伸的选择器</p><p>d. <code>继续延伸</code>：当一个选择器延伸给第二个后，可以继续将第二个选择器延伸给第三个</p><p>e.<code>*选择器列</code>：暂时不可以将选择器列 (Selector Sequences)，比如 <code>.foo .bar</code> 或 <code>.foo + .bar</code>，延伸给其他元素，但是，却可以将其他元素延伸给选择器列。</p><p>尽量不使用<code>合并选择器列</code>，因为如果凭个人推理的话，会出现排列组合的情况，所以SASS编译器只会保留有用的组合形式，但依旧会存在排列组合的情况，有可能会留下隐患。</p><ol><li><p>当两个列合并时，如果没有包含相同的选择器，将生成两个新选择器：第一列出现在第二列之前，或者第二列出现在第一列之前</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">#admin .tabbar a </span><span class="token punctuation">&#123;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#demo .overview .fakelink </span><span class="token punctuation">&#123;</span>  <span class="token keyword">@extend</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编译为：</span><span class="token selector">#admin .tabbar a,#admin .tabbar #demo .overview .fakelink,#demo .overview #admin .tabbar .fakelink </span><span class="token punctuation">&#123;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果两个列包含了相同的选择器，相同部分将会合并在一起，其他部分交替输出</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">#admin .tabbar a </span><span class="token punctuation">&#123;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#admin .overview .fakelink </span><span class="token punctuation">&#123;</span>  <span class="token keyword">@extend</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编译为</span><span class="token selector">#admin .tabbar a,#admin .tabbar .overview .fakelink,#admin .overview .tabbar .fakelink </span><span class="token punctuation">&#123;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>f. <code>在指令中延伸</code></p><p>在指令中使用 <code>@extend</code> 时（比如在 <code>@media</code> 中）有一些限制：Sass 不可以将 <code>@media</code> 层外的 CSS 规则延伸给指令层内的 CSS.</p><p>g.  <code>%placeholder</code>为选择器占位符，配合<code>@extend-Only选择器</code>使用。</p><p>效果：只定义了样式，但不会对原有选择器匹配的元素生效</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// example1:</span><span class="token selector"><span class="token placeholder">%img</span> </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.path</span><span class="token punctuation">&#123;</span>    <span class="token keyword">@extend</span> <span class="token placeholder selector">%img</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编译后：</span><span class="token selector">.path </span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// example2:</span><span class="token selector">#context a<span class="token placeholder">%extreme</span> </span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编译后：</span><span class="token selector">.notice </span><span class="token punctuation">&#123;</span>  <span class="token keyword">@extend</span> <span class="token placeholder selector">%extreme</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 注：必须是"."和"#"选择器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-at-root"><a href="#4-at-root" class="headerlink" title="4.@at-root"></a>4.<code>@at-root</code></h3><blockquote><p>The @at-root directive causes one or more rules to be emitted at the root of the document, rather than being nested beneath their parent selectors. It can either be used with a single inline selector</p></blockquote><ul><li><p>译文：@at root指令使一个或多个规则在文档的根发出，而不是嵌套在其父选择器下。它可以与单个内联选择器一起使用,且@at-root 使多个规则跳出嵌套</p></li><li><p>@at-root默认情况下并不能使规则或者选择器跳出指令，通过使用without和with可以解决该问题</p></li></ul><p>了解即可</p><h3 id="5-debug"><a href="#5-debug" class="headerlink" title="5.@debug"></a>5.<code>@debug</code></h3><p>用于调试，按标准错误输出流输出</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$size</span></span><span class="token punctuation">:</span> 9px<span class="token punctuation">;</span><span class="token selector">.file</span><span class="token punctuation">&#123;</span>  <span class="token keyword">@debug</span> <span class="token variable">$size</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-warn"><a href="#6-warn" class="headerlink" title="6.@warn"></a>6.<code>@warn</code></h3><p>用于警告，按标准错误输出流输出</p><h3 id="7-error"><a href="#7-error" class="headerlink" title="7.@error"></a>7.<code>@error</code></h3><p>用于报错，按标准错误输出流输出</p><table><thead><tr><th>序列</th><th>@-rules</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>@import</td><td>导入sass或scss文件</td></tr><tr><td>2</td><td>@media</td><td>用于将样式规则设置为不同的媒体类型</td></tr><tr><td>3</td><td>@extend</td><td>以继承的方式共享选择器</td></tr><tr><td>4</td><td>@at-root</td><td>转到根节点</td></tr><tr><td>5</td><td>@debug</td><td>用于调试，按标准错误输出流输出</td></tr><tr><td>6</td><td>@warn</td><td>用于警告，按标准错误输出流输出</td></tr><tr><td>7</td><td>@error</td><td>用于报错，按标准错误输出流输出</td></tr></tbody></table><h2 id="八、控制指令"><a href="#八、控制指令" class="headerlink" title="八、控制指令"></a>八、控制指令</h2><h3 id="1-if"><a href="#1-if" class="headerlink" title="1.if()"></a>1.<code>if()</code></h3><ul><li><em>三元运算符</em></li></ul><p>表达式：<code>if(expression, value1, value2)</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">p </span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">if</span><span class="token punctuation">(</span>1 <span class="token operator">+</span> 1 = 2<span class="token punctuation">,</span> green<span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// compile:</span><span class="token selector">p</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-if"><a href="#2-if" class="headerlink" title="2.@if"></a>2.<code>@if</code></h3><ul><li><em>条件语句</em></li></ul><p>当 <code>@if</code> 的表达式返回值不是 <code>false</code> 或者 <code>null</code> 时，条件成立，输出 <code>&#123;&#125;</code> 内的代码</p><p><code>@if</code> 声明后面可以跟多个 <code>@else if</code> 声明，或者一个 <code>@else</code> 声明。如果 <code>@if</code> 声明失败，Sass 将逐条执行 <code>@else if</code> 声明，如果全部失败，最后执行 <code>@else</code> 声明</p><ul><li><p><code>单@if</code></p>  <pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">p </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@if</span> <span class="token selector">1 + 1 == 2 </span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// compile:</span><span class="token selector">p </span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>@if - @else</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">p </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@if</span> <span class="token selector">1 + 1 != 2 </span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">@else</span> <span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// compile:</span><span class="token selector">p </span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>@if - @else if - @else</code></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$age</span></span><span class="token punctuation">:</span> 19<span class="token punctuation">;</span><span class="token selector">p </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$age</span> == 18 </span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">@else if</span> <span class="token selector"><span class="token variable">$age</span> == 19 </span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">@else</span> <span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// compile:</span><span class="token selector">p </span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-for"><a href="#3-for" class="headerlink" title="3.@for"></a>3.<code>@for</code></h3><ul><li><em>循环语句</em></li></ul><p>表达式：<code>@for $var from &lt;start&gt; through &lt;end&gt;</code> 或 <code>@for $var from &lt;start&gt; to &lt;end&gt;</code></p><p>through 和 to 的相同点与不同点：</p><ul><li>相同点：两者均包含&lt;start&gt;的值</li><li>不同点：through包含&lt;end&gt;的值，但to不包含&lt;end&gt;的值</li></ul><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token selector">3 </span><span class="token punctuation">&#123;</span>  <span class="token selector">.item-<span class="token variable">#&#123;$i&#125;</span> </span><span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 2em <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// compile:</span><span class="token selector">.item-1 </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.item-2 </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 4em<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.item-3 </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 6em<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-while"><a href="#4-while" class="headerlink" title="4.@while"></a>4.<code>@while</code></h3><ul><li><em>循环语句</em></li></ul><p>表达式：<code>@while expression</code></p><p><code>@while</code> 指令重复输出格式直到表达式返回结果为 <code>false</code>。这样可以实现比 <code>@for</code> 更复杂的循环，只是很少会用到</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$i</span></span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span><span class="token keyword">@while</span> <span class="token selector"><span class="token variable">$i</span> > 0 </span><span class="token punctuation">&#123;</span>  <span class="token selector">.item-<span class="token variable">#&#123;$i&#125;</span> </span><span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 2em <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token property"><span class="token variable">$i</span></span><span class="token punctuation">:</span> <span class="token variable">$i</span> <span class="token operator">-</span> 2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// compile:</span><span class="token selector">.item-6 </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 12em<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.item-4 </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 8em<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.item-2 </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 4em<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-each"><a href="#5-each" class="headerlink" title="5.@each"></a>5.<code>@each</code></h3><ul><li><em>循环语句</em></li></ul><p>表达式：<code>$var in $vars</code></p><p><code>$var</code> 可以是任何变量名</p><p><code>$vars</code> 只能是<code>Lists</code>或者<code>Maps</code></p><ul><li><p>一维列表</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$animal</span> in puma, sea-slug, egret, salamander </span><span class="token punctuation">&#123;</span>  <span class="token selector">.<span class="token variable">#&#123;$animal&#125;</span>-icon </span><span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">'/images/#&#123;$animal&#125;.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// compile:</span><span class="token selector">.puma-icon </span><span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">'/images/puma.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.sea-slug-icon </span><span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">'/images/sea-slug.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.egret-icon </span><span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">'/images/egret.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.salamander-icon </span><span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">'/images/salamander.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>二维列表</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@each</span> <span class="token variable">$animal</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">,</span> <span class="token variable">$cursor</span> in <span class="token punctuation">(</span>puma<span class="token punctuation">,</span> black<span class="token punctuation">,</span> default<span class="token punctuation">)</span><span class="token punctuation">,</span>                                  <span class="token punctuation">(</span>sea-slug<span class="token punctuation">,</span> blue<span class="token punctuation">,</span> pointer<span class="token punctuation">)</span><span class="token punctuation">,</span>                                  <span class="token punctuation">(</span>egret<span class="token punctuation">,</span> white<span class="token punctuation">,</span> move<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token selector">.<span class="token variable">#&#123;$animal&#125;</span>-icon </span><span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">'/images/#&#123;$animal&#125;.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid <span class="token variable">$color</span><span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> <span class="token variable">$cursor</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// compile:</span><span class="token selector">.puma-icon </span><span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">'/images/puma.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 2px solid black<span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> default<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.sea-slug-icon </span><span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">'/images/sea-slug.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 2px solid blue<span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.egret-icon </span><span class="token punctuation">&#123;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">'/images/egret.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 2px solid white<span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>maps</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@each</span> <span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token variable">$size</span> in <span class="token punctuation">(</span><span class="token property">h1</span><span class="token punctuation">:</span> 2em<span class="token punctuation">,</span> <span class="token property">h2</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">,</span> <span class="token property">h3</span><span class="token punctuation">:</span> 1.2em<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token selector"><span class="token variable">#&#123;$header&#125;</span> </span><span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$size</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// compile:</span><span class="token selector">h1 </span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">h2 </span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">h3 </span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2em<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="九、混合指令"><a href="#九、混合指令" class="headerlink" title="九、混合指令"></a>九、混合指令</h2><blockquote><p>混合指令（Mixin）用于定义可重复使用的样式，避免了使用无语意的 class，比如 <code>.float-left</code>。混合指令可以包含所有的 CSS 规则，绝大部分 Sass 规则，甚至通过参数功能引入变量，输出多样化的样式。</p></blockquote><p>注意：这不是函数！没有返回值！！</p><h3 id="1-定义混合指令"><a href="#1-定义混合指令" class="headerlink" title="1.定义混合指令"></a>1.定义混合指令</h3><p>混合指令的用法是在 <code>@mixin</code> 后添加名称与样式，以及需要的参数（可选）。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 格式：</span><span class="token keyword">@mixin</span> <span class="token selector">name </span><span class="token punctuation">&#123;</span>    <span class="token comment">// 样式....</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// example：</span><span class="token keyword">@mixin</span> <span class="token selector">large-text </span><span class="token punctuation">&#123;</span>  <span class="token selector">font: </span><span class="token punctuation">&#123;</span>    <span class="token property">family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">;</span>    <span class="token property">size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #ff0000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-引用混合样式"><a href="#2-引用混合样式" class="headerlink" title="2.引用混合样式"></a>2.引用混合样式</h3><p>使用 <code>@include</code> 指令引用混合样式，格式是在其后添加混合名称，以及需要的参数（可选）。</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// 格式：</span><span class="token keyword">@include</span> name<span class="token punctuation">;</span><span class="token comment">// 注：无参数或参数都有默认值时，带不带括号都可以</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// example：</span><span class="token selector">p </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@include</span> large-text<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// compile:</span><span class="token selector">p </span><span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #ff0000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-参数"><a href="#3-参数" class="headerlink" title="3.参数"></a>3.参数</h3><p>格式：按照变量的格式，通过逗号分隔，将参数写进Mixin名称后的圆括号里</p><p>支持默认值；支持多参数；支持不定参数；支持位置传参和关键词传参</p><h4 id="a-位置传参"><a href="#a-位置传参" class="headerlink" title="a. 位置传参"></a>a. 位置传参</h4><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">mp</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token variable">$width</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@include</span> <span class="token function">mp</span><span class="token punctuation">(</span>300px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b-关键词传参"><a href="#b-关键词传参" class="headerlink" title="b.关键词传参"></a>b.关键词传参</h4><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">mp</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token variable">$width</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@include</span> <span class="token function">mp</span><span class="token punctuation">(</span><span class="token property"><span class="token variable">$width</span></span><span class="token punctuation">:</span> 300px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c-参数默认值"><a href="#c-参数默认值" class="headerlink" title="c.参数默认值"></a>c.参数默认值</h4><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">mp</span><span class="token punctuation">(</span><span class="token property"><span class="token variable">$width</span></span><span class="token punctuation">:</span> 500px<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token variable">$width</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body </span><span class="token punctuation">&#123;</span>    <span class="token keyword">@include</span> <span class="token function">mp</span><span class="token punctuation">(</span><span class="token property"><span class="token variable">$width</span></span><span class="token punctuation">:</span> 300px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// or</span>    <span class="token keyword">@include</span> <span class="token function">mp</span><span class="token punctuation">(</span>300px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="d-不定参数"><a href="#d-不定参数" class="headerlink" title="d.不定参数"></a>d.不定参数</h4><blockquote><p>官方：Variable Arguments</p><p>译文：参数变量</p><p>有时，不能确定混合指令需要使用多少个参数。这时，可以使用参数变量 <code>…</code> 声明（写在参数的最后方）告诉 Sass 将这些参数视为值列表处理</p></blockquote><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">mar</span><span class="token punctuation">(</span><span class="token variable">$value</span>...<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token variable">$value</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-向混合样式中导入内容"><a href="#4-向混合样式中导入内容" class="headerlink" title="4.向混合样式中导入内容"></a>4.向混合样式中导入内容</h3><p>在引用混合样式的时候，可以先将一段代码导入到混合指令中，然后再输出混合样式，额外导入的部分将出现在 <code>@content</code> 标志的地方</p><p>可以看作参数的升级版</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token selector">example </span><span class="token punctuation">&#123;</span>    <span class="token selector">html </span><span class="token punctuation">&#123;</span>        <span class="token keyword">@content</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">@include</span> <span class="token selector">example</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token selector">.logo </span><span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// compile:</span><span class="token selector">html </span><span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">html .logo </span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、函数指令"><a href="#十、函数指令" class="headerlink" title="十、函数指令"></a>十、函数指令</h2><h3 id="1-内置函数"><a href="#1-内置函数" class="headerlink" title="1.内置函数"></a>1.内置函数</h3><h4 id="a-字符串函数"><a href="#a-字符串函数" class="headerlink" title="a. 字符串函数"></a>a. 字符串函数</h4><blockquote><p>索引第一个为1，最后一个为-1；切片两边均为闭区间</p></blockquote><table><thead><tr><th align="left">函数名和参数类型</th><th align="center">函数作用</th></tr></thead><tbody><tr><td align="left">quote($string)</td><td align="center">添加引号</td></tr><tr><td align="left">unquote($string)</td><td align="center">除去引号</td></tr><tr><td align="left">to-lower-case($string)</td><td align="center">变为小写</td></tr><tr><td align="left">to-upper-case($string)</td><td align="center">变为大写</td></tr><tr><td align="left">str-length($string)</td><td align="center">返回$string的长度(汉字算一个)</td></tr><tr><td align="left">str-index($string，$substring)</td><td align="center">返回$substring在$string的位置</td></tr><tr><td align="left">str-insert($string, $insert, $index)</td><td align="center">在$string的$index处插入$insert</td></tr><tr><td align="left">str-slice($string, $start-at, $end-at）</td><td align="center">截取$string的$start-at和$end-at之间的字符串</td></tr></tbody></table><h4 id="b-数字函数"><a href="#b-数字函数" class="headerlink" title="b. 数字函数"></a>b. 数字函数</h4><table><thead><tr><th>函数名和参数类型</th><th align="center">函数作用</th></tr></thead><tbody><tr><td>percentage($number)</td><td align="center">转换为百分比形式</td></tr><tr><td>round($number)</td><td align="center">四舍五入为整数</td></tr><tr><td>ceil($number)</td><td align="center">数值向上取整</td></tr><tr><td>floor($number)</td><td align="center">数值向下取整</td></tr><tr><td>abs($number)</td><td align="center">获取绝对值</td></tr><tr><td>min($number…)</td><td align="center">获取最小值</td></tr><tr><td>max($number…)</td><td align="center">获取最大值</td></tr><tr><td>random($number?:number)</td><td align="center">不传入值：获得0-1的随机数；传入正整数n：获得0-n的随机整数（左开右闭）</td></tr></tbody></table><h4 id="c-数组函数"><a href="#c-数组函数" class="headerlink" title="c. 数组函数"></a>c. 数组函数</h4><table><thead><tr><th>函数名和参数类型</th><th align="center">函数作用</th></tr></thead><tbody><tr><td>length($list)</td><td align="center">获取数组长度</td></tr><tr><td>nth($list, n)</td><td align="center">获取指定下标的元素</td></tr><tr><td>set-nth($list, $n, $value)</td><td align="center">向$list的$n处插入$value</td></tr><tr><td>join($list1, $list2, $separator)</td><td align="center">拼接$list1和list2；$separator为新list的分隔符，默认为auto，可选择comma、space</td></tr><tr><td>append($list, $val, $separator)</td><td align="center">向$list的末尾添加$val；$separator为新list的分隔符，默认为auto，可选择comma、space</td></tr><tr><td>index($list, $value)</td><td align="center">返回$value值在$list中的索引值</td></tr><tr><td>zip($lists…)</td><td align="center">将几个列表结合成一个多维的列表；要求每个的列表个数值必须是相同的</td></tr></tbody></table><h4 id="d-映射函数"><a href="#d-映射函数" class="headerlink" title="d. 映射函数"></a>d. 映射函数</h4><table><thead><tr><th>函数名和参数类型</th><th align="center">函数作用</th></tr></thead><tbody><tr><td>map-get($map, $key)</td><td align="center">获取$map中$key对应的$value</td></tr><tr><td>map-merge($map1, $map2)</td><td align="center">合并$map1和$map2，返回一个新$map</td></tr><tr><td>map-remove($map, $key)</td><td align="center">从$map中删除$key，返回一个新$map</td></tr><tr><td>map-keys($map)</td><td align="center">返回$map所有的$key</td></tr><tr><td>map-values($map)</td><td align="center">返回$map所有的$value</td></tr><tr><td>map-has-key($map, $key)</td><td align="center">判断$map中是否存在$key，返回对应的布尔值</td></tr><tr><td>keywords($args)</td><td align="center">返回一个函数的参数，并可以动态修改其值</td></tr></tbody></table><h4 id="e-颜色函数"><a href="#e-颜色函数" class="headerlink" title="e. 颜色函数"></a>e. 颜色函数</h4><ul><li><p><strong>RGB函数</strong></p><table><thead><tr><th>函数名和参数类型</th><th align="center">函数作用</th></tr></thead><tbody><tr><td>rgb($red, $green, $blue)</td><td align="center">返回一个16进制颜色值</td></tr><tr><td>rgba($red,$green,$blue,$alpha)</td><td align="center">返回一个rgba；$red,$green和$blue可被当作一个整体以颜色单词、hsl、rgb或16进制形式传入</td></tr><tr><td>red($color)</td><td align="center">从$color中获取其中红色值</td></tr><tr><td>green($color)</td><td align="center">从$color中获取其中绿色值</td></tr><tr><td>blue($color)</td><td align="center">从$color中获取其中蓝色值</td></tr><tr><td>mix($color1,$color2,$weight?)</td><td align="center">按照$weight比例，将$color1和$color2混合为一个新颜色</td></tr></tbody></table></li><li><p><strong>HSL函数</strong></p><table><thead><tr><th>函数名和参数类型</th><th>函数作用</th></tr></thead><tbody><tr><td>hsl($hue,$saturation,$lightness)</td><td>通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色</td></tr><tr><td>hsla($hue,$saturation,$lightness,$alpha)</td><td>通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色</td></tr><tr><td>saturation($color)</td><td>从一个颜色中获取饱和度（saturation）值</td></tr><tr><td>lightness($color)</td><td>从一个颜色中获取亮度（lightness）值</td></tr><tr><td>adjust-hue($color,$degrees)</td><td>通过改变一个颜色的色相值，创建一个新的颜色</td></tr><tr><td>lighten($color,$amount)</td><td>通过改变颜色的亮度值，让颜色变亮，创建一个新的颜色</td></tr><tr><td>darken($color,$amount)</td><td>通过改变颜色的亮度值，让颜色变暗，创建一个新的颜色</td></tr><tr><td>hue($color)</td><td>从一个颜色中获取亮度色相（hue）值</td></tr></tbody></table></li><li><p><strong>Opacity函数</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>alpha($color)/opacity($color)</td><td>获取颜色透明度值</td></tr><tr><td>rgba($color,$alpha)</td><td>改变颜色的透明度</td></tr><tr><td>opacify($color, $amount) / fade-in($color, $amount)</td><td>使颜色更不透明</td></tr><tr><td>transparentize($color, $amount) / fade-out($color, $amount)</td><td>使颜色更加透明</td></tr></tbody></table></li></ul><h4 id="f-Introspection函数"><a href="#f-Introspection函数" class="headerlink" title="f. Introspection函数"></a>f. Introspection函数</h4><table><thead><tr><th>函数名和参数类型</th><th align="center">函数作用</th></tr></thead><tbody><tr><td>type-of($value)</td><td align="center">返回$value的类型</td></tr><tr><td>unit($number)</td><td align="center">返回$number的单位</td></tr><tr><td>unitless($number)</td><td align="center">判断$number是否带单位，返回对应的布尔值</td></tr><tr><td>comparable($number1, $number2)</td><td align="center">判断$number1和$number2是否可以做加、减和合并，返回对应的布尔值</td></tr></tbody></table><h3 id="2-自定义函数"><a href="#2-自定义函数" class="headerlink" title="2.自定义函数"></a>2.自定义函数</h3><blockquote><p>Sass 支持自定义函数，并能在任何属性值或 Sass script 中使用</p><p>Params: 与Mixin一致</p><p>支持返回值</p></blockquote><p><strong>基本格式：</strong></p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@function</span> <span class="token function">fn-name</span><span class="token punctuation">(</span><span class="token variable">$params</span>...<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">@return</span> <span class="token variable">$params</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">// example:</span><span class="token keyword">@function</span> <span class="token function">fn-name</span><span class="token punctuation">(</span><span class="token variable">$params</span>...<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">@return</span> <span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p </span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">fn-name</span><span class="token punctuation">(</span>1px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// compiled:</span><span class="token selector">p </span><span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、细节与展望"><a href="#十一、细节与展望" class="headerlink" title="十一、细节与展望"></a>十一、细节与展望</h2><h3 id="1-细节"><a href="#1-细节" class="headerlink" title="1.细节"></a>1.细节</h3><p>a. @extend、@Mixin和@function的选择</p><p><a href="https://csswizardry.com/2016/02/mixins-better-for-performance/">原文链接</a></p><p><img src="https://raw.githubusercontent.com/ggdream/scss/master/sources.assets/image-20200707171035353.png" alt="image-20200707171035353"></p><blockquote><p><code>minxins</code>在网络传输中比<code>@extend</code> 拥有更好的性能.尽管有些文件未压缩时更大，但使用<code>gzip</code>压缩后，依然可以保证我们拥有更好的性能。</p></blockquote><ul><li>所以@extend我们就尽量不要使用了，而@Mixin和@function的差别在定义和使用上</li></ul><blockquote><p>定义方式不同： <code>@function</code> 需要调用<code>@return</code>输出结果。而 @mixin则不需要。</p><p>使用方式不同：<code>@mixin</code> 使用<code>@include</code>引用，而 <code>@function</code> 使用小括号执行函数。</p></blockquote><h3 id="2-展望"><a href="#2-展望" class="headerlink" title="2.展望"></a>2.展望</h3><blockquote><p>以上内容算是”基础”部分，但是对于日常开发，我觉得是足够使用的了。</p><p>如果想要进一步了解，就必须先去学习下Ruby，使用Ruby相关模块进行更丰富地学习</p></blockquote><h3 id="Unfinished"><a href="#Unfinished" class="headerlink" title="Unfinished"></a>Unfinished</h3>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS属性</title>
      <link href="/2021/08/28/css-shu-xing/"/>
      <url>/2021/08/28/css-shu-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="css基础"><a href="#css基础" class="headerlink" title="css基础"></a>css基础</h2><h3 id="css的引入样式"><a href="#css的引入样式" class="headerlink" title="css的引入样式"></a>css的引入样式</h3><ol><li><p>内部样式表:将代码写在<code>&lt;style&gt;&lt;/style&gt;</code>中</p></li><li><p>行内样式表:<code>&lt;div style=&quot;color:red&quot;&gt;你好&lt;/style&gt;</code></p></li><li><p>外部样式表:<code>&lt;link ref=&quot;stylesheet(样式表)&quot; href=&quot;路径&quot;&gt;</code></p></li></ol><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><ol><li><p>标签选择器: <code>h2&#123;&#125;</code></p></li><li><p>类选择器:样式点定义 结构类(class)调用 一个或多个 </p></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.red</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><span style="color:red">注意:可以写多个类名,但是中间必须使用空格</span></li></ul><ol start="3"><li>id选择器:样式#定义,结构id调用,只能调用一次,其它切勿调用</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#red</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>通配符选择器:<code>*&#123;&#125;</code>所有标签的属性都会增加</li></ol><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><ol><li>后代选择器:元素1 元素2{样式},例<code>ul li &#123;color:red;&#125;</code></li></ol><ul><li><p><span style="color:red">注意:元素2必须是子级,只要是元素的子级都可以选到</sapn></p></li><li><p>元素1和2可以是任意基础选择器</p></li></ul><ol start="2"><li>子选择器(重要):元素1&gt;元素2(样式声明),表示选择元素1里的所有直接后代的(子元素)元素2,例:<code>div &gt; a&#123;color:red;&#125;</code></li></ol><ul><li><p>元素1是父级,元素2是子级,最终选择的元素是元素2</p></li><li><p>元素2必须是最近一级的子级(亲儿子),子子集(孙子)等都不归他管</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">div > a</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你好(选不到)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>并集选择器:可以选择多组标签,同时定义相同的样式,用于集体声明<code>div,ul, .pig(class) li&#123;color:red;&#125;</code></p></li><li><p>伪类选择器:给选择器添加特殊效果,特点:<span style="color:red">用冒号(:)</span>,比如: :hover,:first-child</p></li></ol><ul><li><p>链接伪类选择器:</p><ul><li><p>a:link   /<em>选择所有未被访问的链接</em>/  </p></li><li><p>a:visited   /<em>选择所有已被访问的链接</em>/  </p></li><li><p>a:hover   /<em>选择所有指针位于其上的链接</em>/  </p></li><li><p>a:active   /<em>选择所有活动的链接(鼠标按下未弹起)</em>/</p></li><li><p>注意:  </p><ul><li><span style="color:red">请按照LVHA的顺序声明:link-:visited-:hover-:active</span></li><li>因为链接在浏览器中有单独默认样式,所以在实际工作中需要给链接指定单独样式</li></ul></li><li><p>:focus伪类选择器:<span style="color:red">用于获得焦点,焦点就是光标</span>,一般情况下&lt;input&gt;类表单才能获取,主要针对于表单元素<code>input:focus&#123;background-color:red;&#125;</code></p></li></ul></li></ul><h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><ol><li><p>字体:<code>font-family:&quot;Arial&quot;;</code>,属性可以写英文可以写中文</p></li><li><p>字体大小: <code>font-size:20px;</code>,属性是数值</p></li><li><p>字体粗细:<code>font-weight:属性;</code>,提倡用数字表示(无单位),</p></li></ol><ul><li><p>normal:不加粗,等同于400</p></li><li><p>bold: 加粗,等同于700</p></li></ul><ol start="4"><li><p>文字样式:<code>font-style:属性;</code>,<code>normal</code>:默认值,标准样式;<code>italic</code>:斜体字体样式</p></li><li><p>简写 <code>font:font-style font-weight font-size/line-height font-family</code>(<span style="color:red">不能颠倒顺序,且font-size和font-family不能省略</span>)</p></li></ol><h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><ol><li>文本颜色:<code>color:red</code></li></ol><blockquote><p>预定义颜色:red等; 十六进制:#FF0000等; RGB:rgb(255,0,0)</p></blockquote><ol start="2"><li>对齐文本:<code>text-align:center</code>,只能实现水平对齐</li></ol><blockquote><p>左对齐:left;  右对齐:right;  居中对齐:center</p></blockquote><ol start="3"><li>装饰文本:<code>text-decoration:none;</code></li></ol><blockquote><p>none:默认,无装饰;underline:下划线:<span style="color:red">链接a自带下划线</span>;overline:上划线;line-through:上划线</p></blockquote><ol start="4"><li><p>文本缩进:首行缩进,<code>text-indent:2em;</code>,em是当前文字的大小,<span style="color:red">1em=16px</span></p></li><li><p>行间距: <code>line-height:50px;</code>;<span style="color:red">行间距=上间距+文本高度(默认16px)+下间距</span></p></li></ol><h3 id="Emment语法"><a href="#Emment语法" class="headerlink" title="Emment语法"></a>Emment语法</h3><ol><li><p>生成多个相同标签,用*,例如:div*3</p></li><li><p>父子级关系标签,用&gt;,例如,ul&gt;li</p></li><li><p>兄弟级关系的标签,用+,例如div+p  </p></li><li><p>生成带有类名的或者id名的,直接写.demo或者#two, tab键</p></li><li><p>如果生成div类名是有顺序的,可以用自增符号,例:<code>.demo$*5</code></p></li><li><p>如果在生成的标签内部些内容,可以用{}表示,<code>div&#123;你好&#125;</code>,tab键</p></li></ol><h3 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h3><ul><li><p>块元素:&lt;h1&gt;~&lt;h6&gt;,&lt;div&gt;,&lt;p&gt;,&lt;ul&gt;,&lt;ol&gt;,&lt;li&gt;等</p><ol><li>自己独占一行</li><li>高度,宽度,外边距以及内边距都可以控制</li><li>宽度默认是容器(父级宽度)的100%</li><li>是一个容器及盒子,里面可以放行内或者块级元素</li></ol><ul><li>注意:<ol><li>文字类的元素不能使用块级元素</li><li>&lt;p&gt;标签主要用于存放文字,因此&lt;p&gt;里面不能放块级元素,特别是不能放&lt;div&gt;</li><li>同理,&lt;h1&gt;~&lt;h6&gt;等都不能放其它块级元素</li></ol></li></ul></li><li><p>行内元素:&lt;a&gt;,&lt;strong&gt;,&lt;b&gt;,&lt;em&gt;,&lt;i&gt;,&lt;del&gt;,&lt;s&gt;,&lt;ins&gt;,&lt;u&gt;,&lt;span&gt;等,也称内联元素</p><ol><li>相邻行内元素在一行上,一行可以显示多个</li><li>高宽直接设置是无效的</li><li>默认宽度是它本身内容的宽度</li><li>行内元素只能容纳文本或其它行内元素</li></ol><ul><li>注意:<ol><li>链接里面不能再放链接</li><li>特殊情况链接&lt;a&gt;里面可以放块级元素,但是给&lt;a&gt;转换一下块级模式最安全</li></ol></li></ul></li><li><p>行内块元素:&lt;img/&gt;,&lt;input/&gt;,&lt;td&gt;.他们<span style="color:red">同时具有块元素和行内元素的特点</span>,有些资料称他们为行内元素</p><ol><li>和相邻的行内元素(行内块)再一行上,但是他们之间会有空白缝隙,一行可以显示多个(行内元素特点)</li><li>默认宽度就是它本身的宽度(行内元素的特点)</li><li>高度,行高,外边距都可以控制(块级元素的特点)</li></ol></li><li><p>元素显示模式转换:</p><ol><li><code>display:block</code>:行内元素转换为块级元素</li><li><code>display:inline</code>:块级元素转换为行内元素</li><li><code>display:inline-block</code>:转换为行内块元素</li></ol></li></ul><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ol><li>方式<code>line-height=height</code></li><li>原理:行间距(line-height)=上间距+文本高度(默认16px)+下间距,上下间距平分剩余大小</li></ol><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol><li>背景颜色:<code>background-color:red;</code>,默认是<span style="color:red">transparent</span></li><li>背景图片:<code>background-image:url();</code>,默认是none</li><li>背景平铺:<code>background-repeat:repeat;</code>,默认情况下是repeat</li></ol><table><thead><tr><th>属性:</th><th>值</th></tr></thead><tbody><tr><td>repeat:</td><td>平铺</td></tr><tr><td>no-repeat:</td><td>不平铺</td></tr><tr><td>repeat-y:</td><td>纵向平铺</td></tr><tr><td>repeat-x:</td><td>横向平铺</td></tr></tbody></table><ul><li>注意:页面元素可以添加背景颜色也可以添加背景图片  只不过背景图片会压住背景颜色</li></ul><ol start="4"><li>背景位置:<code>background-position:x y;</code>,可以使用<span style="color:red">方位名词</span>或者<span style="color:red">精确单位</span></li></ol><ul><li><p>参数是方位名词:<code>background-position:center top;</code></p><ul><li>其中方位名词,和顺序无关</li><li>如果只指定了一个方位名词,另一个省略,则第二个默认居中对齐<code>background-position:top;</code></li></ul></li><li><p>参数是精确单位:<code>background-position:20px 50px;</code></p><ul><li>其中x一定是第一个,第二个一定是y</li><li>如果只指定一个数值,那么该数值一定会是x坐标,另一个默认垂直居中<code>background-position:50px;</code></li></ul></li><li><p>参数是混合单位:<code>background-position:20px top;</code></p><ul><li>如果指定的两个值是精确单位和方位名词混合使用,则第一个值是x坐标,第二个值是y坐标</li></ul></li></ul><ol start="5"><li>背景图像固定(背景附着):<code>background-attachment:scroll;</code>,背景图像是否固定或者随着页面的其余部分滚动,<span style="color:red">默认:滚动</span></li></ol><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像是随着对象内容滚动</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><ol start="6"><li><p>背景复合写法<code>background:背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</code>,<span style="color:red">无顺序要求</span></p></li><li><p>背景图片半透明效果:<code>background:rgba(0,0,0,0.3)</code>,第四个参数(alpha透明度)取值范围在0~1之间</p></li></ol><table><thead><tr><th>属性</th><th>作用</th><th>值</th></tr></thead><tbody><tr><td>background-color</td><td>背景颜色</td><td>预定义/十六进制/RGB</td></tr><tr><td>background-img</td><td>背景图片</td><td>url(路径)</td></tr><tr><td>background-repeat</td><td>是否平铺</td><td>repeat/no-repeat/repeat-y/repeat-x</td></tr><tr><td>background-position</td><td>背景位置</td><td>length/position</td></tr><tr><td>background-attachment</td><td>背景附着</td><td>scroll(背景图像滚动) /fixed (背景图像固定)</td></tr></tbody></table><h2 id="css特性"><a href="#css特性" class="headerlink" title="css特性"></a>css特性</h2><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><ul><li>样式冲突,遵循就近原则,哪个样式离结构近,就执行哪一个</li><li>样式不冲突,不会层叠</li></ul><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><ul><li>恰当是使用继承性,可以降低css样式的复杂性</li><li>子元素可以继承父元素的样式(text-,font-,line-这些元素开头的可以继承,以及color属性)</li><li>行高的继承<code>font:12px/1.5 &quot;Microsoft YaHei&quot;</code>,1.5指行高是字体的1.5倍,也即是18px<ul><li>如果子元素没有设置行高,则会继承父元素的行高为1.5</li><li>此时子u元素的行高是:当前元素的字体大小*1.5</li></ul></li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul><li>选择器相同 执行层叠性</li><li>选择器不同,则根据<span style="color:red">选择器权重</span>执行</li></ul><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承或者*</td><td>0,0,0,0</td></tr><tr><td>元素选择器</td><td>0,0,0,1</td></tr><tr><td>类选择器,伪类选择器</td><td>0,0,1,0</td></tr><tr><td>ID选择器</td><td>0,1,0,0</td></tr><tr><td>行内样式style=””</td><td>1,0,0,0</td></tr><tr><td>!important重要的</td><td>无穷大</td></tr></tbody></table><p>注意:</p><ol><li>权重是有4组数字,不会有进位</li><li>从左向右判断,如果某一位数值相同,则判断下一位数值</li><li><span style="color:red">继承的权重是0,(重要)</span>,如果该元素没有直接选中,不管父元素权重多高,子元素得到的权重都是0</li></ol><ul><li>权重叠加:如果是复合选择器,则会有权重叠加,需要计算权重</li></ul><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="边框-border"><a href="#边框-border" class="headerlink" title="边框(border)"></a>边框(border)</h3><ul><li>简写:<code>border:border-width || border-style || border-color;</code>,没有顺序</li><li>分开写法:border-right/border-left/border-top/border-bottom  </li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>边框粗细,px</td></tr><tr><td>border-style</td><td>边框样式 实线:solid/ 虚线:dashed/ 点线dotted</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><ul><li><p>合并相邻边框<code>border-collapse:collapse;</code></p></li><li><p><span style="color:red">注意:</span></p><ol><li>测量盒子大小的时候,不量边框</li><li>如果测量的时候包含了边框,则需要width/height减去边框宽度</li></ol></li></ul><h3 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距(padding)"></a>内边距(padding)</h3><ol><li>padding属性用于设置内边距,即边框与内容之间的距离</li></ol><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding-top</td><td>上内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>padding:5px;</td><td>1个值代表上下左右都有5px</td></tr><tr><td>padding:5px 10px;</td><td>2个值代表上下内边距5px,左右内边距10px</td></tr><tr><td>padding:5px 10px 20px;</td><td>3个值,代表上内边距5px,左右10px,下20px</td></tr><tr><td>padding:5px 10px 20px 30px;</td><td>4个值,上是5px,右10px,下20px,左30px,顺时针</td></tr></tbody></table><ul><li><span style="color:red">注意:</span><ol><li>内容和边框有了距离,添加内边框</li><li>padding影响盒子实际大小</li><li>如果盒子有了高度和宽度,此时指定内边框,会撑大盒子<ul><li>解决方案: 让<span style="color:red">width/height减去多出来的内边距大小</span></li></ul></li><li>如果盒子本身没有指定width/height属性,则此时paddiong不会撑开盒子大小</li></ol></li></ul><h3 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距(margin)"></a>外边距(margin)</h3><ol><li>margin属性用于设置外边距,用于控制盒子与盒子之间的距离</li></ol><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><ol start="2"><li>外边距可以让块级盒子水平居中,但是必须要满足两个条件<ul><li>盒子必须指定宽度(width)</li><li><span style="color:red">盒子的左右的外边框都设置为auto</span></li></ul></li></ol><p><span style="color:red">注意:</span>以上方法是让块级元素水平居中,<span style="color:red">行内元素或者行内块元素水平居中给其父元素添加  text-align:center;即可</span></p><ol start="3"><li>嵌套块元素垂直外边距的塌陷<ul><li>对于来攻嵌套关系(父子关系)的块元素,父元素有上外边距同时子元素也有上外边据,此时父元素会塌陷较大的外边距值</li><li>解决方案:<ol><li>可以为父元素定义上边框</li><li>可以为父元素定义上内边框</li><li>可以为父元素添加<code>overflow:hidden</code>(不会增加盒子的大小)</li></ol></li></ul></li></ol><p><span style="color:red">注意:如果<code>margin:0 auto;</code>,会让div布局水平居中在浏览器中</span></p><h3 id="清除内外边距"><a href="#清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><span style="color:red">注意:行内元素为了照顾兼容性,尽量只设置左右内外边距,不要设置上下内外边距,但是转换为块级和行内块元素就可以了</span></p></blockquote><h2 id="css3新增"><a href="#css3新增" class="headerlink" title="css3新增"></a>css3新增</h2><h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><blockquote><p>css3:border-radius属性设置元素的外边框圆角<code>border-radius:length;</code>,length是圆的半径,用⚪替代矩形的角</p></blockquote><ol><li><p>如果是一个正方形,<code>border-radius:50%;</code>得到一个圆,50%就是高度的一半.</p></li><li><p>如果是一个矩形,设置高度的一半,得到一个圆角矩形</p></li><li><p>该属性是一个简写属性,可以写4个值,分别代表左上角,右上角,右下角,左下角<span style="color:red">border-top-left-radius/border-top-right-radius/border-bottom-right-radius/border-bottom-left-radius</span></p></li></ol><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><blockquote><p>css3:我们可以使用<code>box-shadow</code>属性为盒子添加阴影<br>语法:<code>box-shadow:h-shadow v-shadow blur spread color inset;</code></p></blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需,水平阴影的位置,允许负值</td></tr><tr><td>v-shadow</td><td>必需,垂直阴影的位置,允许负值</td></tr><tr><td>blur</td><td>可选,模糊距离(越大越模糊)</td></tr><tr><td>spread</td><td>可选,阴影的尺寸(大小)</td></tr><tr><td>color</td><td>可选,阴影的颜色</td></tr><tr><td>inset</td><td>可选,将外部阴影(outset)改为内部阴影</td></tr></tbody></table><p><span style="color:red">注意:</span></p><ol><li>默认的是外阴影(ouset),但是不可以写这个单词,否则导致阴影无效</li><li>盒子阴影不占用空间,不会影响其他盒子排列</li></ol><h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><blockquote><p>css3:我们可以使用<code>text-shadow</code>属性为盒子添加阴影<br>语法:<code>text-shadow:h-shadow v-shadow blur color;</code></p></blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需,水平阴影的位置,允许负值</td></tr><tr><td>v-shadow</td><td>必需,垂直阴影的位置,允许负值</td></tr><tr><td>blur</td><td>可选,模糊距离(越大越模糊)</td></tr><tr><td>color</td><td>可选,阴影的颜色</td></tr></tbody></table><h2 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h2><h3 id="浮动特性"><a href="#浮动特性" class="headerlink" title="浮动特性"></a>浮动特性</h3><blockquote><p>float属性用于创建浮动框,将其移动到一边,直到左边或右边缘及包含块或另一个浮动框的边缘<code>选择器&#123;float:属性值;&#125;</code></p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动(默认值)</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><ul><li><p>浮动特性:</p><ol><li><p><span style="color:red">浮动元素会脱离标准流</span></p><ul><li>浮动的盒子<span style="color:red">不再保留原先的位置</span></li></ul></li><li><p>浮动的元素会一行内显示并且元素顶部对齐</p><ul><li>如果多个盒子设置了浮动,则他们会按照属性值–行内显示并且顶端对齐排列</li><li><span style="color:red">注意:浮动的元素是相互考在一起的(不会右缝隙),如果父级宽度装不下这些浮动的盒子,多出的盒子会另起一行对齐</span></li></ul></li><li><p>浮动的元素会具有行内块元素的特性</p><ul><li>如果块级盒子没有设置宽度,默认宽度和父级一样宽,但是添加浮动后,他的大小根据内容来决定</li></ul></li></ol></li><li><p>浮动元素经常和标准流父元素搭配使用:用标准流的父元素排列上下位置,之后内部子元素采取浮动排列左右位置,符合网页布局的第一准则</p></li><li><p><span style="color:red">浮动的盒子只会影响盒子后面的标准流,不会影响前面的标准流</span></p></li></ul><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><blockquote><ul><li>父级盒子很多情况下,不方便给高度,但是子盒子浮动又不占有位置,最后父级盒子高度为0时,就会影响下面的白标准流盒子</li><li>由于浮动的元素不再占有原文档的位置,所以他会对后面的元素排版产生影响</li></ul></blockquote><ol><li>清楚浮动的本质:清楚浮动造成的影响</li><li>如果父盒子本身有高度,则不需要清楚浮动</li><li><span style="color:red">清楚浮动之后,父级就会根据浮动的子盒子自动检测高度.父级有了高度,就不会影响下面的标准流</span></li></ol><ul><li><code>clear:属性值;</code></li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素(清楚左侧浮动的影响)</td></tr><tr><td>right</td><td>不允许右侧有浮动元素(清楚右侧浮动的影响)</td></tr><tr><td>both</td><td>同时清楚左右两侧浮动的影响(通常用)</td></tr></tbody></table><ul><li><p>清楚浮动的方法</p><ol><li>额外标签法(隔墙法):<span style="color:red">缺点:结构化比较差</span></li></ol>   <pre class="line-numbers language-html" data-language="html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">.clear</span><span class="token punctuation">&#123;</span>     <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span>right</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span>right</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>不错<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 且新增的盒子必须是块级元素,不能是行内元素 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>父级添加overflow属性<span style="color:red">缺点:无法显示溢出部分</span></li></ol>   <pre class="line-numbers language-html" data-language="html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">overflow</span><span class="token punctuation">:</span>hidden</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span>right</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span>right</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>不错<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span>right</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>真的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>父级添加after伪元素<span style="color:red">优点:没有增加标签,结构简单</span></li></ol>  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">.clearfix:after</span><span class="token punctuation">&#123;</span>     <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>     <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>     <span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span>right</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span>right</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>不错<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span>right</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>真的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>父级添加双伪元素<span style="color:red">代码更简洁</span></li></ol>  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.clearfix:before,   .clearfix:after</span><span class="token punctuation">&#123;</span>     <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>     <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">.clearfix:after</span><span class="token punctuation">&#123;</span>     <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span>right</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span>right</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>不错<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span>right</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>真的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="定位的意义"><a href="#定位的意义" class="headerlink" title="定位的意义"></a>定位的意义</h3><blockquote><ol><li>浮动可以让多个块级盒子一行没有缝隙排列显示,经常用于横向排列盒子</li><li>定位则是可以让盒子自由的在某个盒子内移动位置或者固定在屏幕中某个位置,并且可以压住其他盒子</li></ol></blockquote><h3 id="定位的组成"><a href="#定位的组成" class="headerlink" title="定位的组成"></a>定位的组成</h3><blockquote><ul><li>定位:将盒子定在某一个位置,所以定位也是摆放盒子,按照定位的方式移动盒子.<span style="color:red">定位=定位模式+边偏移</span></li><li>定时模式用于指定元素在文档中的定位方式.边偏移则决定了该元素的最终位置</li></ul></blockquote><ol><li>定位模式:通过css的<code>position</code>属性来设定</li></ol><table><thead><tr><th>值</th><th>语义</th></tr></thead><tbody><tr><td>static</td><td>静态定位</td></tr><tr><td>relative</td><td>相对定位</td></tr><tr><td>absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr></tbody></table><ol start="2"><li>边偏移:top,bottom,left,right4个值(相对于父元素而言)</li></ol><h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><ul><li>按照标准流特性摆放,没有边偏移</li></ul><h3 id="相对定位relative"><a href="#相对定位relative" class="headerlink" title="相对定位relative"></a>相对定位relative</h3><ul><li><p>相对定位是元素移动的时候,相对于原来的位置来说<code>position:relative;</code></p></li><li><p>特点:</p><ol><li>他是相对于子级原来的位置移动的(<span style="color:red">移动位置的时候参照点是自己原来的位置</span>)</li><li>原来在标准流的位置继续占有,后面的盒子任然以标准流的方式对待它(<span style="color:red">不脱标,继续保留原来的位置</span>)</li></ol></li></ul><h3 id="绝对定位absolute"><a href="#绝对定位absolute" class="headerlink" title="绝对定位absolute"></a>绝对定位absolute</h3><ul><li><p>绝对定位是在元素移动位置的时候,相对于它祖先元素来说的<code>position:absoulte;</code></p></li><li><p>特点:</p><ol><li>如果没有祖先元素或者祖先元素没有定位,以浏览器定位为准(Document文档)</li><li>如果祖先元素有定位(相对,绝对,固定),则以最近一级的有定位祖先元素为参考点移动位置</li><li>绝对定位<span style="color:red">不再占有原来的位置</span>(脱离标准流)</li></ol></li></ul><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><ol><li>子级绝对定位,不会占有位置,可以放到父盒子里面的任何一个地方,不会影响其它的兄弟盒子</li><li>父盒子需要加定位限制子盒子在父盒子内显示</li><li>父盒子布局时,需要占有位置,因此父亲只能是相对定位</li></ol><h3 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位(fixed)"></a>固定定位(fixed)</h3><ul><li><p>固定定位是固定于浏览器的可视区的位置,可在浏览器滚动时元素的位置不会改变<code>position:fixed;</code></p></li><li><p>特点:</p><ol><li>以浏览器的可是窗口为参照点移动元素. <ul><li>跟父元素没有任何关系</li><li>不随滚动条移动</li></ul></li><li>固定定位<span style="color:red">不再占有原先的位置</span><ul><li>固定定位也是脱标的,其实固定定位也可以看作是一种特殊的绝对定位</li></ul></li></ol></li></ul><h3 id="粘性定位-sticky"><a href="#粘性定位-sticky" class="headerlink" title="粘性定位(sticky)"></a>粘性定位(sticky)</h3><ul><li><p>粘性定位可以被认为是相对定位和固定定位的混合<code>position:sticky;</code></p></li><li><p>特点:</p><ol><li>以浏览的可视窗口为参照点移动元素(固定定位特点)</li><li>粘性定位占有原先的位置(相对定位特点)</li><li>必须添加top,bottom,left,right其中一个才有效</li></ol></li></ul><h3 id="定位叠放次序z-index"><a href="#定位叠放次序z-index" class="headerlink" title="定位叠放次序z-index"></a>定位叠放次序z-index</h3><blockquote><p>使用z-index来控制盒子的前后次序(z轴)<code>z-index:1;</code></p></blockquote><ul><li>数值可以是正整数,负整数或0,默认是auto,数值越大,盒子越靠上</li><li>如果属性相同,则按照书写顺序,后来居上</li><li>数字后面不能加单位</li><li>只有定位的盒子才有z-index</li></ul><h3 id="绝对定位盒子居中"><a href="#绝对定位盒子居中" class="headerlink" title="绝对定位盒子居中"></a>绝对定位盒子居中</h3><ol><li>水平居中</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.class</span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><span class="token comment">/* 父容器宽度的一半 */</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span>-100px<span class="token punctuation">;</span><span class="token comment">/* margin负值,往左边走,自己盒子宽度的一半 */</span>  <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>垂直居中</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.class</span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><span class="token comment">/* 父容器高度的一半 */</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span>-100px<span class="token punctuation">;</span><span class="token comment">/* margin负值,往上边走,自己盒子高度的一半 */</span>  <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定位的特殊性"><a href="#定位的特殊性" class="headerlink" title="定位的特殊性"></a>定位的特殊性</h3><ol><li>行内元素添加绝对或者固定定位,可以直接设置高度和宽度</li><li>块级元素添加绝对或者固定定位,如果不给宽度或者高度,默认是内容的大小</li><li>绝对定位(固定定位)会完全压住盒子.浮动元素不会,只会眼珠它下面的标准流盒子,但是不会压住标准流盒子里面的文字,<span style="color:red">浮动可以做文字环绕效果.</span></li></ol><h2 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><ul><li><code>display:none;</code>隐藏对象,<span style="color:red">不再占有原来的位置</span></li><li><code>display:block;</code>除了转换为块级元素之外,同时还有显示元素的意思</li></ul><h3 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h3><ul><li><code>visibility:visible;</code>元素可见</li><li><code>visibility:hidden;</code>元素隐藏<span style="color:red">继续占有原来的位置</span></li></ul><h3 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h3><ul><li><code>overflow:visible;</code>,默认值,显示可见</li><li><code>overflow:hidden;</code>,隐藏溢出</li><li><code>overflow:scroll;</code>,不管有没有溢出都显示滚动条</li><li><code>overflow:auto;</code>,有溢出,才显示滚动条</li></ul><h2 id="CSS技巧"><a href="#CSS技巧" class="headerlink" title="CSS技巧"></a>CSS技巧</h2><h3 id="字体图标iconfont"><a href="#字体图标iconfont" class="headerlink" title="字体图标iconfont"></a>字体图标iconfont</h3><blockquote><p>字体图白哦展示的是图标,本质属于字体</p></blockquote><h3 id="css三角"><a href="#css三角" class="headerlink" title="css三角"></a>css三角</h3><ul><li>普通三角形</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.box</span><span class="token punctuation">&#123;</span>    <span class="token property">weight</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span>50px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-left-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span>100px auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>提示框:矩形加三角</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.box</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span>120px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>40px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.box span</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span>15px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span>-10px<span class="token punctuation">;</span>    <span class="token property">weight</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 5px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-bottom-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h3><blockquote><p>鼠标样式:<code>cursor:pointer;</code></p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>not-allowed</td><td>禁止</td></tr></tbody></table><h3 id="表单轮廓线"><a href="#表单轮廓线" class="headerlink" title="表单轮廓线"></a>表单轮廓线</h3><ul><li><code>input&#123;outline:none;&#125;</code>,取消表单轮廓线</li><li><code>textarea&#123;resize:none;&#125;</code>,防止拖拽文本域</li></ul><h3 id="vertical-align-属性的应用"><a href="#vertical-align-属性的应用" class="headerlink" title="vertical-align 属性的应用"></a>vertical-align 属性的应用</h3><blockquote><p>经常用于设置图片或者表单(行内块)和文字的垂直对齐.<br>官方解释:用于设置一个元素的垂直对齐方式,但是只针对域行内块元素或者行内元素有效</p></blockquote><ul><li>语法:<code>vertical-align:baseline | top | middle | bottom;</code></li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>默认.元素放在父元素的基线上</td></tr><tr><td>top</td><td>把元素的顶端域行中最高元素的顶端对齐</td></tr><tr><td>middle</td><td>把此元素放置在父元素的中部</td></tr><tr><td>bottom</td><td>把元素的顶端与行中最低元素的顶端对齐</td></tr></tbody></table><h3 id="解决图片底部默认空白缝隙问题"><a href="#解决图片底部默认空白缝隙问题" class="headerlink" title="解决图片底部默认空白缝隙问题"></a>解决图片底部默认空白缝隙问题</h3><ul><li>图片底侧会有一个空白缝隙,愿意是行内块元素和文字的基线对齐</li><li>解决:<ol><li>给图片添加 <code>vertical-align: top | middle | bottom等;</code>(提倡)</li><li>把图片转换为块级元素<code>display:block;</code></li></ol></li></ul><h3 id="溢出文字的省略号显示"><a href="#溢出文字的省略号显示" class="headerlink" title="溢出文字的省略号显示"></a>溢出文字的省略号显示</h3><ul><li>单行文本溢出显示省略号–满足三个条件</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.class</span><span class="token punctuation">&#123;</span>  <span class="token comment">/* 1.先强制一行内显示文本 */</span>  <span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span><span class="token comment">/* 默认normal是自动换行 */</span>  <span class="token comment">/* 2.超出部分隐藏 */</span>  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>  <span class="token comment">/* 3.文字用省略号替代超出的部分 */</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>单行文本溢出显示省略号–满足三个条件(适用于webKit浏览器或移动端)</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.class</span><span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>  <span class="token comment">/* 弹性伸缩盒子模型显示 */</span>  <span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span>  <span class="token comment">/* 限制在一个块元素显示的文本行数 */</span>  <span class="token property">-webkit-line-clamo</span><span class="token punctuation">:</span>2<span class="token punctuation">;</span>  <span class="token comment">/* 设置或检索伸缩盒对象的子元素排列方式 */</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a>常见布局技巧</h3><ul><li><p>margin负值的妙用</p><ol><li>让每个盒子margin往左侧移动-1px正好压住相邻盒子边框</li><li>鼠标经过某个盒子的时候,提高当前盒子的层级即可(如果没有定位,则加相对定位(保留位置),如果有定位,则加z-index)</li></ol></li><li><p>文字围绕浮动元素(浮动)</p></li><li><p>直角三角形</p></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span>100px solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right</span><span class="token punctuation">:</span>50px solid skyblue<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span>0 solid blue<span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span>0 solid green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS3和HTML5"><a href="#CSS3和HTML5" class="headerlink" title="CSS3和HTML5"></a>CSS3和HTML5</h2><h3 id="Html5新增的标签"><a href="#Html5新增的标签" class="headerlink" title="Html5新增的标签"></a>Html5新增的标签</h3><ol><li><p>语义化标签</p><ul><li><code>&lt;header&gt;</code>头部标签</li><li><code>&lt;nav&gt;</code>导航标签</li><li><code>&lt;article&gt;</code>内容标签</li><li><code>&lt;section&gt;</code>定义文档某个区域</li><li><code>&lt;aside&gt;</code>侧边栏标签</li><li><code>&lt;footer&gt;</code>尾部标签</li></ul></li><li><p>视频标签</p><ul><li><code>&lt;video src=&quot;url&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;</code>视频标签</li></ul></li></ol><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>视频就绪自动播放(谷歌浏览器需要添加<code>muted=&quot;muted&quot;</code>来解决)</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示播放控件</td></tr><tr><td>width</td><td>pixels(像素)</td><td>设置播放器宽度</td></tr><tr><td>height</td><td>pixels(像素)</td><td>设置播放器高度</td></tr><tr><td>loop</td><td>loop</td><td>播放完是否继续播放该视频，循环播放</td></tr><tr><td>preload</td><td>proload</td><td>是否等加载完再播放</td></tr><tr><td>src</td><td>url</td><td>视频url地址</td></tr><tr><td>poster</td><td>Imgurl</td><td>加载等待的画面图片</td></tr><tr><td>autobuffer</td><td>autobuffer</td><td>设置为浏览器缓冲方式，不设置autopaly才有效</td></tr><tr><td>muted</td><td>muted</td><td>静音播放</td></tr></tbody></table><ol start="3"><li>音频标签<ul><li><code>&lt;audio src=&quot;url&quot; controls=&quot;controls&quot;&gt;&lt;/audio&gt;</code>音频标签</li></ul></li></ol><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>音频就绪自动播放</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示播放控件</td></tr><tr><td>loop</td><td>loop</td><td>播放完是否继续播放该音频，循环播放</td></tr><tr><td>src</td><td>url</td><td>音频url地址</td></tr></tbody></table><ul><li>注意:谷歌浏览器把音频和视频自动播放禁止了</li></ul><ol start="4"><li>新增input类型</li></ol><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>type=”email”</td><td>避免自己编写js代码对邮箱格式进行校验</td></tr><tr><td>type=”tel”</td><td>该类型没有对输入内容进行校验,在移动端输入时弹出数字键盘;</td></tr><tr><td>type=”url”</td><td>对输入的网址内容合法性校验,且必须以http或https开头;</td></tr><tr><td>type=”number”</td><td>表示该文本框只能输入数字(包括小数点)</td></tr><tr><td>type=”search”</td><td>表示搜索时的文本框,该文本框输入时有提示,右侧有删除的”X”号可以将文本框清空;</td></tr><tr><td>type=”range”</td><td>表示范围:</td></tr><tr><td>type=”data”</td><td>表示必须输入日期类型</td></tr><tr><td>type=”time”</td><td>表示必须输入为日期类型</td></tr><tr><td>type=”month”</td><td>表示必须输入月类型</td></tr><tr><td>type=”month”</td><td>表示必须输入月类型</td></tr><tr><td>type=”color”</td><td>表示必须输入颜色类型</td></tr></tbody></table><ol start="5"><li>表单新增属性</li></ol><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>autofocus</td><td>autofocus</td><td>自动获取焦点</td></tr><tr><td>autocomplete</td><td>off/on</td><td>当用户在字段开始键入时,浏览器基于之前键入过的值,应该显示出在字段中填写的选项默认已经打开,自动匹配 off关掉自动匹配,在表单内,同时加上name且成功提交</td></tr><tr><td>required</td><td>required</td><td>表单拥有该属性表示其内容不能为空,必填</td></tr><tr><td>placeholder</td><td>文本内容</td><td>表单的提示信息,存在默认值将不显示</td></tr><tr><td>multiple</td><td>multiple</td><td>可以多选文件提交</td></tr></tbody></table><h3 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h3><ol><li>属性选择器</li></ol><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E[att]</td><td>选择具有att属性的E元素</td></tr><tr><td>E[att=”val”]</td><td>选择具有att属性且属性值等于val的E元素</td></tr><tr><td>E[att^=”val”]</td><td>匹配具有att属性且值以val开头的E元素</td></tr><tr><td>E[att$=”val”]</td><td>匹配具有att属性且值以val结尾的E元素</td></tr><tr><td>E[att*=”val”]</td><td>匹配具有att属性且值中含有的E元素</td></tr></tbody></table><ol start="2"><li>结构伪类选择器:主要根据<span style="color:red;">文档结构</span>,常用于根据父级选择器里的子元素</li></ol><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配父元素中的第一个元素E</td></tr><tr><td>E:last-child</td><td>匹配父元素中的最后一个元素E</td></tr><tr><td>E:nth-child(n)</td><td>匹配父元素中的第n个元素E</td></tr><tr><td>E:first-of-type</td><td>指定类型E的第一个</td></tr><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr><tr><td>E:nth-of-type(n)</td><td>指定类型E的第n个</td></tr></tbody></table><ul><li>nth-child(n) 选择某个父元素的一个或多个特定的子元素<ul><li>n可以是数字,关键字和公式</li><li>n如果是数字,就是第n个子元素,里面数字从1开始</li><li>n可以是关键字:even是偶数,odd是奇数</li><li>n可以是公式:常见的公式如下(如果n是公式,则从0开始计算,但是第0个元素或者超出的元素会被忽略)</li></ul></li></ul><table><thead><tr><th>公式</th><th>取值</th></tr></thead><tbody><tr><td>2n</td><td>偶数</td></tr><tr><td>2n+1</td><td>奇数</td></tr><tr><td>5n</td><td>5  10 ….</td></tr><tr><td>n+5</td><td>从第五个开始(包含第五个)到最好</td></tr><tr><td>-n+5</td><td>前五个(包含第五个)</td></tr></tbody></table><ul><li>注意:<code>nth-child(n)</code>给所有元素都排列序号,要求选择器与标签匹配得当</li><li>注意:<code>nth-of-type(n)</code>给指定元素都排列序号</li></ul><ol start="3"><li>伪元素选择器</li></ol><p>选择器           简介<br>::before        在元素内部的前面插入内容<br>::before        在元素内部的后面插入内容</p><ul><li><span style="color:red;">注意</span><ol><li>before和after创建一个元素,但是属于行内元素</li><li>新创建的这个元素在文档树中是找不到的,</li><li>语法<code>element::before&#123;&#125;</code></li><li>before和after必须有content属性</li><li>before在父元素内容的前面创建元素.after在父元素内容的后面插入元素</li><li>伪元素选择器和标签选择器一样,权重为1</li></ol></li></ul><h3 id="CSS3盒子模型-box-sizing"><a href="#CSS3盒子模型-box-sizing" class="headerlink" title="CSS3盒子模型(box-sizing)"></a>CSS3盒子模型(box-sizing)</h3><ol><li><code>box-sizing:content-box;</code>盒子大小为width+padding+border(默认的)</li><li><code>box-sizing:border-box;</code>盒子默认大小是width</li></ol><ul><li>如果盒子模型改为<code>box-sizing:border-box;</code>,那么padding和border就不会撑大盒子(前提padding和border不会超过width的宽度)</li></ul><h3 id="CSS3其它特性"><a href="#CSS3其它特性" class="headerlink" title="CSS3其它特性"></a>CSS3其它特性</h3><ul><li>滤镜filter:<code>filter:函数();</code>例如:<code>filter:blur(5px);</code>blur模糊处理,数值越大越模糊</li><li>calc函数:<code>width:calc(100%-30px)</code>,可以用来加减乘除计算</li></ul><h3 id="CSS3过渡-重点"><a href="#CSS3过渡-重点" class="headerlink" title="CSS3过渡(重点)"></a>CSS3过渡(重点)</h3><p><code>transition:要过度的属性 花费时间 运动曲线 何时开始;</code></p><ol><li>属性:想要变化的css属性,宽度高度 背景颜色 内外边距都可以.如果想要所有的属性都变化过度,写一个all就可以</li><li>花费时间: 单位是秒,(必须写单位)</li><li>运动曲线:默认是ease(可以省略)</li><li>何时开始:单位是 秒,可以设置延迟触发事件 默认是0s(可以省略)</li></ol><h2 id="CSS3动画"><a href="#CSS3动画" class="headerlink" title="CSS3动画"></a>CSS3动画</h2><h3 id="2D转换translate"><a href="#2D转换translate" class="headerlink" title="2D转换translate"></a>2D转换translate</h3><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">.class&#123;  transform:translate(x,y);&#x2F;* 或者分开写 *&#x2F;  transform:translateX(n);  transform:translateY(n);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>沿着x,y轴运动</p></li><li><p>translate不会影响到其它的元素</p></li><li><p>translate的百分比是相对于自身元素的translate(50%,50%)</p></li><li><p>对行内标签无效</p></li><li><p>居中</p></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.class</span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>   <span class="token property">left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><span class="token comment">/* 父容器宽度的一半 */</span>   <span class="token property">top</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><span class="token comment">/* 父容器高度的一半 */</span><span class="token comment">/*   margin-left:-100px;   margin-top:-100px;*/</span>  <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="旋转rotate"><a href="#旋转rotate" class="headerlink" title="旋转rotate"></a>旋转rotate</h3><ol><li><p><code>transform:rotate(度数);</code></p></li><li><p>注意</p><ul><li>rotate里面跟度数,单位是deg,比如<code>rotate(45deg)</code></li><li>角度为正时,顺时针,负时逆时针</li><li>默认旋转的中心点时元素的中心点</li></ul></li></ol><h3 id="旋转中心点transform-origin"><a href="#旋转中心点transform-origin" class="headerlink" title="旋转中心点transform-origin"></a>旋转中心点transform-origin</h3><ol><li><p><code>transform-origin:x y;</code></p></li><li><p>注意</p><ul><li>参数用空格隔开</li><li>x y默认转换的中心点时元素的中心点(50% 50%)等价于(center center)</li><li>还可以给x y设置 像素 或者 方位名词( top bottom left right center)</li></ul></li></ol><h3 id="缩放scale"><a href="#缩放scale" class="headerlink" title="缩放scale"></a>缩放scale</h3><ol><li><p><code>transform:scale(x,y);</code></p></li><li><p>注意:</p><ul><li>注意x和y用,隔开</li><li><code>transform:scale(1,1);</code>宽和高都放大一倍,相当于没变</li><li><code>transform:scale(2,2);</code>宽和高都放大了2倍</li><li><code>transform:scale(2);</code> 只写了一个参数,那第二个参数和第一个一样是scale(2,2)</li><li><code>transform:scale(0.5,0.5);</code>缩小</li><li>scale缩放最大的优势:可以设置旋转中心缩放,默认以中心点缩放,而且不影响其它盒子</li></ul></li></ol><blockquote><p><span style="color:red">注意</span></p></blockquote><ol><li>同时使用多个转换,其格式为<code>transform:tranlate() rotate() scale()...</code></li><li>顺序会影响旋转效果(先旋转会改变坐标轴方向)</li><li>当同时又位移和其它属性时,记得要将位移放到最前面</li></ol><h3 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h3><ul><li>制作动画:<ol><li>先定义动画</li><li>在调用动画</li></ol></li></ul><ol><li>用keyframes定义动画(类似定义类选择器)</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframs</span> move</span><span class="token punctuation">&#123;</span>  <span class="token selector">0%</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">div</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span>100px auto<span class="token punctuation">;</span>  <span class="token comment">/* 调用动画 */</span>  <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span><span class="token comment">/* 动画名称 */</span>  <span class="token comment">/* 持续时间 */</span>  <span class="token property">animation-duration</span><span class="token punctuation">:</span>0.5s<span class="token punctuation">;</span><span class="token comment">/* 持续时间 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>0%是动画的开始.100%是动画的完成</li><li>在<code>@keyframs</code>中规定某项CSS样式,就能创建由当前样式初见改为新样式的动画效果</li><li>动画是是使元素从一种样式逐渐变化为另一种样式说的效果可以改变任意多的样式任意多的次数</li><li>请用百分比来规定变化发生的时间,或用关键词<code>&quot;from&quot;</code>和<code>&quot;to&quot;</code>,等同于0%和100%</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframs</span> move</span><span class="token punctuation">&#123;</span>  <span class="token selector">from</span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">to</span><span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>1000px<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">div</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span>100px auto<span class="token punctuation">;</span>  <span class="token comment">/* 调用动画 */</span>  <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span><span class="token comment">/* 动画名称 */</span>  <span class="token comment">/* 持续时间 */</span>  <span class="token property">animation-duration</span><span class="token punctuation">:</span>0.5s<span class="token punctuation">;</span><span class="token comment">/* 持续时间 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性。除了animation-play-state</td></tr><tr><td>animation-name</td><td>规定 @keyframes 动画的名称。(必须写)</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒。默认是 0。(必写)</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线。默认是 “ease”</td></tr><tr><td>animation-fill-mode</td><td>规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。默认是backwards,回到起始状态,forwards是停留在结束状态</td></tr><tr><td>animation-delay</td><td>规定动画何时开始。默认是 0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数。默认是 1。<code>infinite</code>(指无限循环)</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向地播放。默认是 “normal”,alternate是反方向走回来,而不是直接跳回来</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是 “running”,暂停是pause</td></tr></tbody></table><ul><li><p>动画简写: <code>animate:动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态</code></p></li><li><p><code>animation-timing-function</code></p></li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的.匀速</td></tr><tr><td>ease</td><td>默认.动画以低速开始,然后加快,在结束前变慢</td></tr><tr><td>ease-in</td><td>动画以低速开始</td></tr><tr><td>ease-out</td><td>动画以低速结束</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束</td></tr><tr><td>steps()</td><td>指定了时间函数中的间隔数量(步长)</td></tr></tbody></table><h3 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h3><ul><li><p>主要内容</p><ul><li>3D位移(简写):<code>transform:translate3d(x,y,z);</code><ul><li><code>transform:translateX(100px);</code>仅仅是在x轴上运动  </li><li><code>transform:translateY(100px);</code>仅仅是在y轴上运动  </li><li><code>transform:translateZ(100px);</code>仅仅是在z轴上运动(后面的单位一般跟px) </li></ul></li><li>透视:<code>perspective:200px;</code>单位像素,数值越大物体越大,数值越小越立体<ul><li><span style="color:red">透视写在被观察元素的父盒子上面</span></li><li>视距是一个人眼睛到屏幕的距离</li><li>z是z周,物体距离屏幕的距离,z轴越大,看到的物体越大</li></ul></li><li>3D呈现<code>transform-style</code><ul><li>控制子元素是否开启三维立体环境</li><li><code>transform-style:flat;</code>子元素不开启sd立体空间,默认</li><li><code>transform-style:preserve-3d;</code>子元素开启sd立体空间</li><li>代码写给父级,但是影响的是子盒子</li><li>重要</li></ul></li></ul></li><li><p>3D旋转rotate3d</p><ul><li><code>transform:rotateX(45deg)</code>: 沿着x轴正方向旋转45度<ul><li>左手准则:拇指沿着x正轴,四指弯曲的方向就是旋转方向</li></ul></li><li><code>transform:rotateY(45deg)</code>: 沿着Y轴正方向旋转45度<ul><li>左手准则:拇指沿着y正轴,四指弯曲的方向就是旋转方向(正值)</li></ul></li><li><code>transform:rotateZ(45deg)</code>: 沿着Z轴正方向旋转45度</li><li><code>transform:rotatesd(x,y,z,deg)</code>: 沿着自定义方向旋转deg度<ul><li>x,y,z表示矢量 <code>transform:rotatesd(1,1,0,deg)</code>(即对角线)</li></ul></li></ul></li></ul><h2 id="移动端布局"><a href="#移动端布局" class="headerlink" title="移动端布局"></a>移动端布局</h2><h3 id="meta视口"><a href="#meta视口" class="headerlink" title="meta视口"></a>meta视口</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,user-scalable=no,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>属性                 解释说明<br>width                宽度是指的是viewport宽度,可以设置device-width<br>initial-scale        初始缩放比例,大于0的数字<br>maximum-scale        最大缩放比例,大于0的数字<br>minimum-scale        最小缩放比例,大于0的数字<br>user-scalable        用户可以缩放,yes或no(1或0)</p><h3 id="物理像素和物理像素比"><a href="#物理像素和物理像素比" class="headerlink" title="物理像素和物理像素比"></a>物理像素和物理像素比</h3><h3 id="多倍图"><a href="#多倍图" class="headerlink" title="多倍图"></a>多倍图</h3><ol><li>二倍图:手机端图片模糊处理方法</li><li><code>background-size:背景图片宽度 背景图片高度;</code><ul><li>单位:  长度|百分比|cover|contain</li><li>cover把背景图像扩展至足够大,以使背景图像完全覆盖背景区域(可能有背景图片显示不全)</li><li>contain把图像扩展至最大尺寸(等比例拉伸,宽或者高铺满div盒子就不再拉伸了,可能有部分空白区域),以使其宽度和高度完全适应内容区域</li></ul></li></ol><h3 id="开发方案"><a href="#开发方案" class="headerlink" title="开发方案"></a>开发方案</h3><ol><li><p>单独制作移动端页面</p><ul><li>流式布局(百分比布局)<ul><li>max-width 最大宽度(max-height 最大高度) </li><li>min-width 最小宽度(min-height 最小高度) </li></ul></li><li>flex弹性布局</li><li>less+rem+媒体查询</li><li>混合布局</li></ul></li><li><p>响应式</p><ul><li>媒体查询</li><li>bootstrap</li></ul></li></ol><h3 id="特殊样式"><a href="#特殊样式" class="headerlink" title="特殊样式"></a>特殊样式</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span>border-box<span class="token punctuation">;</span>  <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span>border-box<span class="token punctuation">;</span>  <span class="token comment">/* 点击高亮我们需要清楚  设置为transparent 完成透明*/</span>  <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span>transparent<span class="token punctuation">;</span>  <span class="token comment">/* 在移动端浏览器默认的外观在ios上加这个属性才能给按钮和输入框自定义样式 */</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">/* 禁用长按页面时的弹出菜单 */</span>  <span class="token selector">a,img</span><span class="token punctuation">&#123;</span><span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><h3 id="布局原理"><a href="#布局原理" class="headerlink" title="布局原理"></a>布局原理</h3><ol><li>当为父盒子设为flex布局以后,子元素的float,clear和vertical-align属性将失效</li><li>通过给父盒子添加flex属性,来控制子盒子的位置和排列方式</li></ol><h3 id="父元素属性"><a href="#父元素属性" class="headerlink" title="父元素属性"></a>父元素属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>flex-direction</td><td>设置主轴方向</td></tr><tr><td>justify-content</td><td>设置主轴上的子元素排列方向</td></tr><tr><td>flex-wrap</td><td>设置子元素是否换行</td></tr><tr><td>align-content</td><td>设置侧轴上的子元素的排列方式(多行)</td></tr><tr><td>align-items</td><td>设置侧轴上的子元素的排列方式(单行)</td></tr><tr><td>flex-flow</td><td>复合属性,相当于你是设置了flex-direction和flex-wrap</td></tr></tbody></table><ul><li><code>flex-direction</code>设置主轴方向,子元素跟着主轴来排列</li></ul><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>(默认值)从左到右</td></tr><tr><td>row-reverse</td><td>从右到左</td></tr><tr><td>column</td><td>从上到下</td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table><ul><li><code>justify-content</code> : 设置主轴上的子元素排列方向<ul><li><span style="color:red">注意:使用这个一定要确定主轴是哪一个</span></li></ul></li></ul><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>(默认值)从头部开始 , 如果主轴是x轴,则从左到右</td></tr><tr><td>flex-end</td><td>从尾部开始排列</td></tr><tr><td>center</td><td>在主轴居中对齐(如果主轴是x轴,则水平居中)</td></tr><tr><td>space-around</td><td>平分剩余空间</td></tr><tr><td>space-between</td><td>先两边贴边 再平分剩余空间(重要)</td></tr></tbody></table><ul><li><code>flex-wrap</code>  设置子元素是否换行</li></ul><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>nowrap</td><td>(默认值),不换行</td></tr><tr><td>wrap</td><td>换行</td></tr></tbody></table><ul><li><code>align-items</code>  设置侧轴上的子元素的排列方式(单行)</li></ul><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>从上到下</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td>center</td><td>挤在一起居中(垂直居中)</td></tr><tr><td>stretch</td><td>拉伸(默认值)</td></tr></tbody></table><ul><li><code>align-content</code> 设置侧轴上的子元素的排列方式(多行)<ul><li><span style="color:red">注意:设置子项在侧轴上的排列方式并且只能用于子项出现换行的情况(多行),在单行下是没有效果的</span></li></ul></li></ul><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>(默认值)在侧轴的头部开始排列</td></tr><tr><td>flex-end</td><td>侧轴的尾部开始排列</td></tr><tr><td>center</td><td>在侧轴中间显示</td></tr><tr><td>stretch</td><td>设置子项元素高度平分父元素高度</td></tr><tr><td>space-around</td><td>子项在侧轴平分剩余空间</td></tr><tr><td>space-between</td><td>子项在侧轴先分布两头 再平分剩余空间</td></tr></tbody></table><ul><li><code>flex-flow</code>  复合属性,相当于你是设置了flex-direction和flex-wrap,语法:例<code>flex-flow:column wrap;</code></li></ul><h3 id="子元素常见属性"><a href="#子元素常见属性" class="headerlink" title="子元素常见属性"></a>子元素常见属性</h3><ol><li>flex属性:定义子项目分配剩余空间,用flex来表示占多少分数</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span><span class="token punctuation">&#123;</span>  <span class="token property">flex</span><span class="token punctuation">:</span>number<span class="token punctuation">;</span><span class="token comment">/* default 0 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>flex的复合属性:<code>flex:flex-grow flex-shrink flex-basis</code></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>flex-grow</td><td>定义放大比例，默认为0，规定项目相对于其他灵活的项目进行扩展的量</td></tr><tr><td>flex-shrink</td><td>定义了项目的缩小比例，仅在宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值，默认为1</td></tr><tr><td>flex-basis</td><td>给上面两个属性分配多余空间之前, 计算项目是否有多余空间, 默认值为 auto, 即项目本身的大小</td></tr></tbody></table><ol start="2"><li><code>align-self</code> 控制子项自己在侧轴上的排列方式</li></ol><ul><li><span style="color:red">注意:align-self属性允许单个项目有与其它项目不一样的对齐方式,可覆盖align-items属性</span>默认值auto,表示继承父元素的align-items属性,如果没有父元素,则等同于stretch</li></ul><ol start="3"><li><code>order</code>属性定义项目的排列顺序</li></ol><ul><li>数值越小,排列越靠前,默认为0</li><li>注意:和<code>z-index</code>不一样</li></ul><h3 id="rem单位"><a href="#rem单位" class="headerlink" title="rem单位"></a>rem单位</h3><ol><li>rem是一个相对单位</li><li>rem的基准是相对于html元素的字体大小</li></ol><h3 id="媒体查询-Media-Query"><a href="#媒体查询-Media-Query" class="headerlink" title="媒体查询(Media Query)"></a>媒体查询(Media Query)</h3><ul><li><p>@media可以针对不同的屏幕尺寸设置不同的样式</p></li><li><p>语法规范:<code>@media mediatype and|not|only (media feature)&#123;CSS-Code;&#125;</code></p><ul><li><p>用@media开头,注意@符号</p></li><li><p>mediatype 媒体类型</p><table><thead><tr><th>值</th><th>解释说明</th></tr></thead><tbody><tr><td>all</td><td>所有设备</td></tr><tr><td>print</td><td>用于打印机和打印预览</td></tr><tr><td>scree</td><td>用于电脑屏幕,平板电脑,智能手机等</td></tr></tbody></table></li><li><p>关键字 and|not|only</p><ul><li>and:可以将多个媒体特性链接到一起,相当于且</li><li>not:排除某个媒体类型,相当于非的意思,可以省略</li><li>only:指定某个特定的媒体类型,可以省略 </li></ul></li><li><p>media future 媒体特性 必须有小括号包含</p><table><thead><tr><th>值</th><th>解释说明</th></tr></thead><tbody><tr><td>width</td><td>定义输出设备中页面可见区域的宽度</td></tr><tr><td>min-width</td><td>定义输出设备中页面最小可见区域的宽度</td></tr><tr><td>max-width</td><td>定义输出设备中页面最大可见区域的宽度</td></tr></tbody></table></li></ul></li><li><p>例:</p></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 表示在频幕上并且最大的宽度是800px,只有在800px以下,才能设置成我们想要的样式 */</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span><span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>800px<span class="token punctuation">)</span></span><span class="token punctuation">&#123;</span>    <span class="token selector">body</span><span class="token punctuation">&#123;</span>       <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="媒体查询-rem实现元素动态大小变化"><a href="#媒体查询-rem实现元素动态大小变化" class="headerlink" title="媒体查询+rem实现元素动态大小变化"></a>媒体查询+rem实现元素动态大小变化</h3><h3 id="引入资源"><a href="#引入资源" class="headerlink" title="引入资源"></a>引入资源</h3><ul><li>针对不同的媒体使用不同的stylesheets(样式表),就是在link中判断设备的尺寸,然后应用css文件</li></ul><blockquote><p>语法:<code>&lt;link rel=&quot;stylesheet&quot; media=&quot;mediatype and|not|only (media feature)&quot;&gt; href=&quot;url&quot;</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的一些小问题</title>
      <link href="/2021/08/26/git-tui-song-de-wen-ti/"/>
      <url>/2021/08/26/git-tui-song-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="关于ssh连接超时的问题"><a href="#关于ssh连接超时的问题" class="headerlink" title="关于ssh连接超时的问题"></a>关于ssh连接超时的问题</h2><ol><li>错误提示:ssh: connect to host github.com port 22: Connection timed out</li></ol><ul><li><p>ISP的问题,至于问什么,我也不知道.</p></li><li><p><span style="color:red">解决方案:将WiFi换成手机热点</span></p></li></ul><h2 id="关于hexo推送github仓库的问题"><a href="#关于hexo推送github仓库的问题" class="headerlink" title="关于hexo推送github仓库的问题"></a>关于hexo推送github仓库的问题</h2><ul><li><p>repo: <a href="https://github.com/Jack-Zhang-1314/Jack-Zhang-1314.github.io.git">https://github.com/Jack-Zhang-1314/Jack-Zhang-1314.github.io.git</a></p><ol><li>连接的地址如果写成https的形式,可能会不出现token凭证连接不上</li><li>放域名的文件名为<code>CHAME</code></li></ol></li><li><p><span style="color:red">解决方案:</span></p><ul><li>将连接方案改成ssh连接:<ul><li>repository: <a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#109;">&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#109;</a>:Jack-Zhang-1314/Jack-Zhang-1314.github.io.git</li><li>放域名的文件名为<code>CNAME</code></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoose的使用</title>
      <link href="/2021/08/25/mongoose-de-shi-yong/"/>
      <url>/2021/08/25/mongoose-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Mongoose库简而言之就是在node环境中操作MongoDB数据库的一种便捷的封装，一种对象模型工具，类似ORM，Mongoose将数据库中的数据转换为JavaScript对象以供你在应用中使用</p></blockquote><ol><li>下载安装 <code>Mongoosenpm i mongoose --save</code></li><li>在项目中引入mongoose <code>const mongoose = require(&#39;mongoose&#39;);</code></li><li>连接MongoDB数据库 <code>mongoose.connect(&#39;mongodb://localhost:27017/数据库名&#39;, &#123;useNewUrlParser: true, useUnifiedTopology: true&#125;);</code></li><li>断开数据库的连接(一般不需要) <code>mongoose.disconnect()</code></li><li>监听MongoDB数据库的连接状态</li></ol><ul><li>在mongoose对象里,有一个属性叫做connection,该对象表示的就是数据库的连接<ul><li>通过监听该对象的状态,可以来监听数据库的连接与断开<ul><li>数据库连接成功的事件:<code>mongoose.connction.once(&quot;open&quot;,function()())</code></li><li>数据库连接失败的事件:<code>mongoose.connection.once(&quot;close&quot;,function()())</code></li></ul></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//例:</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接数据库</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/mongoose_test'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>useNewUrlParser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> useUnifiedTopology<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定监听</span><span class="token keyword">const</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token string">'connection error:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"绑定成功"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断开数据库连接</span>mongoose<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Schema-Model-Document"><a href="#Schema-Model-Document" class="headerlink" title="Schema,Model,Document"></a>Schema,Model,Document</h2><h3 id="Schema的类型"><a href="#Schema的类型" class="headerlink" title="Schema的类型"></a>Schema的类型</h3><ul><li>String      字符串</li><li>Number      数字</li><li>Date        日期</li><li>Buffer      二进制</li><li>Boolean     布尔值</li><li>Mixed       混合类型</li><li>ObjectId    对象ID</li><li>Array       数组</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> mongoose<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/mongoose_test'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>useNewUrlParser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> useUnifiedTopology<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定监听</span><span class="token keyword">const</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token string">'connection error:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"绑定成功"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建Schema(模式)对象</span><span class="token comment">//将mongoose.Schema赋值给一个变量</span><span class="token keyword">const</span> Schema<span class="token operator">=</span>mongoose<span class="token punctuation">.</span>Schema<span class="token keyword">const</span> blogSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     name<span class="token operator">:</span>String<span class="token punctuation">,</span>     age<span class="token operator">:</span>Number<span class="token punctuation">,</span>     gender<span class="token operator">:</span><span class="token punctuation">&#123;</span>         type<span class="token operator">:</span>String<span class="token punctuation">,</span>         <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">"female"</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    address<span class="token operator">:</span>String<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//通过Schema来创建Model</span><span class="token comment">//Model代表的是数据库中的集合,通过Model才能对数据库进行操作</span><span class="token comment">//mongoose.model(modelName,schema)</span><span class="token comment">//modelName就是要映射的集合名  mongoose会自动将单数集合名变成复数</span><span class="token keyword">const</span> Blog <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Blog'</span><span class="token punctuation">,</span> blogSchema<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Model类型"><a href="#Model类型" class="headerlink" title="Model类型"></a>Model类型</h3><ol><li>通过Schema来创建Model</li><li>Model代表的是数据库中的集合,通过Model才能对数据库进行操作</li><li>mongoose.model(modelName,schema)</li><li>modelName就是要映射的集合名  mongoose会自动将单数集合名变成复数</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//...省略连接数据库,Schema创建</span><span class="token keyword">const</span> Blog <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Blog'</span><span class="token punctuation">,</span> blogSchema<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Model类型增删查改数据库"><a href="#Model类型增删查改数据库" class="headerlink" title="Model类型增删查改数据库"></a>Model类型增删查改数据库</h3><ol><li>Model.create(doc(s),[callback])</li></ol><ul><li>用来创建一个或多个文档并添加到数据库中</li></ul><blockquote><ul><li>参数:<br>  doc(s)   可以是一个文档对象,也可以是一个文档对象的数组<br>  callback 当操作完成以后调用的回调数组</li></ul></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//向数据库中插入一个文档</span><span class="token comment">//Blog.creat(e)(doc,function(err)&#123;&#125;)</span>Blog<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>    gender<span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>    address<span class="token operator">:</span><span class="token string">"花果山"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"插入成功"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Blog<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span>        age<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>        gender<span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>        address<span class="token operator">:</span><span class="token string">"高老庄"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"唐僧"</span><span class="token punctuation">,</span>        age<span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">,</span>        gender<span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>        address<span class="token operator">:</span><span class="token string">"大唐"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"插入成功"</span><span class="token operator">+</span>arguments<span class="token punctuation">)</span><span class="token comment">//插入的数据</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>查询:</li></ol><ul><li><p><code>Model.find(conditions,[projection],[options],[callback])</code></p><ul><li>–查询所有符合条件的文档  返回的是一个数组</li></ul></li><li><p><code>Model.findById(id,[projection],[options],[callback])</code></p><ul><li>–根据文档的id属性查询文档  总和返回文档对象</li></ul></li><li><p><code>Model.findOne(conditions,[projection],[options],[callback])</code></p><ul><li>–查询符合条件的第一个文档  总和返回第一个文档对象</li></ul></li><li><p>conditions  查询的条件</p></li><li><p>projection  投影:需要获取到的字段</p><ul><li>两种方式:{name:1,_id:0}或”name -_id”</li></ul></li><li><p>options     查询选项(skip limit)</p></li><li><p>callback    回调函数,查询结果会通过回调函数返回</p></li></ul><blockquote><p>注意:<span style="color:red">回调函数必须传,如果不传回调函数,不会查询</span></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">Blog<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>_id<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>docs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Blog<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>doc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Blog<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">"60f428da31c79f361cf1c442"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>doc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过find()查询的结果,返回的对象,就是Document,文档对象</span>        <span class="token comment">//Document对象时Model的实例</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>修改</li></ol><ul><li><p><code>Model.update(conditions,doc,[options],[callback])</code></p></li><li><p><code>Model.updateMany(conditions,doc,[options],[callback])</code></p></li><li><p><code>Model.updateOne(conditions,doc,[options],[callback])</code></p></li><li><p>-用来修改一个或多个文档</p></li><li><p>conditions  查询的条件</p></li><li><p>-doc修改后的对象</p></li><li><p>-options 配置参数</p></li><li><p>callback 回调函数</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//修改唐僧的年龄为20</span>Blog<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"唐僧"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>$set<span class="token operator">:</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"修改成功"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>删除</li></ol><ul><li><p><code>Model.remove(conditions,[callback])</code></p></li><li><p><code>Model.deleteOne(conditions,[callback])</code></p></li><li><p><code>Model.deleteMany(conditions,[callback])</code></p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">Blog<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>补充<code>Model.count(conditions,[callback])</code>—返回的是符合条件的长度</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">Blog<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><ol><li>Document和集合中的文档一一对应,Document是Model的实例通过Model查询的结果都是Document</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//创建一个Document</span><span class="token keyword">let</span> blo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"金角大王"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token string">"55"</span><span class="token punctuation">,</span>    gender<span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>    address<span class="token operator">:</span><span class="token string">"洞"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果想要上面的代码生效,需要执行,document的方法<code>Model#save([options],[fn])</code></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">blo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"保存成功"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>可以直接操控回调函数</li></ol><ul><li><code>update(update,[options],[callback])</code>–修改对象</li><li><code>remove([callback])</code>–移除对象</li><li><code>get(name)</code> –获取文档中的指定属性值</li><li><code>set(name,value)</code>–设置文档中的指定属性值</li><li><code>id</code>–获取文档的_id属性</li><li><code>toJSON()</code>–转换成一个JSON对象</li><li><code>toObject()</code>—将Document对象转换成一个普通的js对象<ul><li>注意:<span style="color:red">转换成普通的js对象以后,注意所有的Document对象的方法或属性都不能使用</sapn></li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">Blog<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>doc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 doc<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>$set<span class="token operator">:</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"修改成功"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        doc<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大师兄再见"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        doc<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"金子"</span><span class="token punctuation">)</span><span class="token comment">//直接可以写成doc.name="金子"</span>        <span class="token keyword">let</span> j<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        <span class="token keyword">let</span> o<span class="token operator">=</span>doc<span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">delete</span> o<span class="token punctuation">.</span>address        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>_id<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的一些小tips</title>
      <link href="/2021/08/24/vue-shop/"/>
      <url>/2021/08/24/vue-shop/</url>
      
        <content type="html"><![CDATA[<h2 id="路由方面的设置"><a href="#路由方面的设置" class="headerlink" title="路由方面的设置"></a>路由方面的设置</h2><ol><li><p>路由的重定向问题:自动跳转到某页面,<span style="color:red">在路由规则routes中</span>,例:<code>&#123;path:&quot;/&quot;,redirect:&quot;/login&quot;&#125;</code></p></li><li><p>路由重定向父组件复用问题:</p></li></ol>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Home<span class="token punctuation">,</span>    redirect<span class="token operator">:</span> <span class="token string">"/welcome"</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">"/welcome"</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> Welcome<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">"/users"</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> Users      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于重定向父组件复用问题:子组件如果是/welcome,默认带/的是根路径=&gt;/welcome,会连同父组件一起复用.如果子组件是welcome,不带/,默认加载/home/welcome</p></blockquote><ol start="3"><li>路由的跳转:<code>this.$router.push(&quot;/home&quot;)</code>从当前页面跳转到/home根页面</li></ol><h2 id="保持Element-UI菜单栏点击之后的高亮"><a href="#保持Element-UI菜单栏点击之后的高亮" class="headerlink" title="保持Element-UI菜单栏点击之后的高亮"></a>保持Element-UI菜单栏点击之后的高亮</h2>  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 一级菜单 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id+<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in menulist<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 一级菜单的模板去 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 图标 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iconsObj[item.id]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 文本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;item.authName&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 二级菜单 --></span>  <span class="token comment">&lt;!-- 传入一个菜单栏的根路径,保持唯一性 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>/<span class="token punctuation">'</span>+i.path<span class="token punctuation">"</span></span>                  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i in item.children<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i.id<span class="token punctuation">"</span></span>                <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>saveNavState(<span class="token punctuation">'</span>/<span class="token punctuation">'</span>+i.path)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 图标 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 文本 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;i.authName&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//组件中</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//被激活的链接地址</span>  activePath<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token comment">//保存连接的激活状态,将唯一路径标识保存在session中</span>  <span class="token function">saveNavState</span><span class="token punctuation">(</span><span class="token parameter">activePath</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"activePath"</span><span class="token punctuation">,</span>activePath<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>activePath<span class="token operator">=</span>activePath  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//最重要的就是在创造元素的时候读取到标识 </span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>activePath<span class="token operator">=</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"activePath"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb</title>
      <link href="/2021/08/23/mongodb/"/>
      <url>/2021/08/23/mongodb/</url>
      
        <content type="html"><![CDATA[<h2 id="1初始化数库可以使用-mongod-–dbpath-地址值"><a href="#1初始化数库可以使用-mongod-–dbpath-地址值" class="headerlink" title="1初始化数库可以使用  mongod –dbpath 地址值"></a>1初始化数库可以使用  mongod –dbpath 地址值</h2><h2 id="2基本概念"><a href="#2基本概念" class="headerlink" title="2基本概念"></a>2基本概念</h2><ul><li><p>数据库(databases)</p></li><li><p>集合(collection)</p></li><li><p>文档(document)</p><ul><li>在MongoDB中,数据库和集合都不需要手动创建,当我们创建文档时,如果文档所在的集合或数据库不存在时,会自动创建数据库和集合</li></ul></li></ul><h2 id="3-基础指令"><a href="#3-基础指令" class="headerlink" title="3.基础指令"></a>3.基础指令</h2><ul><li><p>show dbs/databases    —显示当前的所有的数据</p></li><li><p>use 数据库名   —进入到指定的数据库中</p></li><li><p>db  —db表示的是当前的数据库</p></li><li><p>show collections    —显示数据库中所有的集合</p></li></ul><h2 id="4-数据库的CRUD的操作"><a href="#4-数据库的CRUD的操作" class="headerlink" title="4.数据库的CRUD的操作"></a>4.数据库的CRUD的操作</h2><h3 id="1-向数据库中插入文档"><a href="#1-向数据库中插入文档" class="headerlink" title="(1)向数据库中插入文档"></a>(1)向数据库中插入文档</h3><ul><li><p>db.&lt;collection&gt;.insert(doc)  —向集合中插入一个文档  /insertOne()</p></li><li><p>db.&lt;collection&gt;.insert([doc,doc,…])   —向集合中插入多个文档  /insertMany()</p><ul><li><p>如果没有给文档指定的__id属性,则数据库会自动为文档添加__id ,该属性用来作为文档的唯一标识</p></li><li><p>__id我们可以自己指定,如果我们指定了数据库就不会在添加了,如果我们指定__id也必须确保他的唯一性</p><ul><li>–例子;向test数据库中的stus集合中插入一个新的学生对象:{name:”孙悟空”,age:18,gender:”男”};</li></ul> <pre class="line-numbers language-mongodb" data-language="mongodb"><code class="language-mongodb">db<span class="token punctuation">.</span>stus<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token property">name</span><span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token property">gender</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="2-查询"><a href="#2-查询" class="headerlink" title="(2)查询"></a>(2)查询</h3><ol><li>db.&lt;collection&gt;.find()   —查询当前集合中的所有文档</li></ol><ul><li><p>find()  用来查询集合中所有符合条件阿德文档</p></li><li><p>find()  可以接受一个对象作为条件参数</p><ul><li><p>{}  表示查询集合中所有的文档,{属性:值}  查询属性是指定值的文档</p></li><li><p>find()返回的是一个数组,可以加索引[]</p></li></ul></li></ul><ol start="2"><li>db.&lt;collection&gt;.findOne()</li></ol><ul><li><p>用来查询集合中符合条件的第一个文档</p></li><li><p>findOne()返回的是第一个文档对象</p></li><li><p><code>db.stus.find().count()</code>–查询所有文档的数量</p></li></ul><h3 id="3-修改"><a href="#3-修改" class="headerlink" title="(3)修改"></a>(3)修改</h3><ol><li>db.&lt;collection&gt;.update(查询条件,新对象)</li></ol><ul><li><p>update()默认情况下会使用新对象替换旧对象</p></li><li><p>update()默认只会修改第一个</p><ul><li><p>如果需要修改指定的属性,而不是要替换需要使用”修改操作符”来完成修改</p></li><li><p>$set   可以修改文件中的指定属性</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">例<span class="token operator">:</span>    db<span class="token punctuation">.</span>stus<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"_id"</span><span class="token operator">:</span><span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60efe2cfa164bbc13d327278"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>$set<span class="token operator">:</span>     <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span><span class="token string">"沙和尚"</span><span class="token punctuation">,</span>      address<span class="token operator">:</span><span class="token string">"流沙河"</span><span class="token punctuation">,</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token punctuation">&#123;</span>      multi<span class="token operator">:</span><span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token comment">//true指修改多个</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>$unset   可以删除文档中的指定属性</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">例<span class="token operator">:</span>    db<span class="token punctuation">.</span>stus<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token string">"_id"</span><span class="token operator">:</span><span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60efe2cfa164bbc13d327278"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>     $unset<span class="token operator">:</span><span class="token punctuation">&#123;</span>     address<span class="token operator">:</span><span class="token string">"流沙河"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>     multi<span class="token operator">:</span><span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token comment">//true指删除多个</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>db.&lt;collection&gt;.updateMany()    —可以修改多个符合条件的文档</p></li><li><p>db.&lt;collection&gt;.updateOne()      —修改一个符合条件的文档</p></li></ul><h3 id="4-删除"><a href="#4-删除" class="headerlink" title="(4)删除"></a>(4)删除</h3><ul><li><p>db.&lt;collection&gt;.remove()</p><ul><li><p>remove()可以根据条件来删除文档,传递的条件和find()一样</p></li><li><p>默认情况下删除符合条件的所有的文档</p></li><li><p>第二个参数填true,只删除一个&lt;justone&gt;,例:<code>db.stus.remove(&#123;name:28&#125;,true)</code></p></li></ul></li><li><p>db.&lt;collection&gt;.drop()   —删除集合</p></li><li><p>db.&lt;collection&gt;.deleteMany()    —删除多个</p></li><li><p>db.&lt;collection&gt;.deleteOne()   —删除一个</p></li><li><p>db.dropDatabase()  —删除数据库</p></li></ul><p>注意:一般数据库中的数据不会删除,所以删除的方法很少调用,一般会在数据中添加一个字段,来表示是否会被删除</p><h2 id="5文档与文档之间的关系"><a href="#5文档与文档之间的关系" class="headerlink" title="5文档与文档之间的关系"></a>5文档与文档之间的关系</h2><h3 id="1-一对一-one-to-one"><a href="#1-一对一-one-to-one" class="headerlink" title="(1)一对一(one to one)"></a>(1)一对一(one to one)</h3><ol><li>夫妻关系:–在MongoDB,可以通过内嵌文档的 形式来体现出一对一的关系</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">db<span class="token punctuation">.</span>wifeAngHusband<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span><span class="token string">"haungrong"</span><span class="token punctuation">,</span>   husband<span class="token operator">:</span>   <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span><span class="token string">"guojing"</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span><span class="token string">"panjinlain"</span><span class="token punctuation">,</span>   husband<span class="token operator">:</span>   <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span><span class="token string">"wudalang"</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span><span class="token string">"zhuzhuxia"</span><span class="token punctuation">,</span>   husband<span class="token operator">:</span>   <span class="token punctuation">&#123;</span>       name<span class="token operator">:</span><span class="token string">"xiaofeifei"</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-一对多-one-to-many-多对一-many-to-one"><a href="#2-一对多-one-to-many-多对一-many-to-one" class="headerlink" title="(2)一对多(one to many)/(多对一)(many to one)"></a>(2)一对多(one to many)/(多对一)(many to one)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//一对多  用户(users)  订单(orders)</span>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>   username<span class="token operator">:</span><span class="token string">"swk"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span><span class="token string">"zbj"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>list<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"扑克"</span><span class="token punctuation">,</span><span class="token string">"漫话"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>users_id<span class="token operator">:</span><span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60f14f0ac32c00008c002af5"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//查找用户swk的订单</span><span class="token keyword">let</span> user_id<span class="token operator">=</span>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span><span class="token string">"swk"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_iddb<span class="token punctuation">.</span>order<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>users_id<span class="token operator">:</span>user_id<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-多对多-many-to-many"><a href="#3-多对多-many-to-many" class="headerlink" title="(3)多对多(many to many)"></a>(3)多对多(many to many)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//多对多</span>db<span class="token punctuation">.</span>teachers<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"hongqigong"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"guixianren"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"huangyaoshi"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>teachers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>stus<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"guojing"</span><span class="token punctuation">,</span>    teach_ids<span class="token operator">:</span>    <span class="token punctuation">[</span>      <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60f159efc32c00008c002afc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60f159efc32c00008c002afe"</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"suiwukong"</span><span class="token punctuation">,</span>    teach_ids<span class="token operator">:</span>    <span class="token punctuation">[</span>      <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60f159efc32c00008c002afc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60f159efc32c00008c002afe"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60f159efc32c00008c002afd"</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>stus<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="补充-sort与投影"><a href="#补充-sort与投影" class="headerlink" title="补充:sort与投影"></a>补充:sort与投影</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//查询文档时,默认情况下时按照_id的值进行排列(升序)</span><span class="token comment">//sort()可以用来指定文档的排序的规则,sort()需要传递一个对象来指定排序规则  1表示升序   -1表示降序</span><span class="token comment">//limit  skip  sort  可以以任意的顺序进行调用</span>db<span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>sal<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>empo<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//在查询时可以在第二个参数的位置来设置查询的结果   投影</span>db<span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>enname<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>_id<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>sal<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Mongoose"><a href="#6-Mongoose" class="headerlink" title="6.Mongoose"></a>6.Mongoose</h2><h3 id="1-mongoose为我们提供了几个新的对象"><a href="#1-mongoose为我们提供了几个新的对象" class="headerlink" title="(1)mongoose为我们提供了几个新的对象"></a>(1)mongoose为我们提供了几个新的对象</h3><ul><li><p>Schema(模式对象)   定义约束了数据库的文档结构</p></li><li><p>Model  作为集合中的所有文档的表示,相当于MongoDB数据库中的集合collection</p></li><li><p>Document  表示集合中的具体文档,相当于集合中的一个具体文档</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的基础</title>
      <link href="/2021/08/22/vue-de-ji-chu/"/>
      <url>/2021/08/22/vue-de-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">vue<span class="token operator">-</span>test├── babel<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js<span class="token operator">:</span>babel配置文件  ├── output<span class="token punctuation">.</span>js<span class="token operator">:</span>vue的隐藏配置项        ├── <span class="token keyword">package</span><span class="token operator">-</span>lock<span class="token punctuation">.</span>json<span class="token operator">:</span>包版本配置文件├── <span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token operator">:</span>应用包配置文件     ├── <span class="token keyword">public</span>│   ├── favicon<span class="token punctuation">.</span>ico<span class="token operator">:</span>页签图标  │   └── index<span class="token punctuation">.</span>html<span class="token operator">:</span>主页面   ├── readme<span class="token punctuation">.</span>md<span class="token operator">:</span>应用描述文件        ├── src│   ├── App<span class="token punctuation">.</span>vue<span class="token operator">:</span>汇总所有文件      │   ├── assets<span class="token operator">:</span>存放静态资源     │   │   └── logo<span class="token punctuation">.</span>png │   ├── components<span class="token operator">:</span>存放组件│   │   ├── School<span class="token punctuation">.</span>vue│   │   └── Student<span class="token punctuation">.</span>vue│   └── main<span class="token punctuation">.</span>js<span class="token operator">:</span>入口文件└── vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js<span class="token operator">:</span>可选择配置项<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ul><li>vue.js与vue.runtime.xxx.js的区别<br>  (1)vue.js是完整版的Vue,包括:核心功能+模板解析器<br>  (2)vue.runtime.xxx.js是运行版的Vue,只包含:核心功能,没有解析器模板</li><li>因为vue.runtime.xxx.js,没有解析器模板,所以不能使用template配置项,需要使用<br>  render函数接收到createElement函数去指定具体内容</li></ul><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><blockquote><p>使用vue inspect &gt; output.js可以看到Vue脚手架的默认配置项<br>使用vue.config.js可以对脚手架进行个性化定制,详情见:<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></p></blockquote><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ul><li><p>1.被用来给元素子组件注册引用信息(id的替代者)</p></li><li><p>2.应用在html标签上获取真实的DOM元素,应用在组件标签上是组件的实例对象(vc)</p></li><li><p>3.使用方式:打标识:</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> 或者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>School</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sch<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>4.获取:this.$refs.xxx</li></ul><h2 id="配置项props"><a href="#配置项props" class="headerlink" title="配置项props"></a>配置项props</h2><ul><li><p>功能:让组件接收外部传过来的数据</p><ul><li>(1)传递数据:</li></ul> <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Demo</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>(2)接收数据</p><ul><li>第一种方式(只接收):</li></ul> <pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第二种方式(限制类型):</li></ul> <pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span>Number<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>第三种方式(限制类型,限制必要性,指定默认值)</li></ul> <pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span>String<span class="token punctuation">,</span><span class="token comment">//类型</span>    required<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//必要性</span>    <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">"老王"</span><span class="token comment">//默认值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  备注:props是只读,Vue底层只会监测你对props的修改,如果进行了修改,就会发出警告,若业务需求确实修改需要修改,那么请复制props的内容到data中一份,然后去修改data中的数据</p></li></ul></li></ul><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ul><li><p>功能:可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式:</p><ul><li><p>第一步定义混合:</p> <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&#123;    data()&#123;....&#125;,    methods()&#123;...&#125;    .....&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二步使用混入,例如:<blockquote><ul><li>(1)全局混入:Vue.mixin(xxx)</li><li>(2)局部混入: mixins:[xxx]</li></ul></blockquote></li></ul></li></ul></li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li><p>功能用于增强Vue</p></li><li><p>本质:包含install方法的一个对象,install的第一个参数是Vue,第二个参数是插件使用者传递的数据</p></li><li><p>定义插件:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">对象<span class="token punctuation">.</span><span class="token function-variable function">install</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span>options</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//1.添加全局过滤器</span>  Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token comment">//2添加全局指令</span>  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token comment">//3.配置全局混合</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token comment">//4.添加实例方法</span>  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$myMethod</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span>  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$myProperty<span class="token operator">=</span>xxx    使用插件  Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ul><li>作用:让样式在局部生效,防止冲突</li><li>写法:</li></ul> <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;style scoped&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><ol><li><p>组件化编码流程：</p><p>(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>   1).一个组件在用：放在组件自身即可。</p><p>   2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p>(3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>(1).父组件 ==&gt; 子组件 通信</p><p>(2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code>xxxxxStorage.clear()</code></p><p>该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间自通信的方式,适用于:子组件==&gt;父组件</p></li><li><p>使用场景:A是父组件,B是子组件,B想给A传数据,那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）</p></li><li><p>绑定自定义事件:</p><ol><li>第一种方式,在父组件中:<br><code>&lt;Demo @demo=&quot;test&quot;/&gt;</code>或 <code>&lt;Demo v-on:demo=&quot;test&quot;/&gt;</code></li><li>第二种方式:在父组件中</li></ol> <pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>Demo ref<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>$ref<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>若想让自定义事件只触发一次,可以使用once修饰符,或$once方法</li></ol></li><li><p>触发自定义事件: <code>this.$emit(&quot;demo&quot;,数据)</code></p></li><li><p>解绑自定义事件:this.$off(“demo”)</p></li><li><p>组件上也可以绑定DOM事件,需要使用native修饰符</p></li><li><p>注意:通过 <code>this.$ref.xxx.$on(&quot;demo&quot;,回调)</code>绑定自定义事件,回调（<span style="color:red">要么配置在methods中,要么用箭头函数</span>）,否则this指向会出问题</p></li></ol><h2 id="全局事件总线-GlobalEventBus"><a href="#全局事件总线-GlobalEventBus" class="headerlink" title="全局事件总线(GlobalEventBus)"></a>全局事件总线(GlobalEventBus)</h2><ol><li><p>一种组件间通信的方式,适用于&lt;span style=”color:red”&gt;任意组件间通信</span></p></li><li><p>安装全局事件总线:</p></li></ol>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token operator">...</span><span class="token operator">...</span>   <span class="token function">beforeCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus<span class="token operator">=</span><span class="token keyword">this</span><span class="token comment">//安装劝酒事件总线,$bus就是当前应用的vm</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>使用事件总线:</p><ol><li>接收数据:A组件想接收数据,则在A组件汇总给$bus绑定自定义事件,事件的<span style="color:red">回调留在A组件自身</span></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>提供数据: <code>this.$bus.$emit(&quot;xxx&quot;,数据)</code></li></ol></li><li><p>最好在beforeDestory钩子中,用$off去解绑&lt;span style=”color:red”&gt;当前组件所用到的</span>事件</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于&lt;span style=”color:red”&gt;任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span> <span class="token comment">//订阅消息</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="D:\web\vue\vue-test\16_src_过度与动画\transition.png" alt="transition"></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;transition name&#x3D;&quot;hello&quot;&gt; &lt;h1 v-show&#x3D;&quot;isShow&quot;&gt;你好啊！&lt;&#x2F;h1&gt;&lt;&#x2F;transition&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li><li><p>注意:animate.css是一个动画库</p></li></ol></li></ol><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul><li><p>在vue.config.js中添加如下的配置:</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js">devServer<span class="token operator">:</span><span class="token punctuation">&#123;</span>  proxy<span class="token operator">:</span><span class="token string">"http://localhost:5000"</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p> 说明:</p><ol><li>优点:配置简单,请求资源时直接发给前端(8080)即可</li><li>缺点:不能配置多个代理,不能灵活的控制请求是否走代理.</li><li>工作方式:若是按照上述配置代理,当请求了前端不存在的资源时,那么该请求会转发给服务器(优先匹配前端资源)</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul><li><p>编写vue.config.js的配置的代理规则:</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js">moudle<span class="token punctuation">.</span>export<span class="token operator">=</span><span class="token punctuation">&#123;</span>   devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span>       <span class="token string">'/api'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>         target<span class="token operator">:</span> <span class="token string">'http://localhost:6000'</span><span class="token punctuation">,</span>         pathRewrite<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string">"^/api"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//将所有匹配到的/api变成空字符串</span>         ws<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//用于支持websocket</span>         changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//用于控制请求头中的Host值.是真就是被代理服务器的值,是假就是代理服务器的值</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token string">"/demo"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>           target<span class="token operator">:</span><span class="token string">"http://localhost:5001"</span><span class="token punctuation">,</span>           pathRewrite<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string">"^/demo"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           ws<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//用于支持websocket</span>           changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//用于控制请求头中的Host值</span>          <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  changeOrign设置为<span class="token boolean">true</span><span class="token punctuation">,</span>服务器找到的请求头中的host为<span class="token operator">:</span>localhost<span class="token operator">:</span><span class="token number">5000</span> changeOrign设置为<span class="token boolean">false</span><span class="token punctuation">,</span>服务器找到的请求头中的host为<span class="token operator">:</span>localhost<span class="token operator">:</span><span class="token number">8000</span> changeOrign默认值为<span class="token boolean">true</span> <span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>说明:</p><ol><li>优点:可以配置多个代理,且可以灵活的控制请求是否走代理</li><li>缺点:配置略微繁琐,请求资源时必须加前缀</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用:让父组件可以向子组件插入html结构,也是一种组件间通信的方式,适用于<span style="color:red">父组件==&gt;子组件</span></p></li><li><p>分类:默认插槽,具名插槽,作用域插槽</p></li><li><p>使用方式:</p></li><li><p>默认插槽:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> 父组件中<span class="token operator">:</span><span class="token operator">&lt;</span>Category<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>子组件中<span class="token operator">:</span><span class="token operator">&lt;</span>template<span class="token operator">></span>   <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定义插槽<span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>slot<span class="token operator">></span>插槽默认值<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>具名插槽</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"> 父组件中<span class="token operator">:</span> <span class="token operator">&lt;</span>Category<span class="token operator">></span>  <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>footer<span class="token operator">></span>   <span class="token operator">&lt;</span>div<span class="token operator">></span>html结构<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>子组件中<span class="token operator">:</span> <span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定义插槽<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>插槽默认值<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>插槽默认值<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>作用域插槽: <span style="color:red">数据在组件自身,但是根据数据生成的结构需要组件的使用者来决定</span>(games数据在Category组件中但是用数据所便利的结构又App决定)  </p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"> 父组件中： <span class="token operator">&lt;</span>Category<span class="token operator">></span> <span class="token operator">&lt;</span>template scope<span class="token operator">=</span><span class="token string">"scopeData"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 生成的是ul列表 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>ul<span class="token operator">></span>   <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"g in scopeData.games"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"g"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>g<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span><span class="token operator">&lt;</span>Category<span class="token operator">></span><span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">"scopeData"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 生成的是h4标题 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h4 v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"g in scopeData.games"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"g"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>g<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">></span>      子组件中：  <span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>slot <span class="token operator">:</span>games<span class="token operator">=</span><span class="token string">"games"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span> <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span><span class="token string">'Category'</span><span class="token punctuation">,</span>       props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token comment">//数据在子组件自身</span>       <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>               games<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'红色警戒'</span><span class="token punctuation">,</span><span class="token string">'穿越火线'</span><span class="token punctuation">,</span><span class="token string">'劲舞团'</span><span class="token punctuation">,</span><span class="token string">'超级玛丽'</span><span class="token punctuation">]</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>  在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>  多个组件需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//应用Vuex插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">//准备actions对象——响应组件中用户的动作</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//准备mutations对象——修改state中的数据</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//准备state对象——保存具体的数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> actions<span class="token punctuation">,</span> mutations<span class="token punctuation">,</span> state<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//引入store</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//创建vm</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span> store<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//引用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//响应组件中加的动作</span><span class="token function">jia</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// console.log('actions中的jia被调用了',miniStore,value)</span> context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//执行加</span> <span class="token constant">JIA</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// console.log('mutations中的JIA被调用了',state,value)</span>  state<span class="token punctuation">.</span>sum <span class="token operator">+=</span> value <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   sum<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> actions<span class="token punctuation">,</span> mutations<span class="token punctuation">,</span> state<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工</li><li>在<code>store</code>中追加<code>getters</code>配置</li></ol> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">const</span> getters<span class="token operator">=</span><span class="token punctuation">&#123;</span>   <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum<span class="token operator">*</span><span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   ······   getters<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>组件中读取数据：<code>$store.getters.bigSum</code></li></ol><h3 id="6-四个map方法"><a href="#6-四个map方法" class="headerlink" title="6.四个map方法"></a>6.四个map方法</h3><ol><li><p>mapState方法:用于帮助我们映射state中的数据为计算属性</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//借助mapState生成计算属性,从state中获取属性(对象写法)</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>sum<span class="token operator">:</span><span class="token string">"sum"</span><span class="token punctuation">,</span>school<span class="token operator">:</span><span class="token string">"school"</span><span class="token punctuation">,</span>subject<span class="token operator">:</span><span class="token string">"subject"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>         <span class="token comment">//借助mapState生成计算属性,从state中获取属性(数组写法)</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"sum"</span><span class="token punctuation">,</span><span class="token string">"school"</span><span class="token punctuation">,</span>subject<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mapGetters:用于帮助我们映射getters中的数据为计算属性</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token comment">//借助mapGetters生成计算属性,从getters中获取属性(对象写法)</span>   <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>bigSum<span class="token operator">:</span><span class="token string">"bigSum"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//借助mapGetters生成计算属性,从getters中获取属性(数组写法)</span>   <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"bigSum"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p></li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>incrementOdd<span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>mapMutations方法</strong>： 用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//靠mapActions生成：increment、decrement（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>increment<span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> countAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  namespaced<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  state<span class="token operator">:</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> personAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  namespaced<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  state<span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  modules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    countAbout<span class="token punctuation">,</span>    personAbout  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中读取state数据：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>personAbout<span class="token punctuation">.</span>list<span class="token comment">//方式二：借助mapState读取：</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中读取getters数据：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'personAbout/firstPersonName'</span><span class="token punctuation">]</span><span class="token comment">//方式二：借助mapGetters读取：</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中调用dispatch</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接dispatch</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapActions：</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>incrementOdd<span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中调用commit</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接commit</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personAbout/ADD_PERSON'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapMutations：</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>increment<span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入VueRouter</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">//引入Luyou 组件</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token comment">//创建router实例对象，去管理一组一组的路由规则</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> routes<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>   path<span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>   component<span class="token operator">:</span>About  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>   path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>   component<span class="token operator">:</span>Home  <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//暴露router</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现切换（active-class可配置高亮样式）</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>指定展示位置</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-view&gt;&lt;&#x2F;router-view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹中,一般组件通常存放在<code>components</code>文件夹中</li><li>通过切换,”隐藏”了的路由组件,默认是被销毁的,需要的时候再去挂载</li><li>每个组件都有自己的<code>$route</code>属性,里面存储自己的路由信息</li><li>整个应用只有一个router,可以通过组件的<code>router</code>获取到</li></ol><h3 id="3-多级路由"><a href="#3-多级路由" class="headerlink" title="3.多级路由"></a>3.多级路由</h3><ol><li>配置路由规则,使用children配置项</li></ol>  <pre class="line-numbers language-js" data-language="js"><code class="language-js">routes<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/about"</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> About  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Home<span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">"news"</span><span class="token punctuation">,</span><span class="token comment">//此处一定不要写/news</span>        component<span class="token operator">:</span> News      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">"message"</span><span class="token punctuation">,</span><span class="token comment">//此处一定不要写/message</span>        component<span class="token operator">:</span> Message      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>跳转(要写完整路径)</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/home/news"</span><span class="token operator">></span>News<span class="token operator">&lt;</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li>传递参数</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带query参数<span class="token punctuation">,</span>to的字符串写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"`/home/message/detail?id=$&#123;m.id&#125;&amp;tittle=$&#123;m.tittle&#125;`"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带query参数<span class="token punctuation">,</span>to的对象写法 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"&#123;path:'/home/message/detail',query:&#123;id:m.id,tittle:m.tittle&#125;&#125;"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>接收参数</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>tittle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/demo'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>Demo<span class="token punctuation">,</span>children<span class="token operator">:</span><span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> path<span class="token operator">:</span><span class="token string">'test'</span><span class="token punctuation">,</span> component<span class="token operator">:</span>Test<span class="token punctuation">,</span> children<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>       name<span class="token operator">:</span><span class="token string">'hello'</span> <span class="token comment">//给路由命名</span>   path<span class="token operator">:</span><span class="token string">'welcome'</span><span class="token punctuation">,</span>   component<span class="token operator">:</span>Hello<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简化跳转</p></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--简化前，需要写完整的路径 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/demo/test/welcome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--简化后，直接通过名字跳转 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;name:<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--简化写法配合传递参数 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span><span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; name:<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>, query:&#123;  id:666,  title:<span class="token punctuation">'</span>你好<span class="token punctuation">'</span>&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li>配置路由,声明接收params参数</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>   path<span class="token operator">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span>   component<span class="token operator">:</span> Home<span class="token punctuation">,</span>   children<span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">&#123;</span>       name<span class="token operator">:</span><span class="token string">"home"</span><span class="token punctuation">,</span>       path<span class="token operator">:</span> <span class="token string">"news"</span><span class="token punctuation">,</span>       component<span class="token operator">:</span> News     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token punctuation">&#123;</span>       name<span class="token operator">:</span><span class="token string">"message"</span><span class="token punctuation">,</span>       path<span class="token operator">:</span> <span class="token string">"message"</span><span class="token punctuation">,</span>       component<span class="token operator">:</span> Message<span class="token punctuation">,</span>       children<span class="token operator">:</span><span class="token punctuation">[</span>         <span class="token punctuation">&#123;</span>           name<span class="token operator">:</span><span class="token string">"detail"</span><span class="token punctuation">,</span>           path<span class="token operator">:</span><span class="token string">"detail/:id/:tittle"</span><span class="token punctuation">,</span><span class="token comment">//使用占位符接收params参数</span>           component<span class="token operator">:</span>Detail         <span class="token punctuation">&#125;</span>       <span class="token punctuation">]</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>传递参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带params参数<span class="token punctuation">,</span>to的字符串写法 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"path:/home/message/detail/666/你好"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转并携带params参数<span class="token punctuation">,</span>to的字符串写法 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"&#123;path:'/home/message/detail',params:&#123;id:666,tittle:你好&#125;&#125;"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>   特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p><ol start="3"><li>接收参数</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>tittle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>作用：让路由组件更方便的收到参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span> name<span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span> path<span class="token operator">:</span><span class="token string">'detail/:id'</span><span class="token punctuation">,</span> component<span class="token operator">:</span>Detail<span class="token punctuation">,</span> <span class="token comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span> <span class="token comment">// props:&#123;a:900&#125;</span> <span class="token comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件 </span> <span class="token comment">// props:true</span> <span class="token comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span> <span class="token function">props</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span>    title<span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用:控制路由器跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种编入方式: 分别为<code>push</code>和<code>replace</code>,<code>push</code>是追加历史记录,<code>replace</code>是替换当前历史记录,路由跳转时,默认为<code>push</code></li><li>如何开启<code>replace</code>模式<code>&lt;router-link replace ......&gt;&lt;/router-link&gt;</code></li></ol><h3 id="9-便程式路由导航"><a href="#9-便程式路由导航" class="headerlink" title="9.便程式路由导航"></a>9.便程式路由导航</h3><ol><li><p>作用:不借助<code>&lt;router-link&gt;</code>实现路由跳转,让路由跳转更加灵活</p></li><li><p>基本编码:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//$router的两个API</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span>  query<span class="token operator">:</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span>m<span class="token punctuation">.</span>id<span class="token punctuation">,</span>tittle<span class="token operator">:</span>m<span class="token punctuation">.</span>tittle<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span>  query<span class="token operator">:</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span>m<span class="token punctuation">.</span>id<span class="token punctuation">,</span>tittle<span class="token operator">:</span>m<span class="token punctuation">.</span>tittle<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//前进</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//后退</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//可前进也可后退</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用:让不展示的路由组件保持挂载,不被销毁</p></li><li><p>具体编码:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive include<span class="token operator">=</span><span class="token string">"News"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="11-两个新的生命钩子"><a href="#11-两个新的生命钩子" class="headerlink" title="11.两个新的生命钩子"></a>11.两个新的生命钩子</h3><ol><li><p>作用:路由组件所独有的两个钩子,用于捕获路由组件的激活状态</p></li><li><p>具体名字:</p><ol><li><code>activated</code>路由组件被激活时触发  </li><li><code>deactivated</code>路由组件失活时触发  </li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用:对路由进行权限控制</p></li><li><p>分类:全局守卫,独享守卫,组件内守卫</p></li><li><p>全局守卫:</p></li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token comment">//全局前置路由守卫---初始化的时候被调用,每次路由切换之前被调用</span> router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"前置路由守卫"</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span>from<span class="token punctuation">)</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断是否需要权限</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/home/news"</span> <span class="token operator">||</span> to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/home/message"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"school"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"waiguoyu"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"无权限查看"</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>       <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//全局后置路由守卫---初始化的时候被调用,每次路由切换之后被调用</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span> <span class="token parameter">route</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span>title<span class="token operator">=</span>route<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>tittle <span class="token operator">||</span> <span class="token string">"🦁"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>独享守卫</li></ol>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">beforeEnter</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断是否需要权限</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/home/news"</span> <span class="token operator">||</span> to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/home/message"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"school"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"waiguoyu"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                 <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"无权限查看"</span><span class="token punctuation">)</span>               <span class="token punctuation">&#125;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>组件内守卫:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//进入守卫,通过路由规则,进入该组件</span><span class="token function">beforeRouterEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//离开守卫,通过路由规则,离开该组件</span><span class="token function">beforeRouterLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
